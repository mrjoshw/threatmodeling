<?xml version="1.0" encoding="UTF-8"?>
<template ref="3tierarchlightsail" name="3tierarch-lightsail" tags="">
  <desc/>
  <diagram draft="false">
    <schema>PG14R3JhcGhNb2RlbCBkeD0iMzIyMCIgZHk9IjEzMDIiIGdyaWQ9IjAiIGdyaWRTaXplPSIxMCIgZ3VpZGVzPSIxIiB0b29sdGlwcz0iMSIgY29ubmVjdD0iMSIgYXJyb3dzPSIxIiBmb2xkPSIxIiBwYWdlPSIwIiBwYWdlU2NhbGU9IjEiIHBhZ2VXaWR0aD0iODUwIiBwYWdlSGVpZ2h0PSIxMTAwIiBtYXRoPSIwIiBzaGFkb3c9IjAiIGlyRHJhd2lvVmVyc2lvbj0iNC4yLjAiPgogIDxyb290PgogICAgPG14Q2VsbCBpZD0iMCIvPgogICAgPG14Q2VsbCBpZD0iMSIgcGFyZW50PSIwIi8+CiAgICA8bXhDZWxsIGlkPSIyIiB2YWx1ZT0iUHVibGljIENsb3VkIiBzdHlsZT0iaXIucmVmPWI2MWQ2OTExLTMzOGQtNDZhOC05ZjM5LThkY2QyNGFiZmU5MTtyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO3JlY3Vyc2l2ZVJlc2l6ZT0wO2h0bWw9MTt2ZXJ0aWNhbEFsaWduPXRvcDthbGlnbj1sZWZ0O2Rhc2hlZD0xO3N0cm9rZVdpZHRoPTE7YXJjU2l6ZT0zO2Fic29sdXRlQXJjU2l6ZT0xO3NwYWNpbmdUb3A9MTtzcGFjaW5nTGVmdD0zMjtzdHJva2VDb2xvcj0jNzU3NUVCO2ZpbGxDb2xvcj0jRjBGMEZGO2ZpbGxPcGFjaXR5PTMwO2ZvbnRDb2xvcj0jNTY1MUUwO2Nvbm5lY3RhYmxlPTA7Y29udGFpbmVyPTE7c291cmNlPWlyaXVzcmlzaztpci50eXBlPVRSVVNUWk9ORTsiIHBhcmVudD0iMSIgdmVydGV4PSIxIj4KICAgICAgPG14R2VvbWV0cnkgeD0iLTExOSIgeT0iLTMxIiB3aWR0aD0iNzM1IiBoZWlnaHQ9IjQ1OCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjQiIHZhbHVlPSJBV1MgQWNjb3VudCBFbnZpcm9ubWVudCIgc3R5bGU9ImlyLnJlZj1hYzBlZjRmNS1kZmViLTQ5MjQtYmU0NC03NjgwMWIyMTRhNmE7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9YW1hem9uLXdlYi1zZXJ2aWNlcy1lbnZpcm9ubWVudDtpbWFnZT1kYXRhOmltYWdlL3N2Zyt4bWwsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlJSFpwWlhkQ2IzZzlJakFnTUNBeElERWlJR1pwYkd3OUltNXZibVVpUGlZamVHRTdQRzFoYzJzZ2FXUTlJbTFoYzJzd0lpQnRZWE5yTFhSNWNHVTlJbUZzY0doaElpQnRZWE5yVlc1cGRITTlJblZ6WlhKVGNHRmpaVTl1VlhObElpQjRQU0l3SWlCNVBTSXdJaUIzYVdSMGFEMGlNU0lnYUdWcFoyaDBQU0l4SWo0bUkzaGhPenhqYVhKamJHVWdZM2c5SWpBdU5TSWdZM2s5SWpBdU5TSWdjajBpTUM0MUlpQm1hV3hzUFNKaWJHRmpheUl2UGlZamVHRTdQQzl0WVhOclBpWWplR0U3UEdjZ2JXRnphejBpZFhKc0tDTnRZWE5yTUNraVBpWWplR0U3UEhCaGRHZ2daRDBpVFRFZ01FZ3dWakZJTVZZd1dpSWdabWxzYkQwaWRYSnNLQ053WVdsdWREQmZiR2x1WldGeUtTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVORGMyTnpJMElEQXVOamd3TXpBelNEQXVNVFU1T1RFeVZqQXVOak13T0RjNFF6QXVNVFU1T0RNeklEQXVOVGN5TmpBMUlEQXVNVGM1TXpJeUlEQXVOVEUxT1RreklEQXVNakUxTWpVMklEQXVORGN3TVRFNVF6QXVNalV4TVRnNUlEQXVOREkwTWpRMUlEQXVNekF4TkRnMElEQXVNemt4TnpZM0lEQXVNelU0TURjNElEQXVNemMzT0RreFREQXVNell6T1RNNUlEQXVNemMyTkRZMVREQXVNelk1TXpJMUlEQXVNemM1TXpFMlF6QXVNemczTXpjNElEQXVNemc0T1RneElEQXVOREEzTlRNM0lEQXVNemswTURNNElEQXVOREk0TURFMElEQXVNemswTURNNFF6QXVORFE0TkRreElEQXVNemswTURNNElEQXVORFk0TmpVeElEQXVNemc0T1RneElEQXVORGcyTnpBMElEQXVNemM1TXpFMlREQXVORGt5TURnNUlEQXVNemMyTkRZMVREQXVORGszT1RVZ01DNHpOemM0T1RGRE1DNDFORGc0TVRnZ01DNHpPVEExTURnZ01DNDFPVFEzTWprZ01DNDBNVGd4SURBdU5qSTVOelEwSURBdU5EVTNNRGs0VERBdU5qQTJNeUF3TGpRM09ETXlOVU13TGpVM05qWXdPQ0F3TGpRME5UVTFOU0F3TGpVek9ERXhOaUF3TGpReU1qQXhPU0F3TGpRNU5UUXhOaUF3TGpReE1EVXlORU13TGpRM05ESXdPQ0F3TGpReU1EZ2dNQzQwTlRBNU5EY2dNQzQwTWpZeE16a2dNQzQwTWpjek9ERWdNQzQwTWpZeE16bERNQzQwTURNNE1UUWdNQzQwTWpZeE16a2dNQzR6T0RBMU5UUWdNQzQwTWpBNElEQXVNelU1TXpRMUlEQXVOREV3TlRJMFF6QXVNekV4TURJeElEQXVOREl6TnpReklEQXVNalk0TXpjMElEQXVORFV5TkRZeklEQXVNak0zT1RVeklEQXVORGt5TWpjeVF6QXVNakEzTlRNeklEQXVOVE15TURnZ01DNHhPVEV3TWpNZ01DNDFPREEzTnpZZ01DNHhPVEE1TmlBd0xqWXpNRGczT0ZZd0xqWTBPRFl5U0RBdU5EYzJNRGxNTUM0ME56WTNNalFnTUM0Mk9EQXpNRE5hSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVOREkzTmpNMUlEQXVOREkxTURFMVF6QXVOREF6TnpNNElEQXVOREkxTURnMklEQXVNemd3TWpBM0lEQXVOREU1TVRRNUlEQXVNelU1TWpBMElEQXVOREEzTnpRNFF6QXVNek14TXprMElEQXVNemt5TlRjM0lEQXVNekE1TkRJNUlEQXVNelk0TlRjMElEQXVNamsyTnpjM0lEQXVNek01TlRORE1DNHlPRFF4TWpRZ01DNHpNVEEwT0RZZ01DNHlPREUxTURVZ01DNHlOemd3TlRVZ01DNHlPRGt6TXpNZ01DNHlORGN6TlRaRE1DNHlPVGN4TmpJZ01DNHlNVFkyTlRnZ01DNHpNVFE1T1RFZ01DNHhPRGswTkRJZ01DNHpOREF3TURZZ01DNHhOekF3TURSRE1DNHpOalV3TWpFZ01DNHhOVEExTmpZZ01DNHpPVFUzT1RnZ01DNHhOREF3TVRVZ01DNDBNamMwTnpjZ01DNHhOREF3TVRWRE1DNDBOVGt4TlRZZ01DNHhOREF3TVRVZ01DNDBPRGs1TXpNZ01DNHhOVEExTmpZZ01DNDFNVFE1TkRnZ01DNHhOekF3TURSRE1DNDFNems1TmpNZ01DNHhPRGswTkRJZ01DNDFOVGMzT1RNZ01DNHlNVFkyTlRnZ01DNDFOalUyTWpFZ01DNHlORGN6TlRaRE1DNDFOek0wTkRrZ01DNHlOemd3TlRVZ01DNDFOekE0TXlBd0xqTXhNRFE0TmlBd0xqVTFPREUzTnlBd0xqTXpPVFV6UXpBdU5UUTFOVEkxSURBdU16WTROVGMwSURBdU5USXpOVFlnTUM0ek9USTFOemNnTUM0ME9UVTNOU0F3TGpRd056YzBPRll3TGpRd056YzBPRU13TGpRM05EZ3hNaUF3TGpReE9UQXlNaUF3TGpRMU1UUXhOU0F3TGpReU5EazFOQ0F3TGpReU56WXpOU0F3TGpReU5UQXhOVnBOTUM0ME1qYzJNelVnTUM0eE56VTJOekpETUM0ME1ETXlPRGtnTUM0eE56VXlNRFVnTUM0ek56azBPVElnTUM0eE9ESTVNeUF3TGpNMk1EQTJNU0F3TGpFNU56WXdOa013TGpNME1EWXpJREF1TWpFeU1qZ3pJREF1TXpJMk5qa3lJREF1TWpNek1EWXhJREF1TXpJd05EZ3hJREF1TWpVMk5qQTNRekF1TXpFME1qY3hJREF1TWpnd01UVTBJREF1TXpFMk1UUTRJREF1TXpBMU1UQTBJREF1TXpJMU9ERXpJREF1TXpJM05EVTFRekF1TXpNMU5EYzNJREF1TXpRNU9EQTNJREF1TXpVeU16WTVJREF1TXpZNE1qWTFJREF1TXpjek56YzRJREF1TXpjNU9EWTNRekF1TXprd01UUTFJREF1TXpnNE5qUTFJREF1TkRBNE5ESTVJREF1TXprek1qTTRJREF1TkRJM01EQXlJREF1TXprek1qTTRRekF1TkRRMU5UYzBJREF1TXprek1qTTRJREF1TkRZek9EVTRJREF1TXpnNE5qUTFJREF1TkRnd01qSTJJREF1TXpjNU9EWTNRekF1TlRBeE5UTWdNQzR6Tmpnek1USWdNQzQxTVRnek5pQXdMak0wT1RrMk5pQXdMalV5T0RBME1TQXdMak15TnpjME5rTXdMalV6TnpjeU1TQXdMak13TlRVeU5pQXdMalV6T1RZNU5TQXdMakk0TURjd055QXdMalV6TXpZMUlEQXVNalUzTWpNMlF6QXVOVEkzTmpBMUlEQXVNak16TnpZMElEQXVOVEV6T0RnNElEQXVNakV5T1RnM0lEQXVORGswTmpjNElEQXVNVGs0TWpBNVF6QXVORGMxTkRZNUlEQXVNVGd6TkRNZ01DNDBOVEU0TnpFZ01DNHhOelUwT1RjZ01DNDBNamMyTXpVZ01DNHhOelUyTnpKV01DNHhOelUyTnpKYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1Tmpjek5ESTJJREF1T0RZd01EUTRUREF1TlRBME9EZ3pJREF1TnpZeU56Z3lWakF1TlRZNE1Ea3hUREF1Tmpjek5ESTJJREF1TkRjd09ESTFUREF1T0RReE9UWTVJREF1TlRZNE1Ea3hWakF1TnpZeU56Z3lUREF1Tmpjek5ESTJJREF1T0RZd01EUTRXazB3TGpVek5qVTJOQ0F3TGpjME5EUXdOa3d3TGpZM016UXlOaUF3TGpneU16WXhNMHd3TGpneE1ESTRPQ0F3TGpjME5EUXdObFl3TGpVNE5UazVNa3d3TGpZM016UXlOaUF3TGpVd05qYzROVXd3TGpVek5qVTJOQ0F3TGpVNE5UazVNbFl3TGpjME5EUXdObG9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDJOek0xTmpNZ01DNDJPRE0yTnpkTU1DNDFNVEk1TXprZ01DNDFPVEV3TURSTU1DNDFNamczT0NBd0xqVTJNelU1T1V3d0xqWTNNelUyTXlBd0xqWTBOekE0TTB3d0xqZ3hPRE0wTmlBd0xqVTJNelU1T1V3d0xqZ3pOREU0TnlBd0xqVTVNVEF3TkV3d0xqWTNNelUyTXlBd0xqWTRNelkzTjFvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQyT0Rrek9UWWdNQzQyTmpVMU1qZElNQzQyTlRjM01UVldNQzQ0TkRFNE5ESklNQzQyT0Rrek9UWldNQzQyTmpVMU1qZGFJaUJtYVd4c1BTSjNhR2wwWlNJdlBpWWplR0U3UEM5blBpWWplR0U3UEdSbFpuTStKaU40WVRzOGJHbHVaV0Z5UjNKaFpHbGxiblFnYVdROUluQmhhVzUwTUY5c2FXNWxZWElpSUhneFBTSXRNQzR5TURjeE1EY2lJSGt4UFNJeExqSXdOekUxSWlCNE1qMGlNUzR5TURjeE1TSWdlVEk5SWkwd0xqSXdOekEyTnlJZ1ozSmhaR2xsYm5SVmJtbDBjejBpZFhObGNsTndZV05sVDI1VmMyVWlQaVlqZUdFN1BITjBiM0FnYzNSdmNDMWpiMnh2Y2owaUkwTTROVEV4UWlJdlBpWWplR0U3UEhOMGIzQWdiMlptYzJWMFBTSXhJaUJ6ZEc5d0xXTnZiRzl5UFNJalJrWTVPVEF3SWk4K0ppTjRZVHM4TDJ4cGJtVmhja2R5WVdScFpXNTBQaVlqZUdFN1BDOWtaV1p6UGlZamVHRTdQQzl6ZG1jKzt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO3ZlcnRpY2FsQWxpZ249dG9wO2lyLnN5bmNocm9uaXplZD0xOyIgcGFyZW50PSIyIiB2ZXJ0ZXg9IjEiPgogICAgICA8bXhHZW9tZXRyeSB4PSI2MzUiIHk9IjgiIHdpZHRoPSI5MCIgaGVpZ2h0PSI5MCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjExIiB2YWx1ZT0iTGlnaHRzYWlsIC0mZ3Q7IExhbWJkYSBGdW5jdGlvbiIgc3R5bGU9ImlyLnJlZj00NmViYmYxZC1lYTAwLTQzMzktYjNhMC02MGZjZjYyY2VmMGI7ZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtlbmRBcnJvdz1vcGVuO2VuZEZpbGw9MDtlbmRTaXplPTQ7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yOyIgcGFyZW50PSIyIiBzb3VyY2U9IjYiIHRhcmdldD0iNyIgZWRnZT0iMSI+CiAgICAgIDxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iNiIgdmFsdWU9IkxpZ2h0c2FpbCIgc3R5bGU9ImlyLnJlZj1lN2Y0OWRmNi1mMGZkLTRkMjUtODc1NS04NzMzYmYxZmRmNzU7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9Q0QtTElHSFRTQUlMO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHMWhjMnNnYVdROUltMWhjMnN3WHpFeU1EUmZNekk0TWpBaUlITjBlV3hsUFNKdFlYTnJMWFI1Y0dVNllXeHdhR0VpSUcxaGMydFZibWwwY3owaWRYTmxjbE53WVdObFQyNVZjMlVpSUhnOUlqQWlJSGs5SWpBaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlQaVlqZUdFN1BHTnBjbU5zWlNCamVEMGlNQzQxSWlCamVUMGlNQzQxSWlCeVBTSXdMalVpSUdacGJHdzlJbUpzWVdOcklpOCtKaU40WVRzOEwyMWhjMnMrSmlONFlUczhaeUJ0WVhOclBTSjFjbXdvSTIxaGMyc3dYekV5TURSZk16STRNakFwSWo0bUkzaGhPenh3WVhSb0lHUTlJazB4SURCSU1GWXhTREZXTUZvaUlHWnBiR3c5SW5WeWJDZ2pjR0ZwYm5Rd1gyeHBibVZoY2w4eE1qQTBYek15T0RJd0tTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVOVFF3TURJeElEQXVOamcxTlRRelNEQXVOVE0xT0RnNFF6QXVOVE16TXpRZ01DNDJPRFEzTVRnZ01DNDFNekV4SURBdU5qZ3pNVFEwSURBdU5USTVORFU1SURBdU5qZ3hNREk0UXpBdU5USTNPREU0SURBdU5qYzRPVEV4SURBdU5USTJPRFV5SURBdU5qYzJNelE1SURBdU5USTJOamc0SURBdU5qY3pOamMyUXpBdU5URTRNREl5SURBdU5Ua3hOVFF6SURBdU5EZzJOamc1SURBdU5UTXlPRGMySURBdU5ETTVNRGc1SURBdU5URXlOelF6UXpBdU5ETTFPRE00SURBdU5URXhNell5SURBdU5ETXpNalkzSURBdU5UQTROelEySURBdU5ETXhPVFF5SURBdU5UQTFORGN5UXpBdU5ETXdOakU0SURBdU5UQXlNVGszSURBdU5ETXdOalEySURBdU5EazROVE1nTUM0ME16SXdNak1nTUM0ME9UVXlOelpETUM0ME16TXpOek1nTUM0ME9USXdPVFFnTUM0ME16VTVNRGNnTUM0ME9EazFOaUF3TGpRek9UQTRPU0F3TGpRNE9ESXhRekF1TkRnMU56VTFJREF1TkRZM09UUXpJREF1TlRFM05qSXlJREF1TkRBNU1qYzJJREF1TlRJMk5qZzRJREF1TXpJM01ERkRNQzQxTWpZNE9EY2dNQzR6TWpVeU5qWWdNQzQxTWpjME1qY2dNQzR6TWpNMU56a2dNQzQxTWpneU56a2dNQzR6TWpJd05EVkRNQzQxTWpreE16RWdNQzR6TWpBMU1URWdNQzQxTXpBeU56Y2dNQzR6TVRreE5qRWdNQzQxTXpFMk5USWdNQzR6TVRnd056RkRNQzQxTXpNd01qY2dNQzR6TVRZNU9ERWdNQzQxTXpRMk1EUWdNQzR6TVRZeE56TWdNQzQxTXpZeU9USWdNQzR6TVRVMk9UTkRNQzQxTXpjNU56a2dNQzR6TVRVeU1UUWdNQzQxTXprM05EVWdNQzR6TVRVd056SWdNQzQxTkRFME9EZ2dNQzR6TVRVeU56WkRNQzQxTkRRMk5qWWdNQzR6TVRVMk5pQXdMalUwTnpZd01TQXdMak14TnpFM05DQXdMalUwT1RjMU5DQXdMak14T1RVME0wTXdMalUzT1RZeU1TQXdMak0xTWpRM05pQXdMall5T1RjMU15QXdMalF4T1RneElEQXVOakk1TnpVeklEQXVOVEF3TXpRelF6QXVOakk1TnpVeklEQXVOVGcxT1RReklEQXVOVFk0TmpnM0lEQXVOall3TXpReklEQXVOVFE1TnpVMElEQXVOamd4TVRRelF6QXVOVFE0TlRJeklEQXVOamd5TlRBNElEQXVOVFEzTURJeklEQXVOamd6TmpBeklEQXVOVFExTXpRNElEQXVOamcwTXpaRE1DNDFORE0yTnpNZ01DNDJPRFV4TVRjZ01DNDFOREU0TlRrZ01DNDJPRFUxTWlBd0xqVTBNREF5TVNBd0xqWTROVFUwTTFwTk1DNDBOekV5TWpJZ01DNDFNREF6TkRORE1DNDFNRGt6TlRVZ01DNDFNamN3TVNBd0xqVXpOakk0T0NBd0xqVTNOVGd4SURBdU5UUTRNamc0SURBdU5qUXdNRGMyUXpBdU5UY3dOVFUwSURBdU5qRXdNRGMySURBdU5qQXlOVFUwSURBdU5UVTNNREVnTUM0Mk1ESTFOVFFnTUM0MU1EQXpORE5ETUM0Mk1ESTFOVFFnTUM0ME5ETTJOellnTUM0MU56TXpOVFFnTUM0ek9UTTJOellnTUM0MU5EZzBNakVnTUM0ek5qQXpORE5ETUM0MU16WTFOVFVnTUM0ME1qUTJNU0F3TGpVd09UUTRPQ0F3TGpRM016WTNOaUF3TGpRM01USXlNaUF3TGpVd01ETTBNMW9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDBNalkyT0RjZ01DNHpOVFEzTXpaTU1DNDBNakl3TWlBd0xqTTJPRGczVERBdU5EQTRNRElnTUM0ek56TTFNelpNTUM0ME1qSXdNaUF3TGpNM09ESXdNMHd3TGpReU5qWTROeUF3TGpNNU1qTXpOa3d3TGpRek1UTTFNeUF3TGpNM09ESXdNMHd3TGpRME5UUTROeUF3TGpNM016VXpOa3d3TGpRek1UTTFNeUF3TGpNMk9EZzNUREF1TkRJMk5qZzNJREF1TXpVME56TTJXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqUXlOalkzTlNBd0xqUXdPVE00VERBdU5ERTNOelF4SURBdU16Z3lORFEzVERBdU16a3dPREE0SURBdU16Y3pOVEV6VERBdU5ERTNOelF4SURBdU16WTBOVGhNTUM0ME1qWTJOelVnTUM0ek16YzJORFpNTUM0ME16VTJNRGdnTUM0ek5qUTFPRXd3TGpRMk1qVTBNU0F3TGpNM016VXhNMHd3TGpRek5UWXdPQ0F3TGpNNE1qUTBOMHd3TGpReU5qWTNOU0F3TGpRd09UTTRXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqWTJOalk0T0NBd0xqVTFORGt6TWt3d0xqWTJNakF5TWlBd0xqVTJPVEEyTlV3d0xqWTBOemc0T0NBd0xqVTNNemN6TWt3d0xqWTJNakF5TWlBd0xqVTNPRE01T0V3d0xqWTJOalk0T0NBd0xqVTVNalV6TWt3d0xqWTNNVE0xTlNBd0xqVTNPRE01T0V3d0xqWTROVFE0T0NBd0xqVTNNemN6TWt3d0xqWTNNVE0xTlNBd0xqVTJPVEEyTlV3d0xqWTJOalk0T0NBd0xqVTFORGt6TWxvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQyTmpZMk9UTWdNQzQyTURVME56bE1NQzQyTlRnMk9UTWdNQzQxT0RFMk1UTk1NQzQyTXpRNE1qY2dNQzQxTnpNMk1UTk1NQzQyTlRnMk9UTWdNQzQxTmpVMk1UUk1NQzQyTmpZMk9UTWdNQzQxTkRFM05EaE1NQzQyTnpRMk9UTWdNQzQxTmpVMk1UUk1NQzQyT1RnMU5pQXdMalUzTXpZeE0wd3dMalkzTkRZNU15QXdMalU0TVRZeE0wd3dMalkyTmpZNU15QXdMall3TlRRM09Wb2lJR1pwYkd3OUluZG9hWFJsSWk4K0ppTjRZVHM4Y0dGMGFDQmtQU0pOTUM0ME1USTRNak1nTUM0Mk1ERXpNVGhNTUM0ME1EWTFOVFlnTUM0Mk1qQXhNVGRNTUM0ek9EYzNOVFlnTUM0Mk1qWXpPRFJNTUM0ME1EWTFOVFlnTUM0Mk16STFNVGRNTUM0ME1USTRNak1nTUM0Mk5URXpNVFpNTUM0ME1Ua3dPU0F3TGpZek1qVXhOMHd3TGpRek56YzFOaUF3TGpZeU5qTTRORXd3TGpReE9UQTVJREF1TmpJd01URTNUREF1TkRFeU9ESXpJREF1TmpBeE16RTRXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqUXhNek0yT0NBd0xqWTJOemc1TkV3d0xqUXdNamsyT0NBd0xqWXpOalk1TkV3d0xqTTNNVE0yT0NBd0xqWXlOamsyTVV3d0xqUXdNalF6TlNBd0xqWXhOalUyTVV3d0xqUXhNek0yT0NBd0xqVTRORGsyTVV3d0xqUXlNemMyT0NBd0xqWXhOakF5T0V3d0xqUTFORGd6TlNBd0xqWXlOalF5T0V3d0xqUXlNemMyT0NBd0xqWXpOalk1TkV3d0xqUXhNek0yT0NBd0xqWTJOemc1TkZwTk1DNDBNRGt5TXpVZ01DNDJNalk1TmpGTU1DNDBNVEU1TURJZ01DNDJNamMzTmpGTU1DNDBNVEk0TXpVZ01DNDJNekEwTWpoTU1DNDBNVE16TmpnZ01DNDJNalk1TmpGTU1DNDBNVFl3TXpVZ01DNDJNall4TmpGTU1DNDBNVE16TmpnZ01DNDJNalV5TWpoTU1DNDBNVEkxTmpnZ01DNDJNakkxTmpGTU1DNDBNVEUyTXpVZ01DNDJNalV5TWpoTU1DNDBNRGt5TXpVZ01DNDJNalk1TmpGYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TlRBd09ETTBJREF1TnpVME56RXlRekF1TkRReE1UYzFJREF1TnpVME56VTBJREF1TXpnek5ERTFJREF1TnpNek56UWdNQzR6TXpjM016RWdNQzQyT1RVek56TkRNQzR5T1RJd05EWWdNQzQyTlRjd01EWWdNQzR5TmpFek5qY2dNQzQyTURNM05EY2dNQzR5TlRFd09Ua2dNQzQxTkRRNU56bERNQzR5TlRBME9UZ2dNQzQxTkRFME5ETWdNQzR5TlRFek1qWWdNQzQxTXpjNE1USWdNQzR5TlRNME1ESWdNQzQxTXpRNE9EZERNQzR5TlRVME56Y2dNQzQxTXpFNU5qRWdNQzR5TlRnMk15QXdMalV5T1RrNElEQXVNall5TVRZMklEQXVOVEk1TXpjNVF6QXVNalkxTnpBeUlEQXVOVEk0TnpjNElEQXVNalk1TXpNeklEQXVOVEk1TmpBMklEQXVNamN5TWpVNElEQXVOVE14TmpneFF6QXVNamMxTVRnMElEQXVOVE16TnpVM0lEQXVNamMzTVRZMUlEQXVOVE0yT1RBNUlEQXVNamMzTnpZMklEQXVOVFF3TkRRMVF6QXVNamczTnpZeElEQXVOVGsyTVRrMklEQXVNekU0TWpZM0lEQXVOalEyTVRnMUlEQXVNell6TWpjM0lEQXVOamd3TlRZNFF6QXVOREE0TWpnM0lEQXVOekUwT1RVeElEQXVORFkwTlRNNElEQXVOek14TWpNNElEQXVOVEl3T1RVMklEQXVOekkyTWpKRE1DNDFOemN6TnpNZ01DNDNNakV5TURNZ01DNDJNams0TmpnZ01DNDJPVFV5TkRZZ01DNDJOamd4TURRZ01DNDJOVE0wTlRsRE1DNDNNRFl6TXprZ01DNDJNVEUyTnpNZ01DNDNNamMxTkRVZ01DNDFOVGN3T0RVZ01DNDNNamMxTkRVZ01DNDFNREEwTkRaRE1DNDNNamMxTkRVZ01DNDBORE00TURZZ01DNDNNRFl6TXprZ01DNHpPRGt5TVRrZ01DNDJOamd4TURRZ01DNHpORGMwTXpKRE1DNDJNams0TmpnZ01DNHpNRFUyTkRVZ01DNDFOemN6TnpNZ01DNHlOemsyT0RnZ01DNDFNakE1TlRZZ01DNHlOelEyTnpGRE1DNDBOalExTXpnZ01DNHlOamsyTlRNZ01DNDBNRGd5T0RjZ01DNHlPRFU1TkNBd0xqTTJNekkzTnlBd0xqTXlNRE15TTBNd0xqTXhPREkyTnlBd0xqTTFORGN3TmlBd0xqSTROemMyTVNBd0xqUXdORFk1TlNBd0xqSTNOemMyTmlBd0xqUTJNRFEwTmtNd0xqSTNOelExTVNBd0xqUTJNakU1TnlBd0xqSTNOamM1TkNBd0xqUTJNemcyT0NBd0xqSTNOVGd6TXlBd0xqUTJOVE0yTlVNd0xqSTNORGczTWlBd0xqUTJOamcyTWlBd0xqSTNNell5TlNBd0xqUTJPREUxTmlBd0xqSTNNakUyTkNBd0xqUTJPVEUzTVVNd0xqSTJPVEl4TXlBd0xqUTNNVEl5TVNBd0xqSTJOVFUyT1NBd0xqUTNNakF4TmlBd0xqSTJNakF6TXlBd0xqUTNNVE0zT1VNd0xqSTFPRFE1TmlBd0xqUTNNRGMwTWlBd0xqSTFOVE0xT0NBd0xqUTJPRGN5TnlBd0xqSTFNek13T0NBd0xqUTJOVGMzTjBNd0xqSTFNVEkxTnlBd0xqUTJNamd5TmlBd0xqSTFNRFEyTXlBd0xqUTFPVEU0TWlBd0xqSTFNVEE1T1NBd0xqUTFOVFkwTmtNd0xqSTFPVGM0TnlBd0xqUXdPRE14TWlBd0xqSTRNVGMzTnlBd0xqTTJORFF6TXlBd0xqTXhORFE1TmlBd0xqTXlPVEUwTTBNd0xqTTBOekl4TlNBd0xqSTVNemcxTWlBd0xqTTRPVE13T1NBd0xqSTJPRFl4TWlBd0xqUXpOVGcxTWlBd0xqSTFOak0zTkVNd0xqUTRNak01TkNBd0xqSTBOREV6TnlBd0xqVXpNVFEySURBdU1qUTFOREE1SURBdU5UYzNNekExSURBdU1qWXdNRFF6UXpBdU5qSXpNVFV4SURBdU1qYzBOamMySURBdU5qWXpPRGdnTUM0ek1ESXdOalVnTUM0Mk9UUTNNalVnTUM0ek16a3dNRFJETUM0M01qVTFOekVnTUM0ek56VTVORE1nTUM0M05EVXlOVGNnTUM0ME1qQTVNRE1nTUM0M05URTBPQ0F3TGpRMk9EWXlNME13TGpjMU56Y3dNaUF3TGpVeE5qTTBNeUF3TGpjMU1ESXdOQ0F3TGpVMk5EZzBPQ0F3TGpjeU9UZzJNaUF3TGpZd09EUTJNa013TGpjd09UVXlJREF1TmpVeU1EYzFJREF1TmpjM01UYzNJREF1TmpnNE9Ua3lJREF1TmpNMk5qRTNJREF1TnpFME9Ea3pRekF1TlRrMk1EVTNJREF1TnpRd056a3pJREF1TlRRNE9UVTRJREF1TnpVME5qQTFJREF1TlRBd09ETTBJREF1TnpVME56RXlWakF1TnpVME56RXlXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqSXdOalk0TnlBd0xqVXhNelE0TTBnd0xqRTRNREF5UXpBdU1UYzJORGcwSURBdU5URXpORGd6SURBdU1UY3pNRGt6SURBdU5URXlNRGM0SURBdU1UY3dOVGt5SURBdU5UQTVOVGM0UXpBdU1UWTRNRGt5SURBdU5UQTNNRGMzSURBdU1UWTJOamczSURBdU5UQXpOamcySURBdU1UWTJOamczSURBdU5UQXdNVFZETUM0eE5qWTJPRGNnTUM0ME9UWTJNVE1nTUM0eE5qZ3dPVElnTUM0ME9UTXlNaklnTUM0eE56QTFPVElnTUM0ME9UQTNNakpETUM0eE56TXdPVE1nTUM0ME9EZ3lNakVnTUM0eE56WTBPRFFnTUM0ME9EWTRNVFlnTUM0eE9EQXdNaUF3TGpRNE5qZ3hOa2d3TGpJd05qWTROME13TGpJeE1ESXlNeUF3TGpRNE5qZ3hOaUF3TGpJeE16WXhOU0F3TGpRNE9ESXlNU0F3TGpJeE5qRXhOU0F3TGpRNU1EY3lNa013TGpJeE9EWXhOaUF3TGpRNU16SXlNaUF3TGpJeU1EQXlJREF1TkRrMk5qRXpJREF1TWpJd01ESWdNQzQxTURBeE5VTXdMakl5TURBeUlEQXVOVEF6TmpnMklEQXVNakU0TmpFMklEQXVOVEEzTURjM0lEQXVNakUyTVRFMUlEQXVOVEE1TlRjNFF6QXVNakV6TmpFMUlEQXVOVEV5TURjNElEQXVNakV3TWpJeklEQXVOVEV6TkRneklEQXVNakEyTmpnM0lEQXVOVEV6TkRneldpSWdabWxzYkQwaWQyaHBkR1VpTHo0bUkzaGhPenh3WVhSb0lHUTlJazB3TGpJM016TXpOeUF3TGpVeE16UTRNMGd3TGpJME5qWTNNVU13TGpJME16RXpOU0F3TGpVeE16UTRNeUF3TGpJek9UYzBNeUF3TGpVeE1qQTNPQ0F3TGpJek56STBNeUF3TGpVd09UVTNPRU13TGpJek5EYzBNaUF3TGpVd056QTNOeUF3TGpJek16TXpOeUF3TGpVd016WTROaUF3TGpJek16TXpOeUF3TGpVd01ERTFRekF1TWpNek16TTNJREF1TkRrMk5qRXpJREF1TWpNME56UXlJREF1TkRrek1qSXlJREF1TWpNM01qUXpJREF1TkRrd056SXlRekF1TWpNNU56UXpJREF1TkRnNE1qSXhJREF1TWpRek1UTTFJREF1TkRnMk9ERTJJREF1TWpRMk5qY3hJREF1TkRnMk9ERTJTREF1TWpjek16TTNRekF1TWpjMk9EYzBJREF1TkRnMk9ERTJJREF1TWpnd01qWTFJREF1TkRnNE1qSXhJREF1TWpneU56WTJJREF1TkRrd056SXlRekF1TWpnMU1qWTJJREF1TkRrek1qSXlJREF1TWpnMk5qY3hJREF1TkRrMk5qRXpJREF1TWpnMk5qY3hJREF1TlRBd01UVkRNQzR5T0RZMk56RWdNQzQxTURNMk9EWWdNQzR5T0RVeU5qWWdNQzQxTURjd056Y2dNQzR5T0RJM05qWWdNQzQxTURrMU56aERNQzR5T0RBeU5qVWdNQzQxTVRJd056Z2dNQzR5TnpZNE56UWdNQzQxTVRNME9ETWdNQzR5TnpNek16Y2dNQzQxTVRNME9ETmFJaUJtYVd4c1BTSjNhR2wwWlNJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU16UXdNREU0SURBdU5URXpORGd6U0RBdU16RXpNelV5UXpBdU16QTVPREUxSURBdU5URXpORGd6SURBdU16QTJOREkwSURBdU5URXlNRGM0SURBdU16QXpPVEkwSURBdU5UQTVOVGM0UXpBdU16QXhOREl6SURBdU5UQTNNRGMzSURBdU16QXdNREU0SURBdU5UQXpOamcySURBdU16QXdNREU0SURBdU5UQXdNVFZETUM0ek1EQXdNVGdnTUM0ME9UWTJNVE1nTUM0ek1ERTBNak1nTUM0ME9UTXlNaklnTUM0ek1ETTVNalFnTUM0ME9UQTNNakpETUM0ek1EWTBNalFnTUM0ME9EZ3lNakVnTUM0ek1EazRNVFVnTUM0ME9EWTRNVFlnTUM0ek1UTXpOVElnTUM0ME9EWTRNVFpJTUM0ek5EQXdNVGhETUM0ek5ETTFOVFFnTUM0ME9EWTRNVFlnTUM0ek5EWTVORFlnTUM0ME9EZ3lNakVnTUM0ek5EazBORFlnTUM0ME9UQTNNakpETUM0ek5URTVORGNnTUM0ME9UTXlNaklnTUM0ek5UTXpOVElnTUM0ME9UWTJNVE1nTUM0ek5UTXpOVElnTUM0MU1EQXhOVU13TGpNMU16TTFNaUF3TGpVd016WTROaUF3TGpNMU1UazBOeUF3TGpVd056QTNOeUF3TGpNME9UUTBOaUF3TGpVd09UVTNPRU13TGpNME5qazBOaUF3TGpVeE1qQTNPQ0F3TGpNME16VTFOQ0F3TGpVeE16UTRNeUF3TGpNME1EQXhPQ0F3TGpVeE16UTRNMW9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDBNRFkyTmprZ01DNDFNVE0wT0ROSU1DNHpPREF3TURKRE1DNHpOelkwTmpZZ01DNDFNVE0wT0RNZ01DNHpOek13TnpRZ01DNDFNVEl3TnpnZ01DNHpOekExTnpRZ01DNDFNRGsxTnpoRE1DNHpOamd3TnpNZ01DNDFNRGN3TnpjZ01DNHpOalkyTmprZ01DNDFNRE0yT0RZZ01DNHpOalkyTmprZ01DNDFNREF4TlVNd0xqTTJOalkyT1NBd0xqUTVOall4TXlBd0xqTTJPREEzTXlBd0xqUTVNekl5TWlBd0xqTTNNRFUzTkNBd0xqUTVNRGN5TWtNd0xqTTNNekEzTkNBd0xqUTRPREl5TVNBd0xqTTNOalEyTmlBd0xqUTROamd4TmlBd0xqTTRNREF3TWlBd0xqUTROamd4Tmtnd0xqUXdOalkyT1VNd0xqUXhNREl3TlNBd0xqUTROamd4TmlBd0xqUXhNelU1TmlBd0xqUTRPREl5TVNBd0xqUXhOakE1TnlBd0xqUTVNRGN5TWtNd0xqUXhPRFU1TnlBd0xqUTVNekl5TWlBd0xqUXlNREF3TWlBd0xqUTVOall4TXlBd0xqUXlNREF3TWlBd0xqVXdNREUxUXpBdU5ESXdNREF5SURBdU5UQXpOamcySURBdU5ERTROVGszSURBdU5UQTNNRGMzSURBdU5ERTJNRGszSURBdU5UQTVOVGM0UXpBdU5ERXpOVGsySURBdU5URXlNRGM0SURBdU5ERXdNakExSURBdU5URXpORGd6SURBdU5EQTJOalk1SURBdU5URXpORGd6V2lJZ1ptbHNiRDBpZDJocGRHVWlMejRtSTNoaE96d3ZaejRtSTNoaE96eGtaV1p6UGlZamVHRTdQR3hwYm1WaGNrZHlZV1JwWlc1MElHbGtQU0p3WVdsdWREQmZiR2x1WldGeVh6RXlNRFJmTXpJNE1qQWlJSGd4UFNJdE1DNHlNRGN5SWlCNU1UMGlNUzR5TURjeUlpQjRNajBpTVM0eU1EY3dOeUlnZVRJOUlpMHdMakl3TnpBMk55SWdaM0poWkdsbGJuUlZibWwwY3owaWRYTmxjbE53WVdObFQyNVZjMlVpUGlZamVHRTdQSE4wYjNBZ2MzUnZjQzFqYjJ4dmNqMGlJME00TlRFeFFpSXZQaVlqZUdFN1BITjBiM0FnYjJabWMyVjBQU0l4SWlCemRHOXdMV052Ykc5eVBTSWpSa1k1T1RBd0lpOCtKaU40WVRzOEwyeHBibVZoY2tkeVlXUnBaVzUwUGlZamVHRTdQQzlrWldaelBpWWplR0U3UEM5emRtYys7dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTsiIHBhcmVudD0iMiIgdmVydGV4PSIxIj4KICAgICAgPG14R2VvbWV0cnkgeD0iNjciIHk9IjE4NCIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iMTIiIHZhbHVlPSJMYW1iZGEgRnVuY3Rpb24gLSZndDsgUkRTIC0gUmVsYXRpb25hbCBEYXRhYmFzZSBTZXJ2aWNlIiBzdHlsZT0iaXIucmVmPWQ5MDI1MmE3LTA0YTgtNDRkMi1hNGY1LWMxZjI3ODVmYTljMTtlZGdlU3R5bGU9bm9uZTtjdXJ2ZWQ9MTtodG1sPTE7aXIuc3luY2hyb25pemVkPTE7ZW50cnlYPTA7ZW50cnlZPTAuNTtlbnRyeUR4PTA7ZW50cnlEeT0wO3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtlbmRBcnJvdz1vcGVuO2VuZEZpbGw9MDtlbmRTaXplPTQ7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yOyIgcGFyZW50PSIyIiBzb3VyY2U9IjciIHRhcmdldD0iOCIgZWRnZT0iMSI+CiAgICAgIDxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iNyIgdmFsdWU9IkxhbWJkYSBGdW5jdGlvbiIgc3R5bGU9ImlyLnJlZj02YzNmMDE0My02YmFjLTRhODQtOGVlZS02NWUyODZjYWQ1MGQ7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9YXdzLWxhbWJkYS1mdW5jdGlvbjtpbWFnZT1kYXRhOmltYWdlL3N2Zyt4bWwsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlJSFpwWlhkQ2IzZzlJakFnTUNBeElERWlJR1pwYkd3OUltNXZibVVpUGlZamVHRTdQRzFoYzJzZ2FXUTlJbTFoYzJzd0lpQnRZWE5yTFhSNWNHVTlJbUZzY0doaElpQnRZWE5yVlc1cGRITTlJblZ6WlhKVGNHRmpaVTl1VlhObElpQjRQU0l3SWlCNVBTSXdJaUIzYVdSMGFEMGlNU0lnYUdWcFoyaDBQU0l4SWo0bUkzaGhPenhqYVhKamJHVWdZM2c5SWpBdU5TSWdZM2s5SWpBdU5TSWdjajBpTUM0MUlpQm1hV3hzUFNKaWJHRmpheUl2UGlZamVHRTdQQzl0WVhOclBpWWplR0U3UEdjZ2JXRnphejBpZFhKc0tDTnRZWE5yTUNraVBpWWplR0U3UEdjZ1kyeHBjQzF3WVhSb1BTSjFjbXdvSTJOc2FYQXdLU0krSmlONFlUczhjR0YwYUNCa1BTSk5NU0F3U0RCV01VZ3hWakJhSWlCbWFXeHNQU0oxY213b0kzQmhhVzUwTUY5c2FXNWxZWElwSWk4K0ppTjRZVHM4Y0dGMGFDQmtQU0pOTUM0NE1EWTFNVEVnTUM0NE16TXlPVWd3TGpZME1qSTBORU13TGpZek9UY3pNU0F3TGpnek16STRNeUF3TGpZek56STNNU0F3TGpnek1qVTJOaUF3TGpZek5URTBPQ0F3TGpnek1USXlNVU13TGpZek16QXlOU0F3TGpneU9UZzNOeUF3TGpZek1UTXlOU0F3TGpneU56azFPU0F3TGpZek1ESTBOQ0F3TGpneU5UWTVUREF1TXprM09UYzNJREF1TXpNNU9UVTVTREF1TWprNU56RkRNQzR5T1RZeE56UWdNQzR6TXprNU5Ua2dNQzR5T1RJM09ETWdNQzR6TXpnMU5UUWdNQzR5T1RBeU9ESWdNQzR6TXpZd05UTkRNQzR5T0RjM09ESWdNQzR6TXpNMU5UTWdNQzR5T0RZek56Y2dNQzR6TXpBeE5qSWdNQzR5T0RZek56Y2dNQzR6TWpZMk1qVldNQzR4TnprNU5UbERNQzR5T0RZek56Y2dNQzR4TnpZME1qTWdNQzR5T0RjM09ESWdNQzR4TnpNd016SWdNQzR5T1RBeU9ESWdNQzR4TnpBMU16RkRNQzR5T1RJM09ETWdNQzR4Tmpnd016RWdNQzR5T1RZeE56UWdNQzR4TmpZMk1qWWdNQzR5T1RrM01TQXdMakUyTmpZeU5rZ3dMalV3TlRBME5FTXdMalV3TnpVMU55QXdMakUyTmpZek15QXdMalV4TURBeE55QXdMakUyTnpNMUlEQXVOVEV5TVRRZ01DNHhOamcyT1RWRE1DNDFNVFF5TmpRZ01DNHhOekF3TkNBd0xqVXhOVGsyTXlBd0xqRTNNVGsxTnlBd0xqVXhOekEwTkNBd0xqRTNOREl5Tmt3d0xqYzBPREkwTlNBd0xqWTFPVGsxT0Vnd0xqZ3dOalV4TVVNd0xqZ3hNREEwT0NBd0xqWTFPVGsxT0NBd0xqZ3hNelF6T1NBd0xqWTJNVE0yTWlBd0xqZ3hOVGt6T1NBd0xqWTJNemcyTTBNd0xqZ3hPRFEwSURBdU5qWTJNell6SURBdU9ERTVPRFExSURBdU5qWTVOelUxSURBdU9ERTVPRFExSURBdU5qY3pNamt4VmpBdU9ERTVPVFUzUXpBdU9ERTVPRFExSURBdU9ESXpORGt6SURBdU9ERTRORFFnTUM0NE1qWTRPRFVnTUM0NE1UVTVNemtnTUM0NE1qa3pPRFZETUM0NE1UTTBNemtnTUM0NE16RTRPRFlnTUM0NE1UQXdORGdnTUM0NE16TXlPU0F3TGpnd05qVXhNU0F3TGpnek16STVXazB3TGpZMU1EWTBOQ0F3TGpnd05qWXlORWd3TGpjNU16RTNPRll3TGpZNE5qWXlORWd3TGpjek9UZzBOVU13TGpjek56TXpNU0F3TGpZNE5qWXhOeUF3TGpjek5EZzNNU0F3TGpZNE5Ua2dNQzQzTXpJM05EZ2dNQzQyT0RRMU5UVkRNQzQzTXpBMk1qVWdNQzQyT0RNeU1TQXdMamN5T0RreU5TQXdMalk0TVRJNU15QXdMamN5TnpnME5TQXdMalkzT1RBeU5Fd3dMalE1TmpZME5DQXdMakU1TXpJNU0wZ3dMak14TXpFM04xWXdMak14TXpJNU1rZ3dMalF3TmpVeE1VTXdMalF3T1RBeU5DQXdMak14TXpJNU9TQXdMalF4TVRRNE5DQXdMak14TkRBeE5pQXdMalF4TXpZd055QXdMak14TlRNMk1VTXdMalF4TlRjeklEQXVNekUyTnpBMklEQXVOREUzTkRNZ01DNHpNVGcyTWpNZ01DNDBNVGcxTVRFZ01DNHpNakE0T1RKTU1DNDJOVEEyTkRRZ01DNDRNRFkyTWpSYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TXpZMk1qUTVJREF1T0RNek16WTRTREF1TVRreU9URTJRekF1TVRrd05qVWdNQzQ0TXpNek56TWdNQzR4T0RnME1pQXdMamd6TWpnZ01DNHhPRFkwTXpjZ01DNDRNekUzTURORE1DNHhPRFEwTlRRZ01DNDRNekEyTURjZ01DNHhPREkzT0RNZ01DNDRNamt3TWpNZ01DNHhPREUxT0RJZ01DNDRNamN4TURGRE1DNHhPREF6TURrZ01DNDRNalV4TXpRZ01DNHhOemsxTnpjZ01DNDRNakk0TmpVZ01DNHhOemswTmlBd0xqZ3lNRFV5TkVNd0xqRTNPVE0wTXlBd0xqZ3hPREU0TXlBd0xqRTNPVGcwTlNBd0xqZ3hOVGcxTXlBd0xqRTRNRGt4TmlBd0xqZ3hNemMyT0V3d0xqTTJNakkwT1NBd0xqUXpORGsyT0VNd0xqTTJNek16SURBdU5ETXlOams1SURBdU16WTFNREk1SURBdU5ETXdOemd5SURBdU16WTNNVFV6SURBdU5ESTVORE0zUXpBdU16WTVNamMySURBdU5ESTRNRGt6SURBdU16Y3hOek0ySURBdU5ESTNNemMxSURBdU16YzBNalE1SURBdU5ESTNNelk0VmpBdU5ESTNNelk0UXpBdU16YzJOelE0SURBdU5ESTNNell6SURBdU16YzVNVGs0SURBdU5ESTRNRFl4SURBdU16Z3hNeklnTUM0ME1qa3pPREZETUM0ek9ETTBOREVnTUM0ME16QTNNREVnTUM0ek9EVXhORGtnTUM0ME16STFPVEVnTUM0ek9EWXlORGtnTUM0ME16UTRNelZNTUM0ME56TXdORGtnTUM0Mk1UTXpOamhETUM0ME56TTVNak1nTUM0Mk1UVXhOemNnTUM0ME56UXpOellnTUM0Mk1UY3hOaUF3TGpRM05ETTNOaUF3TGpZeE9URTJPRU13TGpRM05ETTNOaUF3TGpZeU1URTNOeUF3TGpRM016a3lNeUF3TGpZeU16RTJJREF1TkRjek1EUTVJREF1TmpJME9UWTRUREF1TXpjNE16Z3lJREF1T0RJME9UWTRRekF1TXpjM05ERXhJREF1T0RJM05EQTNJREF1TXpjMU56UXlJREF1T0RJNU5UQTJJREF1TXpjek5UZzBJREF1T0RNeFF6QXVNemN4TkRJMUlEQXVPRE15TkRrMElEQXVNelk0T0RjMElEQXVPRE16TXpFNElEQXVNelkyTWpRNUlEQXVPRE16TXpZNFdrMHdMakl4TkRJME9TQXdMamd3Tmpjd01rZ3dMak0xTnpnME9Vd3dMalEwTmpJME9TQXdMall5TURBek5Vd3dMak0zTkRNNE1pQXdMalEzTVRNMk9Fd3dMakl4TkRJME9TQXdMamd3Tmpjd01sb2lJR1pwYkd3OUluZG9hWFJsSWk4K0ppTjRZVHM4TDJjK0ppTjRZVHM4TDJjK0ppTjRZVHM4WkdWbWN6NG1JM2hoT3p4c2FXNWxZWEpIY21Ga2FXVnVkQ0JwWkQwaWNHRnBiblF3WDJ4cGJtVmhjaUlnZURFOUlpMHdMakl3TnpJaUlIa3hQU0l4TGpJd056SWlJSGd5UFNJeExqSXdOekEzSWlCNU1qMGlMVEF1TWpBM01EWTNJaUJuY21Ga2FXVnVkRlZ1YVhSelBTSjFjMlZ5VTNCaFkyVlBibFZ6WlNJK0ppTjRZVHM4YzNSdmNDQnpkRzl3TFdOdmJHOXlQU0lqUXpnMU1URkNJaTgrSmlONFlUczhjM1J2Y0NCdlptWnpaWFE5SWpFaUlITjBiM0F0WTI5c2IzSTlJaU5HUmprNU1EQWlMejRtSTNoaE96d3ZiR2x1WldGeVIzSmhaR2xsYm5RK0ppTjRZVHM4WTJ4cGNGQmhkR2dnYVdROUltTnNhWEF3SWo0bUkzaGhPenh5WldOMElIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlJR1pwYkd3OUluZG9hWFJsSWk4K0ppTjRZVHM4TDJOc2FYQlFZWFJvUGlZamVHRTdQQzlrWldaelBpWWplR0U3UEM5emRtYys7dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTsiIHBhcmVudD0iMiIgdmVydGV4PSIxIj4KICAgICAgPG14R2VvbWV0cnkgeD0iMjk3IiB5PSIxODQiIHdpZHRoPSI5MCIgaGVpZ2h0PSI5MCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjgiIHZhbHVlPSJSRFMgLSBSZWxhdGlvbmFsIERhdGFiYXNlIFNlcnZpY2UiIHN0eWxlPSJpci5yZWY9YTIyOWNmMWQtMTkzMi00MDA4LTgxMjktMGYzZmFkYmNhZjBhO3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWNlbnRlcjtpbWFnZUFsaWduPWNlbnRlcjtpbWFnZVdpZHRoPTgyO2ltYWdlSGVpZ2h0PTgyO2FyY1NpemU9OTA7YWJzb2x1dGVBcmNTaXplPTE7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDtmb250U2l6ZT0xMjtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9Q09NUE9ORU5UO2lyLmNvbXBvbmVudERlZmluaXRpb24ucmVmPXJkcztpbWFnZT1kYXRhOmltYWdlL3N2Zyt4bWwsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlJSFpwWlhkQ2IzZzlJakFnTUNBeElERWlJR1pwYkd3OUltNXZibVVpUGlZamVHRTdQRzFoYzJzZ2FXUTlJbTFoYzJzd0lpQnRZWE5yTFhSNWNHVTlJbUZzY0doaElpQnRZWE5yVlc1cGRITTlJblZ6WlhKVGNHRmpaVTl1VlhObElpQjRQU0l3SWlCNVBTSXdJaUIzYVdSMGFEMGlNU0lnYUdWcFoyaDBQU0l4SWo0bUkzaGhPenhqYVhKamJHVWdZM2c5SWpBdU5TSWdZM2s5SWpBdU5TSWdjajBpTUM0MUlpQm1hV3hzUFNKaWJHRmpheUl2UGlZamVHRTdQQzl0WVhOclBpWWplR0U3UEdjZ2JXRnphejBpZFhKc0tDTnRZWE5yTUNraVBpWWplR0U3UEdjZ1kyeHBjQzF3WVhSb1BTSjFjbXdvSTJOc2FYQXdLU0krSmlONFlUczhjR0YwYUNCa1BTSk5NU0F3U0RCV01VZ3hWakJhSWlCbWFXeHNQU0oxY213b0kzQmhhVzUwTUY5c2FXNWxZWElwSWk4K0ppTjRZVHM4Y0dGMGFDQmtQU0pOTUM0Mk5EWXdNRE1nTUM0ek56WTBOemxETUM0Mk5EWXdNRE1nTUM0ek16YzRNVE1nTUM0MU56QXhNemNnTUM0ek1UazVORFlnTUM0ME9Ua3pNemNnTUM0ek1UazVORFpETUM0ME1qZzFNemNnTUM0ek1UazVORFlnTUM0ek5USTJOeUF3TGpNek56Z3hNeUF3TGpNMU1qWTNJREF1TXpjMk5EYzVRekF1TXpVeU5qRXlJREF1TXpjNE5ERXpJREF1TXpVeU9ETTNJREF1TXpnd016UTBJREF1TXpVek16TTNJREF1TXpneU1qRXpWakF1TmpJeU9EYzVRekF1TXpVeU5qY2dNQzQyTmpJNE56a2dNQzQwTWpnMk55QXdMalkzT1RrME5TQXdMalV3TURBd015QXdMalkzT1RrME5VTXdMalUzTVRNek55QXdMalkzT1RrME5TQXdMalkwTmpZM0lEQXVOall5TXpRMUlEQXVOalEyTmpjZ01DNDJNak0yTnpsV01DNHpOelkwTnpsSU1DNDJORFl3TUROYVRUQXVORGs1TmpBeklEQXVNelEyTnpRMlF6QXVOVGMzTXpNM0lEQXVNelEyTnpRMklEQXVOakU1TmpBeklEQXVNelkzT1RRMklEQXVOakU1TmpBeklEQXVNemMyTmpFelF6QXVOakU1TmpBeklEQXVNemcxTWpjNUlEQXVOVGMzTmpBeklEQXVOREEyTkRjNUlEQXVORGs1TmpBeklEQXVOREEyTkRjNVF6QXVOREl4TmpBeklEQXVOREEyTkRjNUlEQXVNemM1TmpBeklEQXVNemcxTkRFeklEQXVNemM1TmpBeklEQXVNemMyTmpFelF6QXVNemM1TmpBeklEQXVNelkzT0RFeklEQXVOREl4T0RjZ01DNHpORFkzTkRZZ01DNDBPVGsyTURNZ01DNHpORFkzTkRaYVRUQXVOakU1TmpBeklEQXVOakl6T0RFeVF6QXVOakU1TmpBeklEQXVOak15TXpRMUlEQXVOVGMzTkRjZ01DNDJOVE0wTVRJZ01DNDBPVGsyTURNZ01DNDJOVE0wTVRKRE1DNDBNakUzTXpjZ01DNDJOVE0wTVRJZ01DNHpOemsyTURNZ01DNDJNekl6TkRVZ01DNHpOemsyTURNZ01DNDJNak00TVRKV01DNDFPREUyTnpsRE1DNDBNRGMzTXpjZ01DNDFPVGN3TVRJZ01DNDBOVFE1TXpjZ01DNDJNRFF6TkRVZ01DNDBPVGsyTURNZ01DNDJNRFF6TkRWRE1DNDFORFF5TnlBd0xqWXdORE0wTlNBd0xqVTVNVEEzSURBdU5UazNNVFExSURBdU5qRTVOakF6SURBdU5UZ3lNRGM1VmpBdU5qSXpPREV5V2swd0xqWXhPVFl3TXlBd0xqVTBOemswTmtNd0xqWXhPVFl3TXlBd0xqVTFOalEzT1NBd0xqVTNOell3TXlBd0xqVTNOemd4TWlBd0xqUTVPVFl3TXlBd0xqVTNOemd4TWtNd0xqUXlNVFl3TXlBd0xqVTNOemd4TWlBd0xqTTNPVFl3TXlBd0xqVTFOalEzT1NBd0xqTTNPVFl3TXlBd0xqVTBOemswTmtnd0xqTTRNREF3TTFZd0xqUTVOekF4TWtNd0xqUXdPREV6TnlBd0xqVXhNakl4TWlBd0xqUTFOVE16TnlBd0xqVXhPVFUwTmlBd0xqVXdNREF3TXlBd0xqVXhPVFUwTmtNd0xqVTBORFkzSURBdU5URTVOVFEySURBdU5Ua3hORGNnTUM0MU1USXpORFlnTUM0Mk1qQXdNRE1nTUM0ME9UY3lOemxNTUM0Mk1UazJNRE1nTUM0MU5EYzVORFphVFRBdU5qRTVOakF6SURBdU5EWXpNREV6UXpBdU5qRTVOakF6SURBdU5EY3hOamM1SURBdU5UYzNOakF6SURBdU5Ea3pNREV5SURBdU5EazVOakF6SURBdU5Ea3pNREV5UXpBdU5ESXhOakF6SURBdU5Ea3pNREV5SURBdU16YzVOakF6SURBdU5EY3hOamM1SURBdU16YzVOakF6SURBdU5EWXpNREV6U0RBdU16Z3dNREF6VmpBdU5ERXhNREV6UXpBdU5EQTROREF6SURBdU5ESTJNRGM1SURBdU5EVTFNRGNnTUM0ME16TXdNVE1nTUM0MU1EQXdNRE1nTUM0ME16TXdNVE5ETUM0MU5EUTVNemNnTUM0ME16TXdNVE1nTUM0MU9USXhNemNnTUM0ME1qVTRNVE1nTUM0Mk1qQXdNRE1nTUM0ME1UQTBOemxNTUM0Mk1UazJNRE1nTUM0ME5qTXdNVE5hSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVNakV5TURreklEQXVPREEyT0Vnd0xqSTVPVGsxT1ZZd0xqZ3pNelEyTmtnd0xqRTNPVGsxT1VNd0xqRTNOalF5TXlBd0xqZ3pNelEyTmlBd0xqRTNNekF6TWlBd0xqZ3pNakEyTVNBd0xqRTNNRFV6TVNBd0xqZ3lPVFUyTVVNd0xqRTJPREF6TVNBd0xqZ3lOekEyTVNBd0xqRTJOall5TmlBd0xqZ3lNelkyT1NBd0xqRTJOall5TmlBd0xqZ3lNREV6TTFZd0xqY3dNREV6TTBnd0xqRTVNekk1TTFZd0xqYzROemN6TTB3d0xqSTVNekk1TXlBd0xqWTROemcyTmt3d0xqTXhNVGsxT1NBd0xqY3dOalkyTmt3d0xqSXhNakE1TXlBd0xqZ3dOamhhSWlCbWFXeHNQU0ozYUdsMFpTSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVPRE16TXpNeElEQXVOekF3TVRNeFZqQXVPREl3TVRNeFF6QXVPRE16TXpNeElEQXVPREl6TmpZM0lEQXVPRE14T1RJMklEQXVPREkzTURVNUlEQXVPREk1TkRJMklEQXVPREk1TlRVNVF6QXVPREkyT1RJMUlEQXVPRE15TURZZ01DNDRNak0xTXpRZ01DNDRNek0wTmpRZ01DNDRNVGs1T1RnZ01DNDRNek0wTmpSSU1DNDJPVGs1T1RoV01DNDRNRFkzT1RoSU1DNDNPRGM0TmpSTU1DNDJPRGt6TXpFZ01DNDNNRGM1T1RoTU1DNDNNRGd4TXpFZ01DNDJPRGt6TXpGTU1DNDRNRFkyTmpRZ01DNDNPRGMzTXpGV01DNDNNREF4TXpGSU1DNDRNek16TXpGYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1T0RNek16TXhJREF1TVRnd01qQTBWakF1TXpBd01qQTBTREF1T0RBMk5qWTBWakF1TWpFeU1qQTBUREF1TnpBNE1UTXhJREF1TXpFd056TTRUREF1TmpnNU16TXhJREF1TWpreE9UTTRUREF1TnpnM056TXhJREF1TVRrek5UTTNTREF1TmprNU9UazRWakF1TVRZMk9EZElNQzQ0TVRrNU9UaERNQzQ0TWpNMU16UWdNQzR4TmpZNE55QXdMamd5TmpreU5TQXdMakUyT0RJM05TQXdMamd5T1RReU5pQXdMakUzTURjM05VTXdMamd6TVRreU5pQXdMakUzTXpJM05pQXdMamd6TXpNek1TQXdMakUzTmpZMk55QXdMamd6TXpNek1TQXdMakU0TURJd05Gb2lJR1pwYkd3OUluZG9hWFJsSWk4K0ppTjRZVHM4Y0dGMGFDQmtQU0pOTUM0ek1URTVOVGtnTUM0eU9UTXpNRFJNTUM0eU9UTXlPVE1nTUM0ek1URTVOekZNTUM0eE9UTXlPVE1nTUM0eU1USXhNRFJXTUM0eU9UazRNemRJTUM0eE5qWTJNalpXTUM0eE56azRNemRETUM0eE5qWTJNallnTUM0eE56WXpNREVnTUM0eE5qZ3dNekVnTUM0eE56STVNU0F3TGpFM01EVXpNU0F3TGpFM01EUXdPVU13TGpFM016QXpNaUF3TGpFMk56a3dPU0F3TGpFM05qUXlNeUF3TGpFMk5qVXdOQ0F3TGpFM09UazFPU0F3TGpFMk5qVXdORWd3TGpJNU9UazFPVll3TGpFNU16RTNNVWd3TGpJeE1qQTVNMHd3TGpNeE1UazFPU0F3TGpJNU16TXdORm9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNHlPVFUwT1RFZ01DNDJNVGsxTURORE1DNHlNVFF3TWpVZ01DNDFPVEF4TnlBd0xqRTJOek0xT0NBd0xqVTBOVE0yT1NBd0xqRTJOek0xT0NBd0xqUTVOamN3TWtNd0xqRTJOek0xT0NBd0xqUTBPREF6TlNBd0xqSXhOREF5TlNBd0xqUXdNek0yT0NBd0xqSTVOVFE1TVNBd0xqTTNNemt3TVV3d0xqTXdORFUxTnlBd0xqTTVPRGsyT0VNd0xqSXpOVE0xT0NBd0xqUXlNemt3TWlBd0xqRTVOREF5TlNBd0xqUTJNRFF6TlNBd0xqRTVOREF5TlNBd0xqUTVOamN3TWtNd0xqRTVOREF5TlNBd0xqVXpNamsyT1NBd0xqSXpOVE0xT0NBd0xqVTJPVFV3TXlBd0xqTXdORFUxTnlBd0xqVTVORFF6TjB3d0xqSTVOVFE1TVNBd0xqWXhPVFV3TTFvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQyT1RjeE16SWdNQzQyTWpJME5Fd3dMalk0T0RVNU9TQXdMalU1TnpFd04wTXdMamMyTWpVNU9TQXdMalUzTWpFM015QXdMamd3Tmpjek1pQXdMalV6TkRVM015QXdMamd3Tmpjek1pQXdMalE1Tmpjd05rTXdMamd3Tmpjek1pQXdMalExT0Rnek9TQXdMamMyTWpVNU9TQXdMalF5TVRJek9TQXdMalk0T0RVNU9TQXdMak01TmpFM01rd3dMalk1TnpFek1pQXdMak0zTURrM01rTXdMamM0TXpZMk5TQXdMalF3TURBek9TQXdMamd6TXpNNU9TQXdMalEwTmpFM01pQXdMamd6TXpNNU9TQXdMalE1Tmpjd05rTXdMamd6TXpNNU9TQXdMalUwTnpJMElEQXVOemd6TmpZMUlEQXVOVGt6TVRBM0lEQXVOamszTVRNeUlEQXVOakl5TkRSYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQQzluUGlZamVHRTdQQzluUGlZamVHRTdQR1JsWm5NK0ppTjRZVHM4YkdsdVpXRnlSM0poWkdsbGJuUWdhV1E5SW5CaGFXNTBNRjlzYVc1bFlYSWlJSGd4UFNJdE1DNHlNRGN3TmpjaUlIa3hQU0l4TGpJd056QTNJaUI0TWowaU1TNHlNRGN5SWlCNU1qMGlMVEF1TWpBM01pSWdaM0poWkdsbGJuUlZibWwwY3owaWRYTmxjbE53WVdObFQyNVZjMlVpUGlZamVHRTdQSE4wYjNBZ2MzUnZjQzFqYjJ4dmNqMGlJekpGTWpkQlJDSXZQaVlqZUdFN1BITjBiM0FnYjJabWMyVjBQU0l4SWlCemRHOXdMV052Ykc5eVBTSWpOVEkzUmtaR0lpOCtKaU40WVRzOEwyeHBibVZoY2tkeVlXUnBaVzUwUGlZamVHRTdQR05zYVhCUVlYUm9JR2xrUFNKamJHbHdNQ0krSmlONFlUczhjbVZqZENCM2FXUjBhRDBpTVNJZ2FHVnBaMmgwUFNJeElpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQQzlqYkdsd1VHRjBhRDRtSTNoaE96d3ZaR1ZtY3o0bUkzaGhPend2YzNablBnPT07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTsiIHBhcmVudD0iMiIgdmVydGV4PSIxIj4KICAgICAgPG14R2VvbWV0cnkgeD0iNTI3IiB5PSIxODQiIHdpZHRoPSI5MCIgaGVpZ2h0PSI5MCIgYXM9Imdlb21ldHJ5Ii8+CiAgICA8L214Q2VsbD4KICAgIDxteENlbGwgaWQ9IjMiIHZhbHVlPSJJbnRlcm5ldCIgc3R5bGU9ImlyLnJlZj1mMGJhNzcyMi0zOWI2LTRjODEtODI5MC1hMzBhMjQ4YmI4ZDk7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtyZWN1cnNpdmVSZXNpemU9MDtodG1sPTE7dmVydGljYWxBbGlnbj10b3A7YWxpZ249bGVmdDtkYXNoZWQ9MTtzdHJva2VXaWR0aD0xO2FyY1NpemU9MzthYnNvbHV0ZUFyY1NpemU9MTtzcGFjaW5nVG9wPTE7c3BhY2luZ0xlZnQ9MzI7c3Ryb2tlQ29sb3I9Izc1NzVFQjtmaWxsQ29sb3I9I0YwRjBGRjtmaWxsT3BhY2l0eT0zMDtmb250Q29sb3I9IzU2NTFFMDtjb25uZWN0YWJsZT0wO2NvbnRhaW5lcj0xO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1UUlVTVFpPTkU7IiBwYXJlbnQ9IjEiIHZlcnRleD0iMSI+CiAgICAgIDxteEdlb21ldHJ5IHg9Ii01MDUiIHk9IjEwOCIgd2lkdGg9IjIzMCIgaGVpZ2h0PSIxODAiIGFzPSJnZW9tZXRyeSIvPgogICAgPC9teENlbGw+CiAgICA8bXhDZWxsIGlkPSI5IiB2YWx1ZT0iV2ViIENsaWVudCIgc3R5bGU9ImlyLnJlZj0xODgwM2JhOC0yMGJiLTRkNmYtODA3Ni01YmZhNDdmNmJmNGE7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9d2ViLWNsaWVudDtpbWFnZT1kYXRhOmltYWdlL3N2Zyt4bWwsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlJSFpwWlhkQ2IzZzlJakFnTUNBeElERWlJR1pwYkd3OUltNXZibVVpUGlZamVHRTdQSE4wZVd4bFBpWWplR0U3SUNBZ0lDNXBZMjl1TFdacGJHd2dleVlqZUdFN0lDQWdJQ0FnSUNCbWFXeHNPaUFqTVRGQk9FTkdPeVlqZUdFN0lDQWdJSDBtSTNoaE96d3ZjM1I1YkdVK0ppTjRZVHM4WnlCamJHbHdMWEJoZEdnOUluVnliQ2dqWTJ4cGNEQXBJajRtSTNoaE96eHdZWFJvSUdROUlrMHdMalkxTURNNU9DQXdMalk1TkRJNU1rTXdMalkwTmprM05pQXdMalk1TkRNNU9DQXdMalkwTXpVME1TQXdMalk1TkRRMU1pQXdMalkwTURBNU15QXdMalk1TkRRMU1rTXdMall6TmpZME5pQXdMalk1TkRRMU1pQXdMall6TXpJeE1TQXdMalk1TkRNNU9DQXdMall5T1RjNE9TQXdMalk1TkRJNU1rZ3dMakkxTmpBNU0wTXdMakl5TXpRMk5pQXdMalk1TkRJNU1pQXdMakU1TnpBeE5pQXdMalkyTnpnMU9DQXdMakU1TnpBeE5pQXdMall6TlRJMU1WWXdMakk0TVRFMk4wTXdMakU1TnpBeE5pQXdMakkwT0RVMklEQXVNakl6TkRZMklEQXVNakl5TVRJM0lEQXVNalUyTURreklEQXVNakl5TVRJM1NEQXVNelV3TlRrNVF6QXVNell4TkRBMElEQXVNakF4TURBeklEQXVNemMwTkRVMklEQXVNVGd4TWpFNElEQXVNemc1TkRNNUlEQXVNVFl6TURnMlNEQXVNalUyTURrelF6QXVNVGt3T0RNNUlEQXVNVFl6TURnMklEQXVNVE0zT1RNNUlEQXVNakUxT1RVeklEQXVNVE0zT1RNNUlEQXVNamd4TVRZM1ZqQXVOak0xTWpVeFF6QXVNVE0zT1RNNUlEQXVOekF3TkRZMklEQXVNVGt3T0RNNUlEQXVOelV6TXpNeUlEQXVNalUyTURreklEQXVOelV6TXpNeVNEQXVNemMwTlRRelZqQXVPREV6TURBMFREQXVNamcxT1RnMUlEQXVPREV6TURBMVF6QXVNalk1TmpjeElEQXVPREV6TURBMUlEQXVNalUyTkRRM0lEQXVPREkyTWpJeUlEQXVNalUyTkRRM0lEQXVPRFF5TlRJMlF6QXVNalUyTkRRM0lEQXVPRFU0T0RJNUlEQXVNalk1TmpjeUlEQXVPRGN5TURRMklEQXVNamcxT1RnMklEQXVPRGN5TURRMlREQXVOams1TWprMklEQXVPRGN5TURRelF6QXVOekUxTmpFZ01DNDROekl3TkRJZ01DNDNNamc0TXpRZ01DNDROVGc0TWpZZ01DNDNNamc0TXpRZ01DNDROREkxTWpKRE1DNDNNamc0TXpRZ01DNDRNall5TVRnZ01DNDNNVFUyTURrZ01DNDRNVE13TURJZ01DNDJPVGt5T1RVZ01DNDRNVE13TURKTU1DNDJNVEEzTWpnZ01DNDRNVE13TUROV01DNDNOVE16TXpKSU1DNDNNamczTURsRE1DNDNPVE01TmpNZ01DNDNOVE16TXpJZ01DNDRORFk0TmpJZ01DNDNNREEwTmpZZ01DNDRORFk0TmpJZ01DNDJNelV5TlRGV01DNDJNakF5TWpoRE1DNDRNalk0TlRjZ01DNDJNelkzTXprZ01DNDRNRFE0TkRFZ01DNDJOVEE1TURNZ01DNDNPREV5TXpZZ01DNDJOakl5T1RoRE1DNDNOekUwTVRrZ01DNDJPREV6SURBdU56VXhOVGd5SURBdU5qazBNamt5SURBdU56STROekE1SURBdU5qazBNamt5U0RBdU5qVXdNems0V2swd0xqVTFNVFkxTVNBd0xqZ3hNekF3TTB3d0xqUXpNell5SURBdU9ERXpNREEwVmpBdU56VXpNek15U0RBdU5UVXhOalV4VmpBdU9ERXpNREF6V2lJZ1kyeGhjM005SW1samIyNHRabWxzYkNJdlBpWWplR0U3UEhCaGRHZ2dabWxzYkMxeWRXeGxQU0psZG1WdWIyUmtJaUJqYkdsd0xYSjFiR1U5SW1WMlpXNXZaR1FpSUdROUlrMHdMall5T1RBeU1TQXdMalkwTXpJNU5rTXdMamMzTlRJME5pQXdMalkwTXpJNU5pQXdMamc1TXpjNE5DQXdMalV5TkRjMU55QXdMamc1TXpjNE5DQXdMak0zT0RVek1rTXdMamc1TXpjNE5DQXdMakl6TWpNd09DQXdMamMzTlRJME5pQXdMakV4TXpjM0lEQXVOakk1TURJeElEQXVNVEV6TnpkRE1DNDBPREkzT1RZZ01DNHhNVE0zTnlBd0xqTTJOREkxT0NBd0xqSXpNak13T0NBd0xqTTJOREkxT0NBd0xqTTNPRFV6TWtNd0xqTTJOREkxT0NBd0xqVXlORGMxTnlBd0xqUTRNamM1TmlBd0xqWTBNekk1TmlBd0xqWXlPVEF5TVNBd0xqWTBNekk1TmxwTk1DNDNPRFUwTlRZZ01DNHpOemcxTVRaRE1DNDNPRFUwTlRZZ01DNDBOalE1TWpFZ01DNDNNVFUwTVNBd0xqVXpORGsyTmlBd0xqWXlPVEF3TlNBd0xqVXpORGsyTmtNd0xqVTBNall3TVNBd0xqVXpORGsyTmlBd0xqUTNNalUxTlNBd0xqUTJORGt5TVNBd0xqUTNNalUxTlNBd0xqTTNPRFV4TmtNd0xqUTNNalUxTlNBd0xqSTVNakV4TVNBd0xqVTBNall3TVNBd0xqSXlNakEyTmlBd0xqWXlPVEF3TlNBd0xqSXlNakEyTmtNd0xqY3hOVFF4SURBdU1qSXlNRFkySURBdU56ZzFORFUySURBdU1qa3lNVEV4SURBdU56ZzFORFUySURBdU16YzROVEUyV2swd0xqWTJOakkzTVNBd0xqSTRNRFEzTkVNd0xqWTFORFV4T0NBd0xqSTFOVEF4SURBdU5qUXdOVE0xSURBdU1qUTBOREUySURBdU5qSTVNREExSURBdU1qUTBOREUyUXpBdU5qRTNORGMySURBdU1qUTBOREUySURBdU5qQXpORGt6SURBdU1qVTFNREVnTUM0MU9URTNOQ0F3TGpJNE1EUTNORU13TGpVNE56VTJOQ0F3TGpJNE9UVXlNeUF3TGpVNE16a3pOU0F3TGpJNU9UazFNeUF3TGpVNE1UQXhPQ0F3TGpNeE1UUTJOa2d3TGpZM05qazVNa013TGpZM05EQTNOaUF3TGpJNU9UazFNeUF3TGpZM01EUTBOaUF3TGpJNE9UVXlNeUF3TGpZMk5qSTNNU0F3TGpJNE1EUTNORnBOTUM0MU5UZ3dNamtnTUM0ek1URTBOalpETUM0MU5qRTBORE1nTUM0eU9UWTFOelFnTUM0MU5qVTVOemtnTUM0eU9ESTVOVGNnTUM0MU56RTBORGNnTUM0eU56RXhNRGhETUM0MU56UXpPREVnTUM0eU5qUTNOVFFnTUM0MU56YzNJREF1TWpVNE5qZzFJREF1TlRneE16a2dNQzR5TlRNeE1UWkRNQzQxTlRJek9EY2dNQzR5TmpReE16UWdNQzQxTWpneE9UZ2dNQzR5T0RRNU1qVWdNQzQxTVRJNE5EWWdNQzR6TVRFME5qWklNQzQxTlRnd01qbGFUVEF1TlRVd056Z3hJREF1TXpjNE5URTJRekF1TlRVd056Z3hJREF1TXpZek1ESTVJREF1TlRVeE9EWXpJREF1TXpRNE1ERTBJREF1TlRVek9EazJJREF1TXpNek9ERTJTREF1TlRBeU5UTTFRekF1TkRrM05UazFJREF1TXpRM056azNJREF1TkRrME9UQTFJREF1TXpZeU9EUXpJREF1TkRrME9UQTFJREF1TXpjNE5URTJRekF1TkRrME9UQTFJREF1TXprME1Ua2dNQzQwT1RjMU9UVWdNQzQwTURreU16VWdNQzQxTURJMU16VWdNQzQwTWpNeU1UWklNQzQxTlRNNE9UWkRNQzQxTlRFNE5qTWdNQzQwTURrd01Ua2dNQzQxTlRBM09ERWdNQzR6T1RRd01EUWdNQzQxTlRBM09ERWdNQzR6TnpnMU1UWmFUVEF1TlRjeE5EUTNJREF1TkRnMU9USTBRekF1TlRZMU9UYzVJREF1TkRjME1EYzJJREF1TlRZeE5EUXpJREF1TkRZd05EVTVJREF1TlRVNE1ESTVJREF1TkRRMU5UWTNTREF1TlRFeU9EUTJRekF1TlRJNE1UazRJREF1TkRjeU1UQTRJREF1TlRVeU16ZzNJREF1TkRreU9EazRJREF1TlRneE16a2dNQzQxTURNNU1UZERNQzQxTnpjM0lEQXVORGs0TXpRNElEQXVOVGMwTXpneElEQXVORGt5TWpjNUlEQXVOVGN4TkRRM0lEQXVORGcxT1RJMFdrMHdMalkyTmpJM01TQXdMalEzTmpVMU9VTXdMalkzTURRME5pQXdMalEyTnpVeElEQXVOamMwTURjMklEQXVORFUzTURnZ01DNDJOelk1T1RJZ01DNDBORFUxTmpkSU1DNDFPREV3TVRoRE1DNDFPRE01TXpVZ01DNDBOVGN3T0NBd0xqVTROelUyTkNBd0xqUTJOelV4SURBdU5Ua3hOelFnTUM0ME56WTFOVGxETUM0Mk1ETTBPVE1nTUM0MU1ESXdNaklnTUM0Mk1UYzBOellnTUM0MU1USTJNVGNnTUM0Mk1qa3dNRFVnTUM0MU1USTJNVGRETUM0Mk5EQTFNelVnTUM0MU1USTJNVGNnTUM0Mk5UUTFNVGdnTUM0MU1ESXdNaklnTUM0Mk5qWXlOekVnTUM0ME56WTFOVGxhVFRBdU5UY3pNVE1nTUM0ek56ZzFNVFpETUM0MU56TXhNeUF3TGpNNU5ESXpPQ0F3TGpVM05ETXlOQ0F3TGpRd09USTJPQ0F3TGpVM05qUTVNaUF3TGpReU16SXhOa2d3TGpZNE1UVXhPVU13TGpZNE16WTROeUF3TGpRd09USTJPQ0F3TGpZNE5EZzRNU0F3TGpNNU5ESXpPQ0F3TGpZNE5EZzRNU0F3TGpNM09EVXhOa013TGpZNE5EZzRNU0F3TGpNMk1qYzVOU0F3TGpZNE16WTROeUF3TGpNME56YzJOU0F3TGpZNE1UVXhPU0F3TGpNek16Z3hOa2d3TGpVM05qUTVNa013TGpVM05ETXlOQ0F3TGpNME56YzJOU0F3TGpVM016RXpJREF1TXpZeU56azFJREF1TlRjek1UTWdNQzR6TnpnMU1UWmFUVEF1TnpRMU1UWTFJREF1TkRRMU5UWTNTREF1TmprNU9UZ3lRekF1TmprMk5UWTRJREF1TkRZd05EVTVJREF1TmpreU1ETXlJREF1TkRjME1EYzJJREF1TmpnMk5UWXpJREF1TkRnMU9USTBRekF1Tmpnek5qTWdNQzQwT1RJeU56a2dNQzQyT0RBek1UTWdNQzQwT1Rnek5EZ2dNQzQyTnpZMk1qSWdNQzQxTURNNU1UZERNQzQzTURVMk1qUWdNQzQwT1RJNE9UZ2dNQzQzTWprNE1UTWdNQzQwTnpJeE1EZ2dNQzQzTkRVeE5qVWdNQzQwTkRVMU5qZGFUVEF1TnpBME1URTFJREF1TkRJek1qRTJTREF1TnpVMU5EYzJRekF1TnpZd05ERTJJREF1TkRBNU1qTTFJREF1TnpZek1UQTFJREF1TXprME1Ua2dNQzQzTmpNeE1EVWdNQzR6TnpnMU1UWkRNQzQzTmpNeE1EVWdNQzR6TmpJNE5ETWdNQzQzTmpBME1UWWdNQzR6TkRjM09UY2dNQzQzTlRVME56WWdNQzR6TXpNNE1UWklNQzQzTURReE1UVkRNQzQzTURZeE5EZ2dNQzR6TkRnd01UUWdNQzQzTURjeU16SWdNQzR6TmpNd01qa2dNQzQzTURjeU16SWdNQzR6TnpnMU1UWkRNQzQzTURjeU16SWdNQzR6T1RRd01EUWdNQzQzTURZeE5EZ2dNQzQwTURrd01Ua2dNQzQzTURReE1UVWdNQzQwTWpNeU1UWmFUVEF1TnpRMU1UWTFJREF1TXpFeE5EWTJRekF1TnpJNU9ERXpJREF1TWpnME9USTFJREF1TnpBMU5qSTBJREF1TWpZME1UTTBJREF1TmpjMk5qSXlJREF1TWpVek1URTJRekF1Tmpnd016RXpJREF1TWpVNE5qZzFJREF1Tmpnek5qTWdNQzR5TmpRM05UUWdNQzQyT0RZMU5qTWdNQzR5TnpFeE1EaERNQzQyT1RJd016SWdNQzR5T0RJNU5UY2dNQzQyT1RZMU5qZ2dNQzR5T1RZMU56UWdNQzQyT1RrNU9ESWdNQzR6TVRFME5qWklNQzQzTkRVeE5qVmFJaUJqYkdGemN6MGlhV052YmkxbWFXeHNJaTgrSmlONFlUczhMMmMrSmlONFlUczhaR1ZtY3o0bUkzaGhPenhqYkdsd1VHRjBhQ0JwWkQwaVkyeHBjREFpUGlZamVHRTdQSEpsWTNRZ2QybGtkR2c5SWpBdU9UZzBOakUxSWlCb1pXbG5hSFE5SWpBdU9UZzBOakUxSWlCbWFXeHNQU0ozYUdsMFpTSWdkSEpoYm5ObWIzSnRQU0owY21GdWMyeGhkR1VvTUNBd0xqQXhOVE00TURrcElpOCtKaU40WVRzOEwyTnNhWEJRWVhSb1BpWWplR0U3UEM5a1pXWnpQaVlqZUdFN1BDOXpkbWMrO3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207dmVydGljYWxBbGlnbj10b3A7aXIuc3luY2hyb25pemVkPTE7IiBwYXJlbnQ9IjMiIHZlcnRleD0iMSI+CiAgICAgIDxteEdlb21ldHJ5IHg9IjcwIiB5PSI0NSIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iMTAiIHZhbHVlPSJXZWIgQ2xpZW50IC0mZ3Q7IExpZ2h0c2FpbCIgc3R5bGU9ImlyLnJlZj0wOTBhZGEzYS0zYTBmLTRlZjEtOTlmYS00ZmE4ZjkxOTc4ZTA7ZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtlbmRBcnJvdz1vcGVuO2VuZEZpbGw9MDtlbmRTaXplPTQ7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yOyIgcGFyZW50PSIxIiBzb3VyY2U9IjkiIHRhcmdldD0iNiIgZWRnZT0iMSI+CiAgICAgIDxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiPgogICAgICAgIDxBcnJheSBhcz0icG9pbnRzIj4KICAgICAgICAgIDxteFBvaW50IHg9Ii0xOTYiIHk9IjE1NSIvPgogICAgICAgIDwvQXJyYXk+CiAgICAgIDwvbXhHZW9tZXRyeT4KICAgIDwvbXhDZWxsPgogICAgPG14Q2VsbCBpZD0iMTMiIHN0eWxlPSJlZGdlU3R5bGU9bm9uZTtjdXJ2ZWQ9MTtodG1sPTE7aXIuc3luY2hyb25pemVkPTA7c291cmNlUGVyaW1ldGVyU3BhY2luZz05O2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7IiBwYXJlbnQ9IjEiIHNvdXJjZT0iNiIgZWRnZT0iMSI+CiAgICAgIDxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiPgogICAgICAgIDxBcnJheSBhcz0icG9pbnRzIj4KICAgICAgICAgIDxteFBvaW50IHg9Ii0yMDMiIHk9IjIzNSIvPgogICAgICAgIDwvQXJyYXk+CiAgICAgICAgPG14UG9pbnQgeD0iLTM0MyIgeT0iMTk4IiBhcz0idGFyZ2V0UG9pbnQiLz4KICAgICAgPC9teEdlb21ldHJ5PgogICAgPC9teENlbGw+CiAgPC9yb290Pgo8L214R3JhcGhNb2RlbD4K</schema>
  </diagram>
  <trustZones>
    <trustZone ref="public-cloud" uuid="b61d6911-338d-46a8-9f39-8dcd24abfe91" name="Public Cloud" desc="Public cloud services" trustRating="60"/>
    <trustZone ref="internet" uuid="f0ba7722-39b6-4c81-8290-a30a248bb8d9" name="Internet" desc="Untrusted Internet public zone" trustRating="1"/>
  </trustZones>
  <questions/>
  <assets/>
  <settings/>
  <dataflows>
    <dataflow name="Web Client -&gt; Lightsail" ref="090ada3a-3a0f-4ef1-99fa-4fa8f91978e0" source="70182474-b645-4d70-b549-49de806df894" target="c8ac594f-3e3e-4127-b194-83a55d17d4b4">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Lightsail -&gt; Lambda Function" ref="46ebbf1d-ea00-4339-b3a0-60fcf62cef0b" source="c8ac594f-3e3e-4127-b194-83a55d17d4b4" target="0fa9a18c-d40a-4122-a2bd-4f71817ea7ab">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Lambda Function -&gt; RDS - Relational Database Service" ref="d90252a7-04a8-44d2-a4f5-c1f2785fa9c1" source="0fa9a18c-d40a-4122-a2bd-4f71817ea7ab" target="e15202ae-5f02-40da-9421-ea54a583b7e6">
      <assets/>
      <tags/>
    </dataflow>
  </dataflows>
  <customFields/>
  <components>
    <component uuid="10ba5bd6-4bf1-43b8-a8fd-910ef934b1ad" diagramComponentId="ac0ef4f5-dfeb-4924-be44-76801b214a6a" ref="b5a33f58-bc4e-429a-aff3-70e7051c1885" name="AWS Account Environment" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="amazon-web-services-environment">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-Logging-3.3" name="Audit logs are accesible" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The audit logs are not encrypted and they can be accessed by attackers and obtain sensitive data
                        in clear text.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.5" name="Brute force attempts on the Amazon management console cannot be detected" state="0" impact="100" issueId="" issueLink="">
          <desc>The failure connection attempts (brute force) must be audited and monitored and the
                        correspondent personnel must be alerted and informed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.12" name="Changes in the network configuration cannot be detected" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The changes in the network configurations (NACLs, route and gateway tables) are not detected
                        because the monitorization and alerts of the network configuration are not configured to detect
                        these changes.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.4" name="Changes in the security configurations can be not detected" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Monitoring and alerting for security configurations are not configured and changes cannot be
                        detected.&amp;nbsp;
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.10" name="Changes in the security groups cannot be detected" state="0" impact="100" issueId="" issueLink="">
          <desc>The changes in the security groups must be audited and monitored and the correspondent
                        personnel must approve these changes. If the situation is not the correct, attackers can access
                        to security systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="cloudwatch-misconfig" name="Cloudwatch is misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-25T13:52:40.866">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-07-28T01:29:25.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.3" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Login to the console without using the Multi-factor Authentication (MFA) and they are not
                        detected. The connection without the MFA must be audited and monitored, the correct security
                        group must be informed and they must validate this connection.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="LOST-SECURITY-ALERTS" name="Misconfigured Security contact details" state="0" impact="100" issueId="" issueLink="">
          <desc>The security contact details for the Azure subscription are not properly configured.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Access &amp;quot;Azure Security Center&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the &amp;quot;Recommendations&amp;quot; tab choose &amp;quot;Provide security
                            contact details&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that all fields are filled.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-24T15:56:01.547">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-07-28T01:29:25.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-04-06T06:35:45.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.1" name="Non-auditable API calls in all regions" state="0" impact="100" issueId="" issueLink="">
          <desc>The API call to the resources is not audited and the actions are not recorded into the logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.4" name="Non-auditable actions in the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The actions in the resources are not audited and not recorded in the logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.8" name="Non-centrality audit logs" state="0" impact="100" issueId="" issueLink="">
          <desc>The audit logs are not stored in a central system. Therefore, the audit logs cannot be
                        exploited correctly by the security personnel.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="LOST-ACCESS-ROOT-01" name="The Root Account is mis-configured" state="0" impact="100" issueId="" issueLink="">
          <desc>The administrator account is not configured. The security question to recover or reset the
                        password and the authentication method are not configured.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-09-13T08:49:31.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-05-14T07:17:58.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-1.21" name="The access keys are generated when the setup of the users is started" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The system doesn't require additional steps to create access keys, the access keys are
                        generating when the process to create an user is starting. The problem is that these keys can be
                        in use somewhere in the organization and maybe these keys are not necessary for the user.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.8" name="The access to the routing tables are not restricted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Being highly selective in peering routing tables is a very effective way of minimizing the
                        impact of breach as resources outside of these routes are inaccessible to the peered VPC.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EXPIRATION-DATE" name="The password expiration is not established" state="0" impact="100" issueId="" issueLink="">
          <desc>The password expiration is not configured and users are not obliged to change their passwords.
                        Not change frequently the passwords gives facilities to attackers to obtain them.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.9" name="The security policies are exposed in the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The security policies are not configured and the security configurations are exposed for the
                        attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.7" name="Unaudited connections with the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The connections with the applications and with the databases cannot be audited and not
                        detected.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.9" name="Unaudited resources changes" state="0" impact="100" issueId="" issueLink="">
          <desc>The changes in the applications and in the databases and these changes are not detected and
                        not audited.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards>
            <standard ref="1.22" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.12" name="Apply an AWS Managed Config Rule for EIPs attached to EC2 instances within VPC" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records configuration changes to these resources. You can evaluate these configurations and changes for compliance with ideal configurations as defined by AWS Config Rules. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create locally a json file (similar with the below sample) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Description": "Checks whether all EIP addresses allocated to a VPC are attached to 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    EC2 instances or in-use ENIs.", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "ConfigRuleName": "eip-attached", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Source": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Owner": "AWS", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "SourceIdentifier": "EIP_ATTACHED" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    }, 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Scope": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "ComplianceResourceTypes": [ 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "AWS::EC2::EIP" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    ] 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    } 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    } 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe config rules" url="https://docs.aws.amazon.com/cli/latest/reference/configservice/describe-config-rules.html"/>
            <reference name="Put config rule" url="https://docs.aws.amazon.com/cli/latest/reference/configservice/put-config-rule.html"/>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Search for a Config Rule that checks whether all EIP addresses allocated to a VPC are attached to EC2 instances or in-use ENIs:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'EIP_ATTACHED']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T16:48:26.094">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.3-2.4" name="Apply an IAM Role for Amazon EC2 Tier" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  An IAM role is similar to a user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Also, a role does not have any credentials (password or access keys) associated with it. Instead, if a user is assigned to a role, access keys are created dynamically and provided to the user.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use roles to delegate access to users, applications, or services that don't normally have access to your AWS resources. Applications must sign their API requests with AWS credentials. Therefore, if you are an application developer, you need a strategy for managing credentials for your applications that run on EC2 instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  IAM Roles for EC2 allow application running within an EC2 instance assume the role applied to the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If doesn't exist, create an instance profile for Web tier instances:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   aws iam create-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If doesn't exist, create an IAM role for the instance profile:&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Create a trust relationship policy document and save it locally as /tmp/TrustPolicy.json:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      { 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Version": "2012-10-17", 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Statement": [ 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Effect": "Allow", 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Principal": { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        "Service": "ec2.amazonaws.com" 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       }, 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Action": "sts:AssumeRole" 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      ] 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      } 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Create the IAM role using the above trust policy:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam create-role --role-name &amp;lt;web_tier_iam_role&amp;gt; --assume-role-policydocument file:///tmp/TrustPolicy.json 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Add the IAM role created to the Instance profile:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam add-role-to-instance-profile --role-name &amp;lt;web_tier_iam_role&amp;gt; --instanceprofile-name &amp;lt;web_tier_instance_profile&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Add role to instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/add-role-to-instance-profile.html"/>
            <reference name="Create instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-instance-profile.html"/>
            <reference name="Create role" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-role.html"/>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Get instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-instance-profile.html"/>
          </references>
          <standards>
            <standard ref="2.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all the Web tier EC2 instances, check if and which IAM instance profile they have attached, and note the name of the instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-instances --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Reservations[*].Instances[*].{IamInstanceProfile:IamInstanceProfile, InstanceId:InstanceId}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the IAM role name used by the Web tier instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; --query "InstanceProfile.Roles[*].RoleName" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T13:47:29.298">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.1-2.2" name="Apply IAM Policy for EC2 IAM Roles for tier" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  By default, IAM users, groups, and roles have no access to AWS resources. IAM policies are the means by which privileges are granted to users, groups, or roles defined with AWS Identity Access Management. An IAM policy is a document that formally states one or more permissions using the following structure:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Actions: what actions are allowed (each AWS service has its own set of actions)&lt;/li&gt; 
  &lt;li&gt;Resources: which resources will be affected by the action&lt;/li&gt; 
  &lt;li&gt;Effect: what effect will be when the subject (user/group/roles) requests access Policies are documents that are created using JSON. A policy consists of one or more statements, each of which describes one set of permissions.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;b&gt;Remediation&lt;/b&gt;: 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    Using the Amazon unified command line interface: 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If doesn't exist, create an instance profile for Web tier instances:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam create-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If doesn't exist, create an IAM role for the instance profile:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Create a trust relationship policy document and save it locally as /tmp/TrustPolicy.json:&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      { 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Version": "2012-10-17", 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Statement": [ 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Effect": "Allow", 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Principal": { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        "Service": "ec2.amazonaws.com" 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       }, 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Action": "sts:AssumeRole" 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      ] 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Create the IAM role using the above trust policy:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       aws iam create-role --role-name &amp;lt;web_tier_iam_role&amp;gt; --assume-role-policydocument file:///tmp/TrustPolicy.json 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Add the IAM role created to the Instance profile:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam add-role-to-instance-profile --role-name &amp;lt;web_tier_iam_role&amp;gt; --instanceprofile-name &amp;lt;web_tier_instance_profile&amp;gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If doesn't exist, create an IAM managed policy for Web tier instances, and note the policy ARN:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam create-policy --policy-name &amp;lt;iam_policy_name&amp;gt; --policy-document file://policy 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Attach the IAM policy created to the Web tier IAM role:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam attach-role-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; --rolename &amp;lt;web_tier_iam_role&amp;gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Add role to instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/add-role-to-instance-profile.html"/>
            <reference name="Attach role policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html"/>
            <reference name="Create instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-instance-profile.html"/>
            <reference name="Create policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-policy.html"/>
            <reference name="Create role" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-role.html"/>
            <reference name="Get instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-instance-profile.html"/>
            <reference name="Get policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-policy.html"/>
            <reference name="Get policy version" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-policy-version.html"/>
            <reference name="List attached role policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-attached-role-policies.html"/>
          </references>
          <standards>
            <standard ref="2.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the IAM role name used by the Web tier instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; --query "InstanceProfile.Roles[*].RoleName" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check managed policies attached to the IAM role, and note the policies ARN:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-attached-role-policies --role-name &amp;lt;web_tier_iam_role&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the version of the IAM policies attached to the IAM role:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; --query "Policy.DefaultVersionId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the document policy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-policy-version --policy-arn &amp;lt;iam_policy_arn&amp;gt; --version-id &amp;lt;iam_policy_version&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T13:34:12.746">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.3" name="Apply IAM roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications that run on an Amazon EC2/S3 instance need credentials in order to access other AWS services. To provide credentials to the application in a secure way, use IAM roles. A role is an entity that has its own set of permissions, but that isn't a user or group. Roles also don't have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2/S3, IAM dynamically provides temporary credentials to the EC2/S3 instance, and these credentials are automatically rotated for you. 
&lt;br /&gt; 
&lt;br /&gt;When you launch an EC2/S3 instance, you can specify a role for the instance as a launch parameter. Applications that run on the EC2/S3 instance can use the role's credentials when they access AWS resources. The role's permissions determine what the application is allowed to do. It is recommended that all EC2/S3 instances are launched with a role, even if the role has no permissions (as they can be added later if desired). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt; 
  &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Complete the wizard until step 3 at which point ensure an IAM role is selected for the &amp;quot;IAM role&amp;quot; option (note the role must already exist).&lt;/li&gt; 
  &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt; 
 &lt;/ol&gt;NB: You cannot add a role to an instance that has been launched without one. In these cases create an AMI from an existing instance and launch a new instance, assigning an IAM role as detailed above. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.18" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has an &amp;quot;IAM Role&amp;quot;
                            assigned (if a hyphen &amp;quot;-&amp;quot; is shown then your instance has no role
                            assigned).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.8" name="Apply RBAC with pre-defined policies added into groups or roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Instead of defining permissions for individual IAM users, it's usually more convenient to create groups that relate to job functions (administrators, developers, accounting, etc.), define the relevant permissions for each group, and then assign IAM users to those groups. All the users in an IAM group inherit the permissions assigned to the group. That way, you can make changes for everyone in a group in just one place. As people move around in your company, you can simply change what IAM group their IAM user belongs to. This method is know as Role Based Access Control (RBAC). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;Remove privilege granted directly to a user: 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Click on Users.&lt;/li&gt; 
  &lt;li&gt;For each user complete the following:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Select the user.&lt;/li&gt; 
   &lt;li&gt;Click on the Permissions tab.&lt;/li&gt; 
   &lt;li&gt;Expand &amp;quot;Managed Policies&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Click &amp;quot;Detach Policy&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Expand &amp;quot;Inline Policies&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Click &amp;quot;Remove Policy&amp;quot;.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ol&gt;Create a Group and add a user: 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Select Groups and click Create New Group.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Group Name box, type the name of the group and click Next Step.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the list of policies, select the check box for each policy that you want to apply to all members of the group. Click Next Step.&lt;/li&gt; 
  &lt;li&gt;Click Create Group.&lt;/li&gt; 
  &lt;li&gt;Click the new Group and select the &amp;quot;Users&amp;quot; tab.&lt;/li&gt; 
  &lt;li&gt;Click &amp;quot;Add Users to Group&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Select the users and click &amp;quot;Add Users&amp;quot;.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.15" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain a list of IAM users by: aws iam list-users --query 'Users[*].UserName'
                            --output text&lt;/li&gt;
                            &lt;li&gt;Run the following to determine if they have policies directly attached:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws iam list-attached-user-policies --user-name user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws iam list-user-policies --user-name user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.10" name="Apply setting MFA for sensitive API calls" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>To the extent that it is practical consider enforcing MFA access for sensitive API calls. For example, you can require that a user has authenticated with an MFA device in order to be allowed to terminate an Amazon EC2 instance. This ensures that such high level changes to your AWS environment are protected with an extra layer of security thus helping to prevent accidental or malicious damage. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;The following is an example of how to create a policy that enforces MFA to terminate EC2 instances: 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Select "Policies".&lt;/li&gt; 
  &lt;li&gt;Select "Create Policy".&lt;/li&gt; 
  &lt;li&gt;Select "Create your own policy".&lt;/li&gt; 
  &lt;li&gt;Provide a policy name and description.&lt;/li&gt; 
  &lt;li&gt;In the policy document add the following:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;i&gt; {&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Version": "2012-10-17",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Statement": [{&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Effect": "Allow",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Action": [&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "ec2:StopInstances",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "ec2:TerminateInstances"&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; ],&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Resource": ["*"],&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Condition": {"Bool": {"aws:MultiFactorAuthPresent": "true"}}&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; }]&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt;}&lt;/i&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click "Create policy".&lt;/li&gt; 
  &lt;li&gt;The policy may now be added to a group by following the outlines in "Use RBAC with pre-defined policies added into groups or roles".&lt;/li&gt; 
 &lt;/ul&gt; &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configuring MFA-Protected API Access" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_configure-api-require.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that MFA is forced on a policy:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                            &lt;li&gt;Go to IAM Service on the AWS Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Policies&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;In the filter select &amp;quot;Customer Managed Policies&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select the policy to check.&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line: &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:MultiFactorAuthPresent&amp;quot;: &amp;quot;true&amp;quot;}}&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.5" name="Avoid API keys for root account" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>You use an access key (an access key ID and secret access key) to make programmatic requests to AWS. However, do not use your AWS account (root) access key. The access key for your AWS account gives full access to all your resources for all AWS services, including your billing information. You cannot restrict the permissions associated with your AWS account access key.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console as Root.&lt;/li&gt; 
  &lt;li&gt;Click on Account Name at the top left and select Security Credentials.&lt;/li&gt; 
  &lt;li&gt;On the pop up screen Click on Continue to Security Credentials.&lt;/li&gt; 
  &lt;li&gt;Click on Access Keys.&lt;/li&gt; 
  &lt;li&gt;Under the Status column if there are any Keys which are "Active".&lt;/li&gt; 
  &lt;li&gt;Click on "Make Inactive" and click "Delete".&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;Run the following command: aws iam get-credential-report --query 'Content'
                            --output text | base64 -D | egrep &amp;quot;root|access&amp;quot; | awk -F, '{print
                            $1,$9,$14}'&lt;/li&gt;
                            &lt;li&gt;For the &amp;lt;root_account&amp;gt; user ensure access_key_1_active and
                            access_key_2_active are false.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.3" name="Avoid publishing CloudTrail logs publicly" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Since cloudtrail logs capture all API calls for the AWS account they should be stored in an S3 bucket that is not accessible to the public. Applying the correct bucket policy helps ensure the confidentiality of the data. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with s3 update privileges).&lt;/li&gt; 
  &lt;li&gt;Select s3 from the services list.&lt;/li&gt; 
  &lt;li&gt;Right-click on the bucket you have used for "cloudtrail" and click "Properties".&lt;/li&gt; 
  &lt;li&gt;In the Properties pane, click the Permissions tab.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select the row that grants permission to "Everyone" or "Any Authenticated User".&lt;/li&gt; 
  &lt;li&gt;Uncheck all the permissions granted to Everyone or Any Authenticated User.&lt;/li&gt; 
  &lt;li&gt;Click Save to save the ACL.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If the Edit bucket policy button is present, click it.&lt;/li&gt; 
  &lt;li&gt;Remove any Statement having an Effect set to Allow and a Principal set to *.&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain the bucket name of the cloudtrail:&amp;nbsp;aws cloudtrail describe-trails
                            --query 'trailList[*].S3BucketName'&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;AllUsers&amp;quot; is not granted access to the bucket:&amp;nbsp;aws
                            s3api get-bucket-acl --bucket &amp;lt;bucket_name&amp;gt; --query
                            'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers`]'&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;Authenticated Users&amp;quot; is not granted access to the
                            bucket: aws s3api get-bucket-acl --bucket &amp;lt;bucket_name&amp;gt; --query
                            'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/Authenticated Users`]'&lt;/li&gt;
                            &lt;li&gt;Validate the bucket policy does not grant access to all:&amp;nbsp;aws s3api
                            get-bucket-policy --bucket &amp;lt;bucket_name&amp;gt;&lt;/li&gt;
                            &lt;li&gt;Check that the above command does not provide a principal of *, with EFFECT set to
                            ALLOW.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.5-2.6" name="Configure AutoScaling Group Launch Configuration for Tier to use a customer created IAM Role" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;An IAM role is similar to a user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Also, a role does not have any credentials (password or access keys) associated with it. Instead, if a user is assigned to a role, access keys are created dynamically and provided to the user.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use roles to delegate access to users, applications, or services that don't normally have access to your AWS resources. Applications must sign their API requests with AWS credentials. Therefore, if you are an application developer, you need a strategy for managing credentials for your applications that run on EC2 instances.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  IAM Roles for EC2 allow application running within an EC2 instance assume the role applied to the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  *Note: references to Web tier are also applicable to App tier. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration for the Web tier using the Web tier IAM instance profile :&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Get instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-instance-profile.html"/>
          </references>
          <standards>
            <standard ref="2.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if your Web tier autoscaling group is using a launch configuration with an IAM instance profile configured:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query "LaunchConfigurations[*].IamInstanceProfile" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the IAM role name used by the Web tier instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; --query "InstanceProfile.Roles[*].RoleName" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T13:55:23.427">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM1" name="Configure contact email and telephone details on AWS accounts" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organization.&lt;/p&gt;&lt;p&gt;An AWS account supports a number of contact details, and AWS will use these to contact the account owner if activity judged to be in breach of Acceptable Use Policy or indicative of likely security compromise is observed by the AWS Abuse team. Contact details should not be for a single individual, as circumstances may arise where that individual is unavailable. Email contact details should point to a mail alias which forwards email to multiple individuals within the organization; where feasible, phone contact details should point to a PABX hunt group or other call-forwarding system.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;If an AWS account is observed to be behaving in a prohibited or suspicious manner, AWS will attempt to contact the account owner by email and phone using the contact details listed. If this is unsuccessful and the account behavior needs urgent mitigation, proactive measures may be taken, including throttling of traffic between the account exhibiting suspicious behavior and the AWS API endpoints and the Internet. This will result in impaired service to and from the account in question, so it is in both the customers' and AWS' best interests that prompt contact can be established. This is best achieved by setting AWS account contact details to point to resources which have multiple individuals as recipients, such as email aliases and PABX hunt groups.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:*Billing ).&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.&lt;/li&gt;&lt;li&gt;On the navigation bar, choose your account name, and then choose My Account.&lt;/li&gt;&lt;li&gt;On the Account Settings page, next to Account Settings, choose Edit.&lt;/li&gt;&lt;li&gt;Next to the field that you need to update, choose Edit.&lt;/li&gt;&lt;li&gt;After you have entered your changes, choose Save changes.&lt;/li&gt;&lt;li&gt;After you have made your changes, choose Done.&lt;/li&gt;&lt;li&gt;To edit your contact information, under Contact Information, choose Edit.&lt;/li&gt;&lt;li&gt;For the fields that you want to change, type your updated information, and then choose Update.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:*Billing )&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.&lt;/li&gt;&lt;li&gt;On the navigation bar, choose your account name, and then choose My Account.&lt;/li&gt;&lt;li&gt;On the Account Settings page, review and verify the current details.&lt;/li&gt;&lt;li&gt;Under Contact Information, review and verify the current details.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T11:37:48.946">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.11" name="Configure password expiration" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Change access keys regularly, and make sure that all IAM users in your account do as well. That way, if an access key is compromised without your knowledge, you limit how long the credentials can be used to access your resources. Credential reports can be used to determine how long access keys have been active for. 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Click on Users.&lt;/li&gt; 
  &lt;li&gt;Select the user you wish to rotate the key for.&lt;/li&gt; 
  &lt;li&gt;Under access keys click &amp;quot;Create Access Key&amp;quot; (do not touch the existing key yet).&lt;/li&gt; 
  &lt;li&gt;Click &amp;quot;Download credentials&amp;quot; or &amp;quot;Show credentials&amp;quot; so that you have a record of them.&lt;/li&gt; 
  &lt;li&gt;Update any applications with the new credentials and test (we recommend to leave a few days or a week for testing).&lt;/li&gt; 
  &lt;li&gt;Once complete complete 1-4 above and for the key which needs rotating click &amp;quot;Make Inactive | Delete&amp;quot; and click &amp;quot;Deactive&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Once you are confident you will no longer need the key (wait several more days) repeat 1-4 and select &amp;quot;Delete&amp;quot; for the inactive key.&lt;/li&gt; 
 &lt;/ol&gt; 
  &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;Check the access keys created time: aws iam get-credential-report --query
                            'Content' --output text | base64 -D | awk -F, '{print $1,$9,$10,$14,$15}'&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each access_key_1_active and access_key_9_active that is set to True ensure
                            the created date is within the last 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Gov-1.1" name="Configure the security challenge questions within the AWS Account" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When an AWS account is initially created it is configured with a top level account known as the &amp;quot;root&amp;quot; account that has full administration access to all resources. In the event that the password or MFA device associated with this account is lost AWS support may recover it by asking you to answer the security questions. 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt; 
  &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Scroll down to &amp;quot;Configure Security Challenge Questions&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Click on Edit.&lt;/li&gt; 
  &lt;li&gt;For each question:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Select an appropriate question.&lt;/li&gt; 
   &lt;li&gt;Enter an appropriate answer.&lt;/li&gt; 
   &lt;li&gt;Follow the above process for all 3 questions.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Click Update when complete.&lt;/li&gt; 
  &lt;li&gt;We recommend to store the questions and answers in a secure location such as a safe where they can be used in case recovery is required.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt;
                            &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Scroll down to &amp;quot;Configure Security Challenge Questions&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Confirm whether questions and answers have been saved.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.7" name="Create a Cloudwatch Alarm and its action for the &quot;VPC Flow Logs&quot; metric filter" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;div&gt;
   A Cloudwatch alarm watches a single metric over a time period you specify, and performs one or more actions based on the value of the metric relative to a given threshold over a number of time periods. The action is a notification sent to an Amazon SNS topic.&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   The Cloudwatch Alarm will trigger a notification being sent to the administrators every time the "REJECT packets" specified threshold is reached. The alarm should be created for the "VPC Flow Logs" metric, and the action should have a SNS topic configured.&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a Cloudwatch alarm for the VPC Flow Logs metric, and configure an Alarm Action:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws cloudwatch put-metric-alarm --alarm-name &amp;lt;vpc_flow_log_alarm_name&amp;gt; --alarm-actions &amp;lt;sns_topic_arn&amp;gt; --metric-name &amp;lt;vpc_flow_log_metric_name&amp;gt; --namespace LogMetrics --statistic &amp;lt;desired_statistic&amp;gt; --period &amp;lt;desired_period&amp;gt; --evaluation-periods &amp;lt;desired_evaluation_periods&amp;gt; --threshold &amp;lt;desired_threshold&amp;gt; --comparison-operator &amp;lt;desired_operator&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe alarms" url="https://docs.aws.amazon.com/cli/latest/reference/cloudwatch/describe-alarms.html"/>
            <reference name="Put metric alarm" url="https://docs.aws.amazon.com/cli/latest/reference/cloudwatch/put-metric-alarm.html"/>
          </references>
          <standards>
            <standard ref="4.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all the Cloudwatch alarms configured for the VPC Flow Logs metric, and check if an Alarm Action is configured:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudwatch describe-alarms --query "MetricAlarms[?MetricName =='&amp;lt;vpc_flow_log_metric_name&amp;gt;'].{MetricName:MetricName,AlarmActions:AlarmActions,AlarmName:AlarmName}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T15:51:42.064">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.6" name="Create a log metric filter for the Cloudwatch group assigned to the &quot;VPC Flow Logs&quot;" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Description:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  This recommendation builds upon the Foundation benchmark recommendation: "Ensure VPC Flow Logging is Enabled in all Applicable Regions"&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  VPC flow logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. Flow log data is stored using Amazon CloudWatch Logs. VPC flow logs can capture accepted traffic, rejected traffic, or all traffic.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Metric filters can be used to express how the service would extract metric observations from ingested events and transform them to data points in a CloudWatch metric. Metric filters are assigned to log groups, and all of the filters assigned to a log group are applied to their log streams.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A metric filter should be created for counting how many IP packets are rejected in the VPC flow logs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a metric filter for the Cloudwatch Log group assigned to the "VPC Flow Logs":&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws logs put-metric-filter --log-group-name &amp;lt;vpc_flow_log_group_name&amp;gt; --filter-name &amp;lt;vpc_flow_log_filter_name&amp;gt; --filter-pattern "{ $.errorCode =\"AccessDenied\" }" --metric-transformations metricName= &amp;lt;vpc_flow_log_metric_name&amp;gt;,metricNamespace=LogMetrics,metricValue=1 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe metric filter" url="https://docs.aws.amazon.com/cli/latest/reference/logs/describe-metric-filters.html"/>
            <reference name="Filter log events" url="https://docs.aws.amazon.com/cli/latest/reference/logs/filter-log-events.html"/>
            <reference name="Put metric filter" url="https://docs.aws.amazon.com/cli/latest/reference/logs/put-metric-filter.html"/>
          </references>
          <standards>
            <standard ref="4.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface to check if the log metric filter: 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   aws logs describe-metric-filters --region &amp;lt;application_region&amp;gt; --log-group-name &amp;lt;vpc_flow_log_group_name&amp;gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T15:48:32.261">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.7" name="Create an IAM group for administration purposes" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;: 
&lt;div&gt; 
 &lt;br&gt; 
  An IAM group is a collection of IAM users. You can use groups to specify permissions for a collection of users, which can make those permissions easier to manage for those users. For example, you could have a group called Admins and give that group the types of permissions that administrators typically need. Any user in that group automatically has the permissions that are assigned to the group. If a new user joins your organization and should have administrator privileges, you can assign the appropriate permissions by adding the user to that group. Similarly, if a person changes jobs in your organization, instead of editing that user's permissions, you can remove him or her from the old groups and add him or her to the appropriate new groups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a new IAM group for administration purposes:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam create-group --group-name &amp;lt;iam_admin_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Attach the Admin policy to the administration IAM group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam attach-group-policy --policy-arn &amp;lt;admin_policy_arn&amp;gt; --group-name &amp;lt;iam_admin_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Impact&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The name of the IAM admin group name should be known prior to auditing this recommendation. For a sample admin policy arn see recommendation 2.1. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Attach group policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-group-policy.html"/>
            <reference name="Create groups" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-group.html"/>
            <reference name="List groups" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-groups.html"/>
          </references>
          <standards>
            <standard ref="2.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the IAM groups created for administration purposes:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-groups --query "Groups[?GroupName == '&amp;lt;iam_admin_group_name&amp;gt;']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T13:59:51.981">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.8" name="Create an IAM policy that allows admin privileges for all services used" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  A policy is a document that formally states one or more permissions.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Managed policies are standalone policies that you can attach to multiple users, groups, and roles in your AWS account. Managed policies apply only to identities (users, groups, and roles) - not resources. You must ensure that you have an IAM managed policy created with admin permissions for all the AWS services used by the application. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create an IAM managed admin policy for all AWS services used:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam create-policy --policy-name &amp;lt;admin_policy_name&amp;gt; --policy-document file://policy 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;br&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;b&gt;Impact&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  The admin policy should be defined prior to auditing and remediating this recommendation. For a sample admin policy see recommendation 2.1. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-policy.html"/>
            <reference name="Get policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-policy.html"/>
            <reference name="List policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html"/>
          </references>
          <standards>
            <standard ref="2.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the IAM admin policies and note the policy ARN and DefaultVersionId:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-policies --query "Policies[?PolicyName == '&amp;lt;admin_policy_name&amp;gt;']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If the policy exists, check the policy document:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-policy-version --policy-arn &amp;lt;admin_policy_arn&amp;gt; --version-id &amp;lt;admin_policy_version&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T14:02:44.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-1.20" name="Create an IAM role for managing incidents with AWS" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>WS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;b&gt;Remediation:&lt;/b&gt; 
&lt;br /&gt;Using the Amazon unified command line interface, create an IAM role for managing incidents with AWS: 
&lt;br /&gt; 
&lt;br /&gt;Create a trust relationship policy document that allows &amp;lt;iam_user&amp;gt; to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json: 
&lt;br /&gt; 
&lt;br /&gt;{ 
&lt;br /&gt;&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, 
&lt;br /&gt;&amp;quot;Statement&amp;quot;: [{ 
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, 
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;Principal&amp;quot;: { 
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;AWS&amp;quot;: &amp;quot;&amp;lt;iam_user&amp;gt;&amp;quot; 
&lt;br /&gt;&amp;nbsp; }, 
&lt;br /&gt;&amp;nbsp; &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRole&amp;quot; 
&lt;br /&gt;&amp;nbsp; }] 
&lt;br /&gt;} 
&lt;br /&gt; 
&lt;br /&gt;Create the IAM role using the above trust policy: 
&lt;br /&gt; 
&lt;br /&gt;aws iam create-role --role-name &amp;lt;aws_support_iam_role&amp;gt; --assume-role-policy-document file:///tmp/TrustPolicy.json 
&lt;br /&gt; 
&lt;br /&gt;Attach 'AWSSupportAccess' managed policy to the created IAM role: 
&lt;br /&gt; 
&lt;br /&gt;aws iam attach-role-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; --role-name &amp;lt;aws_support_iam_role&amp;gt; 
&lt;br /&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: list entities for policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-entities-for-policy.html"/>
            <reference name="Amazon docs: managed policies and inline policies" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html"/>
            <reference name="Attach role policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html"/>
            <reference name="List policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html"/>
          </references>
          <standards>
            <standard ref="1.17" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: 
            &lt;br /&gt; 
            &lt;div&gt; 
             &lt;ul&gt; 
              &lt;li&gt;List IAM policies, filter for the 'AWSSupportAccess' managed policy, and note the &amp;quot;Arn&amp;quot; element value: &lt;/li&gt; 
             &lt;/ul&gt; 
            &lt;/div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; aws iam list-policies --query &amp;quot;Policies[?PolicyName == 'AWSSupportAccess']&amp;quot; 
            &lt;br /&gt; 
            &lt;div&gt; 
             &lt;ul&gt; 
              &lt;li&gt;Check if the 'AWSSupportAccess' is attached to any IAM user, group or role: &lt;/li&gt; 
             &lt;/ul&gt; 
            &lt;/div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; aws iam list-entities-for-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; 
            &lt;span style=" , Arial;"&gt;&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Monitoring-3" name="Create AWS Organizations change alerts" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Monitoring AWS Organizations changes can help you prevent any unwanted, accidental or intentional modifications that may lead to unauthorized access or other security breaches. This monitoring technique helps you to ensure that any unexpected changes performed within your AWS Organizations can be investigated and any unwanted changes can be rolled back.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the following to setup the metric filter, alarm, SNS topic, and subscription:&lt;/p&gt;&lt;p&gt;1. Create a metric filter based on filter pattern provided which checks for AWS Organizations changes and the &amp;lt;cloudtrail_log_group_name&amp;gt; taken from audit step 1:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs put-metric-filter --log-group-name &amp;lt;cloudtrail_log_group_name&amp;gt; --filter-name `&amp;lt;organizations_changes&amp;gt;` --metric-transformations metricName= `&amp;lt;organizations_changes&amp;gt;` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = organizations.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = "AcceptHandshake") || ($.eventName = "AttachPolicy") || ($.eventName = "CreateAccount") || ($.eventName = "CreateOrganizationalUnit") || ($.eventName = "CreatePolicy") || ($.eventName = "DeclineHandshake") || ($.eventName = "DeleteOrganization") || ($.eventName = "DeleteOrganizationalUnit") || ($.eventName = "DeletePolicy") || ($.eventName = "DetachPolicy") || ($.eventName = "DisablePolicyType") || ($.eventName = "EnablePolicyType") || ($.eventName = "InviteAccountToOrganization") || ($.eventName = "LeaveOrganization") || ($.eventName = "MoveAccount") || ($.eventName = "RemoveAccountFromOrganization") || ($.eventName = "UpdatePolicy") || ($.eventName = "UpdateOrganizationalUnit")) }'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.&lt;/p&gt;&lt;p&gt;2. Create an SNS topic that the alarm will notify:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the same topic for all monitoring alarms.&lt;/p&gt;&lt;p&gt;3. Create an SNS subscription to the topic created in step 2:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.&lt;/p&gt;&lt;p&gt;4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch put-metric-alarm --alarm-name `&amp;lt;organizations_changes&amp;gt;` --metric-name `&amp;lt;organizations_changes&amp;gt;` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.15" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:&lt;/p&gt;&lt;p&gt;1. Identify the log group name configured for use with active multi-region CloudTrail:&lt;/p&gt;&lt;p&gt;List all CloudTrails:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail describe-trails&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Identify Multi region Cloudtrails: Trails with "IsMultiRegionTrail" set to true&lt;/p&gt;&lt;p&gt;From value associated with CloudWatchLogsLogGroupArn note &amp;lt;cloudtrail_log_group_name&amp;gt;&lt;/p&gt;&lt;p&gt;Example: for CloudWatchLogsLogGroupArn that looks like arn:aws:logs:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:log-group:NewGroup:*, &amp;lt;cloudtrail_log_group_name&amp;gt; would be NewGroup&lt;/p&gt;&lt;p&gt;Ensure Identified Multi region CloudTrail is active&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-trail-status --name &amp;lt;Name of a Multi-region CloudTrail&amp;gt; ensure IsLogging is set to TRUE&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure identified Multi-region Cloudtrail captures all Management Events&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --trail-name &amp;lt;trailname shown in describe-trails&amp;gt; Ensure there is at least one Event Selector for a Trail with IncludeManagementEvents set to true and ReadWriteType set to All&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Get a list of all associated metric filters for this &amp;lt;cloudtrail_log_group_name&amp;gt;:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs describe-metric-filters --log-group-name "&amp;lt;cloudtrail_log_group_name&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. Ensure the output from the above command contains the following:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Filter = {(($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")) &amp;amp;&amp;amp; (($.sourceIPAddress!="delivery.logs.amazonaws.com") &amp;amp;&amp;amp; ($.eventName!="HeadBucket"))}"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. Note the &amp;lt;unauthorized_api_calls_metric&amp;gt; value associated with the filterPattern found in step 3.&lt;/p&gt;&lt;p&gt;5. Get a list of CloudWatch alarms and filter on the &amp;lt;unauthorized_api_calls_metric&amp;gt; captured in step 4.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== `&amp;lt;unauthorized_api_calls_metric&amp;gt;`]'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;6. Note the AlarmActions value - this will provide the SNS topic ARN value.&lt;/p&gt;&lt;p&gt;7. Ensure there is at least one active subscriber to the SNS topic&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;at least one subscription should have "SubscriptionArn" with valid aws ARN.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Example of valid "SubscriptionArn": "arn:aws:sns:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:&amp;lt;SnsTopicName&amp;gt;:&amp;lt;SubscriptionID&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T12:26:04.667">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.8" name="Create billing alerts to identify unusual spend" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By setting billing alarms you can monitor your AWS spend and be alerted if it exceeds certain thresholds thus protecting you from accruing unnecessary charges. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;On the navigation pane, choose Preferences.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select the Receive Billing Alerts check box.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Choose Save preferences.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If necessary, change the region on the navigation bar to US East (N. Virginia). The billing metric data is stored in this region, even for resources in other regions.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;On the navigation pane, under "Metrics", choose "Billing".&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the list of billing metrics, select the check box next to Currency USD, for the metric named EstimatedCharges. Define the alarm as follows:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If you want the alarm to trigger as soon as you go over the free tier, set "When my total AWS charges for the month exceed" to $.01. This means that you'll receive a notification as soon as you incur a charge. Otherwise, set it to the amount you want to trigger the alarm, and you will be notified when you go over that amount.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Choose the "New list" link next to the "send a notification to" box.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;When prompted, enter your email address or choose your Amazon SNS notification from the drop down.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Choose "Create Alarm".&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;In the "Confirm new email addresses" dialog box, confirm the email address or choose "I will do it later". If you don't confirm the email address now, the alarm remains in the Pending confirmation status until you do so, and does not send an alert. To view the status of your alarm, choose "Alarms" in the navigation panel.&lt;/li&gt; 
 &lt;/ol&gt; &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management
                            console at https://console.aws.amazon.com/billing/home#/.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the navigation pane, choose Preferences.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the &amp;quot;Receive Billing Alerts&amp;quot; check box is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If necessary, change the region on the navigation bar to US East (N. Virginia).
                            The billing metric data is stored in this region, even for resources in other regions.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the navigation pane, under &amp;quot;Alarms&amp;quot;, check for one called
                            &amp;quot;Billing&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on the alert if it exists and select the checkbox in the first column.&lt;/li&gt;
                            &lt;li&gt;In the preview pane check that the &amp;quot;EstimatedCharges&amp;quot; threshold
                            is set to the correct value and that the &amp;quot;Actions&amp;quot; is send an alarm to a
                            valid email address.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.4" name="Create cloudtrail configuration changes alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is changes to
                        cloudtrail. Since cloudtrail is the actual utility logging API calls it's security is paramount
                        to ensuring that this continues. Therefore alerting on changes to cloudtrail activity can
                        prevent a malicious user switching off the logging in order to carry out untracked activities.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&amp;nbsp;&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                        &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;aws
                        logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                        ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) ||
                        ($.eventName = StartLogging) || ($.eventName = StopLogging) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4: aws
                        cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                        &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                        list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.5" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName =
                            DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.4-5.5" name="Create Cloudwatch Log Group for tier" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  AWS CloudWatch Log groups define groups of log streams that share the same retention, monitoring, and access control settings. Each log stream has to belong to one log group.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.&lt;/li&gt; 
  &lt;li&gt;The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a Cloudwatch log group for the Web tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws logs create-log-group --log-group-name &amp;lt;web_tier_log_group&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create log groups" url="https://docs.aws.amazon.com/cli/latest/reference/logs/create-log-group.html"/>
            <reference name="Describe log groups" url="https://docs.aws.amazon.com/cli/latest/reference/logs/describe-log-groups.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Search for your Web tier Cloudwatch log group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws logs describe-log-groups --query "logGroups[?logGroupName =='&amp;lt;web_tier_log_group&amp;gt;']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T16:24:18.287">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.6" name="Create IAM Policy change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried to identify suspicious API activity. One such activity that should be monitored is management IAM policy changes. IAM manages authorization and authentication controls with AWS and therefore it is vital that unauthorized changes are detected. Enabling monitoring of these changes ensures that these policies remain intact and as desired. 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a metric filter that checks for IAM policy changes: aws logs put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=Delete UserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=P utUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=Cr eatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)| |($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUs erPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an SNS subscription to the topic created above:aws sns subscribe --topic-arn &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt; 
 &lt;/ol&gt; &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource
                            = kms.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))} }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.3" name="Create management console login alerts when MFA is not used" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is login on the
                        console without MFA. Since logging on at the console should be restricted to only those users
                        with an active MFA this alert will highlight those with password only access. This helps to
                        capture weaker login procedures (password only) as they occur.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for console login without MFA: aws logs
                        put-metric-filter --log-group-name &amp;lt;cloudwatch-logs-group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{
                        $.userIdentity.sessionContext.attributes.mfaAuthenticated != &amp;quot;true&amp;quot; }'&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;
                            aws logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ $.userIdentity.sessionContext.attributes.mfaAuthenticated != &amp;quot;true&amp;quot;
                            }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.5" name="Create management console login failure alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is management
                        console login failures. The management console is the AWS account GUI where administration
                        activity is performed and is therefore a primary target for brute force attempts. To identify
                        these attempts alerts for login failures should be enabled as this can highlight suspicious
                        activity.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for console login failures: aws logs
                        put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = ConsoleLogin)
                        &amp;amp;&amp;amp; ($.errorMessage = &amp;quot;Failed authentication&amp;quot;) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.6" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = ConsoleLogin) &amp;amp;&amp;amp; ($.errorMessage = \&amp;quot;Failed
                            authentication\&amp;quot;) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Monitoring-2" name="Create network gateways change alerts" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.&lt;/p&gt;&lt;p&gt;Perform the following to setup the metric filter, alarm, SNS topic, and subscription:&lt;/p&gt;&lt;p&gt;1. Create a metric filter based on filter pattern provided which checks for network gateways changes and the &amp;lt;cloudtrail_log_group_name&amp;gt; taken from audit step 1.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs put-metric-filter --log-group-name &amp;lt;cloudtrail_log_group_name&amp;gt; --filter-name `&amp;lt;network_gw_changes_metric&amp;gt;` --metric-transformations metricName= `&amp;lt;network_gw_changes_metric&amp;gt;` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) ||($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.&lt;/p&gt;&lt;p&gt;2. Create an SNS topic that the alarm will notify&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the same topic for all monitoring alarms.&lt;/p&gt;&lt;p&gt;3. Create an SNS subscription to the topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.&lt;/p&gt;&lt;p&gt;4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch put-metric-alarm --alarm-name `&amp;lt;network_gw_changes_alarm&amp;gt;` --metric-name `&amp;lt;network_gw_changes_metric&amp;gt;` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.12" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:&lt;/p&gt;&lt;p&gt;1. Identify the log group name configured for use with active multi-region CloudTrail:&lt;/p&gt;&lt;p&gt;List all CloudTrails:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail describe-trails&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Identify Multi region Cloudtrails: Trails with "IsMultiRegionTrail" set to true&lt;/p&gt;&lt;p&gt;From value associated with CloudWatchLogsLogGroupArn note &amp;lt;cloudtrail_log_group_name&amp;gt;&lt;/p&gt;&lt;p&gt;Example: for CloudWatchLogsLogGroupArn that looks like arn:aws:logs:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:log-group:NewGroup:*, &amp;lt;cloudtrail_log_group_name&amp;gt; would be NewGroup&lt;/p&gt;&lt;p&gt;Ensure Identified Multi region CloudTrail is active&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-trail-status --name &amp;lt;Name of a Multi-region CloudTrail&amp;gt; ensure IsLogging is set to TRUE&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure identified Multi-region Cloudtrail captures all Management Events&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --trail-name &amp;lt;trailname shown in describe-trails&amp;gt; Ensure there is at least one Event Selector for a Trail with IncludeManagementEvents set to true and ReadWriteType set to All&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Get a list of all associated metric filters for this &amp;lt;cloudtrail_log_group_name&amp;gt;:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs describe-metric-filters --log-group-name "&amp;lt;cloudtrail_log_group_name&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. Ensure the output from the above command contains the following:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Filter = {(($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")) &amp;amp;&amp;amp; (($.sourceIPAddress!="delivery.logs.amazonaws.com") &amp;amp;&amp;amp; ($.eventName!="HeadBucket"))}"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. Note the &amp;lt;unauthorized_api_calls_metric&amp;gt; value associated with the filterPattern found in step 3.&lt;/p&gt;&lt;p&gt;5. Get a list of CloudWatch alarms and filter on the &amp;lt;unauthorized_api_calls_metric&amp;gt; captured in step 4.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== `&amp;lt;unauthorized_api_calls_metric&amp;gt;`]'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;6. Note the AlarmActions value - this will provide the SNS topic ARN value.&lt;/p&gt;&lt;p&gt;7. Ensure there is at least one active subscriber to the SNS topic&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;at least one subscription should have "SubscriptionArn" with valid aws ARN.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Example of valid "SubscriptionArn": "arn:aws:sns:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:&amp;lt;SnsTopicName&amp;gt;:&amp;lt;SubscriptionID&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T12:23:59.143">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.2" name="Create root account usage alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is usage of the
                        root account. This account should not be used on a day to day basis due to its full unrestricted
                        privilege therefore usage should be by exception. Monitoring this usage should capture any
                        suspicious activity used on the account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                        &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                        &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws logs
                        describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                        &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                        $.userIdentity.type = \&amp;quot;Root\&amp;quot; &amp;amp;&amp;amp; $.userIdentity.invokedBy NOT
                        EXISTS &amp;amp;&amp;amp; $.eventType != \&amp;quot;AwsServiceEvent\&amp;quot; } &amp;quot;&lt;/li&gt;
                        &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4: aws
                        cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                        &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                        list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            $.userIdentity.type = \&amp;quot;Root\&amp;quot; &amp;amp;&amp;amp; $.userIdentity.invokedBy
                            NOT EXISTS &amp;amp;&amp;amp; $.eventType != \&amp;quot;AwsServiceEvent\&amp;quot; } &amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.8" name="Create s3 bucket policy change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried to identify suspicious API activity. One such activity that should be monitored is S3 bucket policy changes. S3 bucket policies are a resource based policy that provide authorizations on S3 buckets. 
&lt;div&gt; 
 &lt;br /&gt; 
  Making sure that their integrity remains intact is vital in ensuring the data within the S3 bucket remains secure and authorizations intact. Therefore s3 bucket policy changes should be alerted upon 
 &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a metric filter that checks for S3 Bucket policy changes:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws logs put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;value&amp;gt; --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventSource = s3.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an SNS topic for notifications:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws sns create-topic --name &amp;lt;topic_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an SNS subscription to the topic created above&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws sns subscribe --topic-arn &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudwatch put-metric-alarm --alarm-name &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.8" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;
                            aws logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventSource = s3.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = PutBucketAcl) ||
                            ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName =
                            PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName =
                            DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName =
                            DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.10" name="Create security group change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried to identify suspicious API activity. One such activity that should be monitored is security group changes. Security groups are analogous to firewalls and therefore protect inbound and outbound access to &amp;amp; from AWS resources such as ec2 instances and RDS databases (amongst other things. Therefore alerting on changes to security groups helps ensure that the resources protected by them are not exposed.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a metric filter that checks for security group changes: aws logs put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup)}'&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.10" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName =
                            AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName
                            = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName =
                            DeleteSecurityGroup)}&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Monitoring-1" name="Create unauthorized API calls alerts" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.&lt;/p&gt;&lt;p&gt;If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.&lt;/p&gt;&lt;p&gt;In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the following to setup the metric filter, alarm, SNS topic, and subscription:&lt;/p&gt;&lt;p&gt;1. Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the &amp;lt;cloudtrail_log_group_name&amp;gt; taken from audit step 1.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs put-metric-filter --log-group-name &amp;lt;cloudtrail_log_group_name&amp;gt; --filter-name `&amp;lt;unauthorized_api_calls_metric&amp;gt;` --metric-transformations metricName= `&amp;lt;unauthorized_api_calls_metric&amp;gt;` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") || ($.sourceIPAddress!="delivery.logs.amazonaws.com") || ($.eventName!="HeadBucket") }'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.&lt;/p&gt;&lt;p&gt;2. Create an SNS topic that the alarm will notify&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the same topic for all monitoring alarms.&lt;/p&gt;&lt;p&gt;3. Create an SNS subscription to the topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.&lt;/p&gt;&lt;p&gt;4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch put-metric-alarm --alarm-name `&amp;lt;unauthorized_api_calls_alarm&amp;gt;` --metric-name `&amp;lt;unauthorized_api_calls_metric&amp;gt;` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:&lt;/p&gt;&lt;p&gt;1. Identify the log group name configured for use with active multi-region CloudTrail:&lt;/p&gt;&lt;p&gt;List all CloudTrails:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail describe-trails&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Identify Multi region Cloudtrails: Trails with "IsMultiRegionTrail" set to true&lt;/p&gt;&lt;p&gt;From value associated with CloudWatchLogsLogGroupArn note &amp;lt;cloudtrail_log_group_name&amp;gt;&lt;/p&gt;&lt;p&gt;Example: for CloudWatchLogsLogGroupArn that looks like arn:aws:logs:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:log-group:NewGroup:*, &amp;lt;cloudtrail_log_group_name&amp;gt; would be NewGroup&lt;/p&gt;&lt;p&gt;Ensure Identified Multi region CloudTrail is active&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-trail-status --name &amp;lt;Name of a Multi-region CloudTrail&amp;gt; ensure IsLogging is set to TRUE&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure identified Multi-region Cloudtrail captures all Management Events&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --trail-name &amp;lt;trailname shown in describe-trails&amp;gt; Ensure there is at least one Event Selector for a Trail with IncludeManagementEvents set to true and ReadWriteType set to All&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Get a list of all associated metric filters for this &amp;lt;cloudtrail_log_group_name&amp;gt;:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs describe-metric-filters --log-group-name "&amp;lt;cloudtrail_log_group_name&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. Ensure the output from the above command contains the following:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Filter = {(($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")) &amp;amp;&amp;amp; (($.sourceIPAddress!="delivery.logs.amazonaws.com") &amp;amp;&amp;amp; ($.eventName!="HeadBucket"))}"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. Note the &amp;lt;unauthorized_api_calls_metric&amp;gt; value associated with the filterPattern found in step 3.&lt;/p&gt;&lt;p&gt;5. Get a list of CloudWatch alarms and filter on the &amp;lt;unauthorized_api_calls_metric&amp;gt; captured in step 4.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== `&amp;lt;unauthorized_api_calls_metric&amp;gt;`]'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;6. Note the AlarmActions value - this will provide the SNS topic ARN value.&lt;/p&gt;&lt;p&gt;7. Ensure there is at least one active subscriber to the SNS topic&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;at least one subscription should have "SubscriptionArn" with valid aws ARN.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Example of valid "SubscriptionArn": "arn:aws:sns:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:&amp;lt;SnsTopicName&amp;gt;:&amp;lt;SubscriptionID&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T12:21:13.266">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.13" name="Create VPC gateway change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC gateway
                        changes. VPC gateways are used as a means of sending traffic outside of a VPC (ie to the
                        internet) and are vital in ensuring traffic flows to the correct destination. Therefore alerting
                        on changes to VPC gateways ensuring traffic continues to flow as expected via the correct
                        gateway.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for VPC gateway changes: aws logs put-metric-filter
                        --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric-
                        transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateCustomerGateway)
                        || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) ||
                        ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName =
                        DetachInternetGateway) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.14" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) ||
                            ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) ||
                            ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.11" name="Create VPC NACL change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC NACL
                        changes. Network Access Control Lists (NACLS) control inbound and outbound access to &amp;amp;
                        from AWS subnets and work like packet filters to protect the network. Therefore alerting on
                        changes to NACLS helps ensure that the subnets protected by them are not exposed.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for NACL changes: aws logs put-metric-filter
                        --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric-
                        transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateNetworkAcl) ||
                        ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =
                        DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName =
                        ReplaceNetworkAclAssociation) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.11" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) ||
                            ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName =
                            ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.12" name="Create VPC route table change alerts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC route
                        table changes. VPC route tables provide a means of routing network traffic between subnets and
                        via gateways and ensures traffic flows via the correct path. Therefore alerting on changes to
                        route tables ensuring traffic continues to flow as expected.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for VPC route table changes: aws logs
                        put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateRoute)
                        || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName =
                        ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute)
                        || ($.eventName = DisassociateRouteTable) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.13" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName
                            = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName =
                            DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.6-5.7" name="Define a retention period for Cloudwatch log group in tier" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Retention period should be used to specify how long log events are kept in CloudWatch Logs. Expired log events get deleted automatically. Just like metric filters, retention settings are also assigned to log groups, and the retention assigned to a log group is applied to their log streams.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Put a retention policy for your Web tier Cloudwatch log group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws logs put-retention-policy --log-group-name &amp;lt;web_tier_log_group&amp;gt; --retention-indays &amp;lt;log_retention_period&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;b&gt;Impact&lt;/b&gt;:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  If the retention period is not configured then logs will be retained indefinitely with increasing cost. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe log groups" url="https://docs.aws.amazon.com/cli/latest/reference/logs/describe-log-groups.html"/>
            <reference name="Put retention policy" url="https://docs.aws.amazon.com/cli/latest/reference/logs/put-retention-policy.html"/>
          </references>
          <standards>
            <standard ref="5.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Search for your Web tier Cloudwatch log group, and check for the presence of "retentionInDays" element:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws logs describe-log-groups --query "logGroups[?logGroupName == 
   &lt;/div&gt; 
   &lt;div&gt;
     '&amp;lt;web_tier_log_group&amp;gt;']" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T16:28:27.485">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM2" name="Disable credentials unused after 45 days" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Disabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to manage Unused Password (IAM user console access)&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console:&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click on Users&lt;/li&gt;&lt;li&gt;Click on Security Credentials&lt;/li&gt;&lt;li&gt;Select user whose Console last sign-in is greater than 45 days&lt;/li&gt;&lt;li&gt;Click Security credentials&lt;/li&gt;&lt;li&gt;In section Sign-in credentials, Console password click Manage&lt;/li&gt;&lt;li&gt;Under Console Access select Disable 10.Click Apply&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Perform the following to deactivate Access Keys:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console:&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click on Users&lt;/li&gt;&lt;li&gt;Click on Security Credentials&lt;/li&gt;&lt;li&gt;Select any access keys that are over 45 days old and that have been used and&lt;ol&gt;&lt;li&gt;Click on Make Inactive&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Select any access keys that are over 45 days old and that have not been used and&lt;ol&gt;&lt;li&gt;Click the X to Delete&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.12" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to determine if unused credentials exist:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click on Users&lt;/li&gt;&lt;li&gt;Click the Settings (gear) icon.&lt;/li&gt;&lt;li&gt;Select Console last sign-in, Access key last used, and Access Key Id&lt;/li&gt;&lt;li&gt;Click on Close&lt;/li&gt;&lt;li&gt;Check and ensure that Console last sign-in is less than 45 days ago.&lt;ol&gt;&lt;li&gt;Note - Never means the user has never logged in.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Check and ensure that Access key age is less than 45 days and that Access key last used does not say None&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If the user hasn't signed into the Console in the last 45 days or Access keys are over 45 days old refer to the remediation.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Download Credential Report:&lt;/p&gt;&lt;p&gt;1. Run the following commands:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam generate-credential-report&amp;nbsp;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,5,6,9,10,11,14,15,16&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure unused credentials do not exist:&lt;/p&gt;&lt;p&gt;2. For each user having password_enabled set to TRUE , ensure password_last_used_date is less than 45 days ago.&lt;/p&gt;&lt;p&gt;When password_enabled is set to TRUE and password_last_used is set to No_Information , ensure password_last_changed is less than 45 days ago.&lt;/p&gt;&lt;p&gt;3. For each user having an access_key_1_active or access_key_2_active to TRUE , ensure the corresponding access_key_n_last_used_date is less than 45 days ago.&lt;/p&gt;&lt;p&gt;When a user having an access_key_x_active (where x is 1 or 2) to TRUE and corresponding access_key_x_last_used_date is set to N/A', ensure access_key_x_last_rotated` is less than 45 days ago.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T11:42:05.316">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-1.21" name="Do not setup access keys during initial user setup for all IAM users that have a console password" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS console defaults the checkbox for creating access keys to enabled. This results in many access keys being generated unnecessarily. In addition to unnecessary credentials, it also generates unnecessary management work in auditing and rotating these keys. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;b&gt;Remediation: &lt;/b&gt; 
&lt;br /&gt;Perform the following to delete access keys that do not pass the audit. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;ol&gt; 
 &lt;li&gt;Login to the AWS Management Console.Click Services.&lt;/li&gt; 
 &lt;li&gt;Click IAM&lt;/li&gt; 
 &lt;li&gt;Click on Users.Click on Security Credentials.&lt;/li&gt; 
 &lt;li&gt;As an Administrator.&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click on Delete for keys that were created at the same time as the user profile but have not been used.&lt;br /&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; As an IAM User&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click on Delete for keys that were created at the same time as the user profile but have not been used.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Via CLI:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;aws iam delete-access-key&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ol&gt; 
&lt;span style="font-weight: bold;"&gt;&lt;/span&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.11" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform the following to determine if access keys are rotated as prescribed: 
            &lt;br /&gt; 
            &lt;ol&gt; 
             &lt;li&gt;Login to the AWS Management Console&lt;/li&gt; 
             &lt;li&gt;Click Services&lt;/li&gt; 
             &lt;li&gt;Click IAM&lt;/li&gt; 
             &lt;li&gt;Click on a User&lt;/li&gt; 
             &lt;li&gt;Compare the user creation date to the key 1 creation date.&lt;/li&gt; 
             &lt;li&gt;For any that match, the key was created during initial user setup.&lt;/li&gt; 
            &lt;/ol&gt;Keys that were created at the same time as the user profile and do not have a last used date should be deleted. 
            &lt;br /&gt; 
            &lt;br /&gt;Via the CLI: 
            &lt;br /&gt; 
            &lt;ul&gt; 
             &lt;li&gt;Run the following command (OSX/Linux/UNIX) to generate a list of all IAM users along with their access keys utilization:&lt;/li&gt; 
            &lt;/ul&gt; 
            &lt;blockquote&gt; 
             &lt;blockquote&gt;
               aws iam generate-credential-report 
             &lt;/blockquote&gt; 
            &lt;/blockquote&gt; 
            &lt;br /&gt; 
            &lt;blockquote&gt; 
             &lt;blockquote&gt;
               aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,9,11,14,16 
             &lt;/blockquote&gt; 
            &lt;/blockquote&gt; 
            &lt;ul&gt; 
             &lt;li&gt;The output of this command will produce a table similar to the following:&amp;nbsp;&lt;/li&gt; 
            &lt;/ul&gt; 
            &lt;blockquote&gt; 
             &lt;blockquote&gt;
               user,password_enabled,access_key_1_active,access_key_1_last_used_date,access_ 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               key_2_active,access_key_2_last_used_date 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               elise,false,true,2015-04-16T15:14:00+00:00,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               brandon,true,true,N/A,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               rakesh,false,false,N/A,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               helene,false,true,2015-11-18T17:47:00+00:00,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               paras,true,true,2016-08-28T12:04:00+00:00,true,2016-03-04T10:11:00+00:00 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               anitha,true,true,2016-06-08T11:43:00+00:00,true,N/A 
             &lt;/blockquote&gt; 
            &lt;/blockquote&gt; 
            &lt;ul&gt; 
             &lt;li&gt;For any user having access_key_last_used_date set to N/A , ensure that access key is deleted&lt;/li&gt; 
            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.2" name="Enable CloudTrail log file validation" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Enabling log file validation will provide additional integrity checking of CloudTrail as it
                        creates a digest for each log file it writes to S3. These digests can then be used to determine
                        if a log has been modified since being written
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail update-trail --name &amp;lt;trail_name&amp;gt; --enable-log-file-validation
                        &lt;/blockquote&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws cloudtrail describe-trails&amp;nbsp;
                            &lt;/blockquote&gt;Ensure LogFileValidationEnabled = true (for each trail)
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM6" name="Enable IAM Access Analyzer for all regions" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable IAM Access analyzer for IAM policies about all resources in each region.&lt;/p&gt;&lt;p&gt;IAM Access Analyzer is a technology introduced at AWS reinvent 2019. After the Analyzer is enabled in IAM, scan results are displayed on the console showing the accessible resources. Scans show resources that other accounts and federated users can access, such as KMS keys and IAM roles. So the results allow you to determine if an unintended user is allowed, making it easier for administrators to monitor least privileges access. Access Analyzer analyzes only policies that are applied to resources in the same AWS Region.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;AWS IAM Access Analyzer helps you identify the resources in your organization and accounts, such as Amazon S3 buckets or IAM roles, that are shared with an external entity. This lets you identify unintended access to your resources and data. Access Analyzer identifies resources that are shared with external principals by using logic-based reasoning to analyze the resource-based policies in your AWS environment. IAM Access Analyzer continuously monitors all policies for S3 bucket, IAM roles, KMS(Key Management Service) keys, AWS Lambda functions, and Amazon SQS(Simple Queue Service) queues.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to enable IAM Access analyzer for IAM policies:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the IAM console at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;Choose Access analyzer.&lt;/li&gt;&lt;li&gt;Choose Create analyzer.&lt;/li&gt;&lt;li&gt;On the Create analyzer page, confirm that the Region displayed is the Region where you want to enable Access Analyzer.&lt;/li&gt;&lt;li&gt;Enter a name for the analyzer. Optional as it will generate a name for you automatically.&lt;/li&gt;&lt;li&gt;Add any tags that you want to apply to the analyzer. Optional.&lt;/li&gt;&lt;li&gt;Choose Create Analyzer.&lt;/li&gt;&lt;li&gt;Repeat these step for each active region&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Run the following command:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws accessanalyzer create-analyzer --analyzer-name &amp;lt;NAME&amp;gt; --type &amp;lt;ACCOUNT|ORGANIZATION&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Repeat this command above for each active region. Note: The IAM Access Analyzer is successfully configured only when the account you use has the necessary permissions.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.20" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the IAM console at https://console.aws.amazon.com/iam/&lt;/li&gt;&lt;li&gt;Choose Access analyzer&lt;/li&gt;&lt;li&gt;Click 'Analyzers'&lt;/li&gt;&lt;li&gt;Ensure that at least one analyzer is present&lt;/li&gt;&lt;li&gt;Ensure that the STATUS is set to Active&lt;/li&gt;&lt;li&gt;Repeat these step for each active region&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run the following command:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws accessanalyzer list-analyzers | grep status&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Ensure that at least one Analyzer the status is set to ACTIVE&lt;/p&gt;&lt;p&gt;3. Repeat the steps above for each active region.&lt;/p&gt;&lt;p&gt;If an Access analyzer is not listed for each region or the status is not set to active refer to the remediation procedure below.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T11:51:15.367">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.6" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.6" name="Enable S3 Bucket logging" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>S3 Bucket Access Logging generates log files that contain access records for each request made
                        to an S3 bucket. By enabling this it is possible to capture events relating to the objects
                        within that bucket thus helping to capture potential security issues or identifying threats. It
                        is recommended to enable S3 bucket logging on any S3 bucket that contains sensitive data and
                        stored the logs in a separate bucket for security analysis.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with S3 update access).&lt;/li&gt;
                        &lt;li&gt;Select S3 from the services menu.&lt;/li&gt;
                        &lt;li&gt;Under All Buckets click on the S3 bucket you wish to enable logging.&lt;/li&gt;
                        &lt;li&gt;Click on Properties in the top right of the console.&lt;/li&gt;
                        &lt;li&gt;Under Bucket:&amp;lt;bucket_name&amp;gt; click on Logging.&lt;/li&gt;
                        &lt;li&gt;Click on the &amp;quot;Enabled&amp;quot; checkbox.&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Target Bucket&amp;quot; to store the logs.&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Target Prefix&amp;quot; for the logs.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Save&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.6" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update access).&lt;/li&gt;
                            &lt;li&gt;Select S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Under All Buckets click on the S3 bucket you wish to enable logging.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on Properties in the top right of the console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Under Bucket:&amp;lt;bucket_name&amp;gt; click on Logging.&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;Enabled&amp;quot; is checked.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.7" name="Enable VPC flow logs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>VPC Flow logs enable the capture of IP traffic that traverses the network interfaces within a
                        VPC. These logs are captured and sent to cloudtrail logs enabling you to detect security
                        incidents that may be occurring across the network.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign into the management console.&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select a VPC.&lt;/li&gt;
                        &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create Flow Log&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Choose a role (note this must be pre-created. Follow the link provided in the text
                        underneath &amp;quot;Role&amp;quot; for help).&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Destination Log Group&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create flow Log&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Select a VPC.&lt;/li&gt;
                            &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                            &lt;li&gt;Ensure a Log Flow exists that has Active in the Status column.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.5" name="Encrypt CloudTrail logs using KMS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, the log files delivered by CloudTrail to your bucket are encrypted by Amazon
                        server-side encryption with Amazon S3-managed encryption keys (SSE-S3). To provide a security
                        layer that is directly manageable, you can instead use server-side encryption with AWS
                        KMS-managed
                        keys (SSE-KMS) for your CloudTrail log files. This provides several advantages:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across
                        all regions.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail
                        log files.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can assign permissions for the key to the users in your organization according to
                        your requirements.&lt;/li&gt;
                        &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now
                        need to meet two conditions:&amp;nbsp;&lt;/li&gt;
                        &lt;ol&gt;
                        &lt;li&gt;you must have S3 read permission on the bucket, and&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;you must be granted decrypt permission by the CMK policy.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/ul&gt;Because S3 automatically decrypts the log files for requests from users authorized to
                        use the CMK, SSE-KMS encryption for CloudTrail log files is backward compatible with existing
                        applications that read CloudTrail log data.&amp;nbsp;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;&amp;nbsp;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with cloudtrail update permissions).&lt;/li&gt;
                        &lt;li&gt;Select CloudTrail from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Trails&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click on a Trail.&lt;/li&gt;
                        &lt;li&gt;Under the S3 section click on the edit button.&lt;/li&gt;
                        &lt;li&gt;Click Advanced.&lt;/li&gt;
                        &lt;li&gt;Set &amp;quot;Encrypt Log Files&amp;quot; to &amp;quot;Yes&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Set &amp;quot;Create a new KMS key&amp;quot; to &amp;quot;Yes&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;In &amp;quot;KMS key&amp;quot; type a name for your key.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Save&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt; 
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.7" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws cloudtrail describe-trails
                            &lt;/blockquote&gt;Check that KMS is enabled if the &amp;quot;KmsKeyId&amp;quot; property is
                            set.
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.9" name="Enforce employee lifecycle policies" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Regular reviews of accounts on the system should be conducted to ensure that stale accounts
                        cannot be abused either by those former employees using them or compromised by attackers.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;&amp;nbsp;
                        &lt;br /&gt;At least every 90 days complete the following:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                        &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;
                        &lt;li&gt;Click on Users.&lt;/li&gt;
                        &lt;li&gt;For any user that should no longer exist:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;select the user,&lt;/li&gt;
                        &lt;li&gt;click &amp;quot;User Actions&amp;quot;,&lt;/li&gt;
                        &lt;li&gt;click &amp;quot;Delete&amp;quot;.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain a list of IAM users by: aws iam list-users --query 'Users[*].UserName'
                            --output text&lt;/li&gt;
                            &lt;li&gt;Ensure all users are valid users.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM4" name="Ensure IAM policies that allow full &quot;*:*&quot; administrative privileges are not attached" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;It's more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later.&lt;/p&gt;&lt;p&gt;Providing full administrative privileges instead of restricting to the minimum set of permissions that the user is required to do exposes the resources to potentially unwanted actions.&lt;/p&gt;&lt;p&gt;IAM policies that have a statement with "Effect": "Allow" with "Action": "*" over "Resource": "*" should be removed.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to detach the policy that has full administrative privileges:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;In the navigation pane, click Policies and then search for the policy name found in the audit step.&lt;/li&gt;&lt;li&gt;Select the policy that needs to be deleted.&lt;/li&gt;&lt;li&gt;In the policy action menu, select first Detach&lt;/li&gt;&lt;li&gt;Select all Users, Groups, Roles that have this policy attached&lt;/li&gt;&lt;li&gt;Click Detach Policy&lt;/li&gt;&lt;li&gt;In the policy action menu, select Detach&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to detach the policy that has full administrative privileges as found in the audit step:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Lists all IAM users, groups, and roles that the specified managed policy is attached to. aws iam list-entities-for-policy --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;li&gt;Detach the policy from all IAM Users: aws iam detach-user-policy --user-name &amp;lt;iam_user&amp;gt; --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;li&gt;Detach the policy from all IAM Groups: aws iam detach-group-policy --group-name &amp;lt;iam_group&amp;gt; --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;li&gt;Detach the policy from all IAM Roles: aws iam detach-role-policy --role-name &amp;lt;iam_role&amp;gt; --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.16" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to determine what policies are created: From Command Line:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Run the following to get a list of IAM policies: aws iam list-policies --only-attached --output text&lt;/li&gt;&lt;li&gt;For each policy returned, run the following command to determine if any policies is allowing full administrative privileges on the account: aws iam get-policy-version --policy-arn &amp;lt;policy_arn&amp;gt; --version-id &amp;lt;version&amp;gt;&lt;/li&gt;&lt;li&gt;In output ensure policy should not have any Statement block with "Effect": "Allow" and Action set to "*" and Resource set to "*"&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T11:47:11.355">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Network-1" name="Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Public access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home&lt;/li&gt;&lt;li&gt;In the left pane, click Network ACLs&lt;/li&gt;&lt;li&gt;For each network ACL to remediate, perform the following:&lt;ol&gt;&lt;li&gt;Select the network ACL&lt;/li&gt;&lt;li&gt;Click the Inbound Rules tab&lt;/li&gt;&lt;li&gt;Click Edit inbound rules&lt;/li&gt;&lt;li&gt;Either A) update the Source field to a range other than 0.0.0.0/0, or, B) Click Delete to remove the offending inbound rule&lt;/li&gt;&lt;li&gt;Click Save&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to determine if the account is configured as prescribed:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home&lt;/li&gt;&lt;li&gt;In the left pane, click Network ACLs&lt;/li&gt;&lt;li&gt;For each network ACL, perform the following:&lt;ol&gt;&lt;li&gt;Select the network ACL&lt;/li&gt;&lt;li&gt;Click the Inbound Rules tab&lt;/li&gt;&lt;li&gt;Ensure no rule exists that has a port range that includes port 22, 3389, or other remote server administration ports for your environment and has a Source of 0.0.0.0/0 and shows ALLOW&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Note: A Port value of ALL or a port range such as 0-1024 are inclusive of port 22, 3389, and other remote server administration ports&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T12:28:37.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM3" name="Ensure there is only one active access key available for any single IAM user" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK)&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Access keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API. One of the best ways to protect your account is to not allow users to have multiple access keys.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and navigate to IAM dashboard at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;In the left navigation panel, choose Users.&lt;/li&gt;&lt;li&gt;Click on the IAM user name that you want to examine.&lt;/li&gt;&lt;li&gt;On the IAM user configuration page, select Security Credentials tab.&lt;/li&gt;&lt;li&gt;In Access Keys section, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.&lt;/li&gt;&lt;li&gt;In the same Access Keys section, identify your non-operational access keys (other than the chosen one) and deactivate it by clicking the Make Inactive link.&lt;/li&gt;&lt;li&gt;If you receive the Change Key Status confirmation box, click Deactivate to switch off the selected key.&lt;/li&gt;&lt;li&gt;Repeat steps no. 3 - 7 for each IAM user in your AWS account.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Using the IAM user and access key information provided in the Audit CLI, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.&lt;/p&gt;&lt;p&gt;2. Run the update-access-key command below using the IAM user name and the non-operational access key IDs to deactivate the unnecessary key(s). Refer to the Audit section to identify the unnecessary access key ID for the selected IAM user&lt;/p&gt;&lt;p&gt;Note - the command does not return any output:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam update-access-key --access-key-id &amp;lt;access-key-id&amp;gt; --status Inactive --user-name &amp;lt;user-name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. To confirm that the selected access key pair has been successfully deactivated run the list-access-keys audit command again for that IAM User:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-access-keys --user-name &amp;lt;user-name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should expose the metadata for each access key associated with the IAM user. If the non-operational key pair(s) Status is set to Inactive, the key has been successfully deactivated and the IAM user access configuration adheres now to this recommendation.&lt;/p&gt;&lt;p&gt;4. Repeat steps no. 1 - 3 for each IAM user in your AWS account.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.13" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and navigate to IAM dashboard at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;In the left navigation panel, choose Users.&lt;/li&gt;&lt;li&gt;Click on the IAM user name that you want to examine.&lt;/li&gt;&lt;li&gt;On the IAM user configuration page, select Security Credentials tab.&lt;/li&gt;&lt;li&gt;Under Access Keys section, in the Status column, check the current status for each access key associated with the IAM user. If the selected IAM user has more than one access key activated then the users access configuration does not adhere to security best practices and the risk of accidental exposures increases.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Repeat steps no. 3 - 5 for each IAM user in your AWS account.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run list-users command to list all IAM users within your account:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-users --query "Users[*].UserName"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should return an array that contains all your IAM user names.&lt;/p&gt;&lt;p&gt;2. Run list-access-keys command using the IAM user name list to return the current status of each access key associated with the selected IAM user:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-access-keys --user-name &amp;lt;user-name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should expose the metadata ("Username", "AccessKeyId", "Status", "CreateDate") for each access key on that user account.&lt;/p&gt;&lt;p&gt;3. Check the Status property value for each key returned to determine each keys current state. If the Status property value for more than one IAM access key is set to Active, the user access configuration does not adhere to this recommendation, refer to the remediation below.&lt;/p&gt;&lt;p&gt;Repeat steps no. 2 and 3 for each IAM user in your AWS account.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T11:45:01.667">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.8" name="Export EC2 OS logs to cloudwatch logs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudwatch logs is an AWS service that allows you to send logs from an EC2 instance to
                        cloudwatch via an agent installed locally on the machine. The logs are then stored centrally
                        within cloudwatch logs and metric alerts can be configured so that security incidents can be
                        reported to the security team. It is recommended to enable cloudwatch log monitoring on all EC2
                        servers.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;Follow the directions provided in &amp;quot;http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html&amp;quot;
                        to install and enable Cloudwatch Logs on a new EC2 instance.
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select Cloudwatch from the services menu.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Logs&amp;quot;.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on your log group.&lt;/li&gt;
                            &lt;li&gt;Click on your log stream.&lt;/li&gt;
                            &lt;li&gt;Ensure event data is being captured as per the logs on your machine.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.8-5.9" name="Install an agent for AWS Cloudwatch Logs within AutoScaling Group for tier" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use CloudWatch Logs to monitor, store and access log files from an Amazon EC2 instance (application or system data). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  With CloudWatch Logs, you can monitor your logs, in near real-time, for specific phrases, values or patterns (metrics). For example, you could set an alarm on the number of errors that occur in your system logs or view graphs of web request latency from your application logs. Log data can be stored and accessed for as long as you need using highly durable, lowcost storage so you don't have to worry about filling up hard drives. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A Cloudwatch agent needs to run within the Guest Operating System of each EC2 instance you wish to ship logs from. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.&lt;/li&gt; 
  &lt;li&gt;The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a sample agent configuration file for Amazon Linux and save it as a text file (for example, awslogs.cfg) either on the AMI's filesystem, in a publicly accessible http/https location, or an Amazon S3 location (for example, s3://&amp;lt;s3_bucket_name&amp;gt;/&amp;lt;cloudwatch_agent_config_file&amp;gt;):&lt;/li&gt; 
 &lt;/ul&gt; 
  [general] 
  state_file = /var/awslogs/state/agent-state 
  [/var/log/messages] 
  file = /var/log/messages 
  log_group_name = /var/log/messages 
  log_stream_name = {instance_id} 
  datetime_format = %b %d %H:%M:%S 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new Web tier Autoscaling Launch Configuration with UserData populated for installing Cloudwatch Logs agent:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create and save locally a file containing the UserData, for example /tmp/UserData.txt:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     #!/bin/bashcurl https://s3.amazonaws.com/awscloudwatch/downloads/latest/awslogs-agent-setup.py -Ochmod +x ./awslogs-agentsetup.py./awslogs-agent-setup.py -n -r us-east-1 -c s3://&amp;lt;s3_bucket_name&amp;gt;/&amp;lt;cloudwatch_agent_config_file&amp;gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Note: You can install the CloudWatch Logs agent by specifying the us-east-1, uswest-1, us-west-2, eu-west-1, eu-central-1, ap-southeast-1, ap-southeast-2, ap-northeast-1, or sa-east-1 regions.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; -- user-data file:///tmp/UserData.txt 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="EC2 New Instance CWL" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html"/>
          </references>
          <standards>
            <standard ref="5.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if the Cloudwatch Logs agent is installed through UserData in the Web tier Autoscaling Launch Configuration:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt;--query "LaunchConfigurations[*].UserData" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Output should be similar with:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    #!/bin/bash 
  &lt;/div&gt; 
  &lt;div&gt;
    curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -Ochmod +x ./awslogs-agent-setup.py ./awslogs-agent-setup.py -n -r us-east-1 -c s3://&amp;lt;s3_bucket_name&amp;gt;/&amp;lt;cloudwatch_agent_config_file&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T16:37:37.654">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.4" name="Integrate the CloudTrail logs into CloudWatch logs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>One way to work with cloudtrail logs is to send them to cloudwatch logs which allows you to
                        define metric filters for alerting and monitoring. This allows you to take immediate action if a
                        certain threshold has been met. Enabling this provides the opportunity to monitor for sensitive
                        account activity.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with cloudtrail update permission).&lt;/li&gt;
                        &lt;li&gt;Select Cloudtrail from the services list.&lt;/li&gt;
                        &lt;li&gt;Under All Buckets select the target bucket you want to check.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Properties&amp;quot; then &amp;quot;Trails&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click on each trail where no CloudWatch Logs are defined.&lt;/li&gt;
                        &lt;li&gt;Go to the &amp;quot;CloudWatch Logs&amp;quot; section and click on &amp;quot;Configure&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Define a new or select an existing log group and click &amp;quot;Continue&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Configure the IAM Role which will deliver CloudTrail events to CloudWatch Logs.&lt;/li&gt;
                        &lt;li&gt;Create/Select an IAM Role and Policy Name.&lt;/li&gt;
                        &lt;li&gt;Click Allow.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.4" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws cloudtrail get-trail-status --name &amp;lt;trail_name&amp;gt;
                            &lt;/blockquote&gt;Ensure the &amp;quot;LatestcloudwatchLogdDeliveryTime&amp;quot; property
                            is set to a recent time (ie within the latest day or so).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.1" name="Launch EC2 instances into a VPC" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACLs) and routing. However, the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is recommended to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure. &amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;&lt;li&gt;Select "Launch Instance".&lt;/li&gt;&lt;li&gt;Complete the wizard until step 3. At this point, ensure a VPC ID is selected for the "Network" option, choose an appropriate "Subnet" and "Auto-assign Public IP" option.&lt;/li&gt;&lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;NB: If you want to migrate an already running instance you will need to convert the image into an AMI and then launch a new instance using the AMI and placing in a VPC, as per the steps above&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;&lt;li&gt;Select "Instances" from the left hand menu.&lt;/li&gt;&lt;li&gt;For each instance in the list:&lt;ul&gt;&lt;li&gt;select the instance&lt;/li&gt;&lt;li&gt;in the preview pane confirm the instance has a "VPC ID". If a hyphen "-" is shown then your instance is running in EC2-Classic mode.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM7" name="Manage IAM users centrally via identity federation or AWS Organizations for multi-account environments" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provided via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Centralizing IAM user management to a single identity store reduces complexity and thus the likelihood of access management errors.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;The remediation procedure will vary based on the individual organization's implementation of identity federation and/or AWS Organizations with the acceptance criteria that no non-service IAM users, and non-root accounts, are present outside the account providing centralized IAM user management.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.21" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For multi-account AWS environments with an external identity provider...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Determine the master account for identity federation or IAM user management&lt;/li&gt;&lt;li&gt;Login to that account through the AWS Management Console&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click Identity providers&lt;/li&gt;&lt;li&gt;Verify the configuration&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Then..., determine all accounts that should not have local users present. For each account...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Determine all accounts that should not have local users present&lt;/li&gt;&lt;li&gt;Log into the AWS Management Console&lt;/li&gt;&lt;li&gt;Switch role into each identified account&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click Users&lt;/li&gt;&lt;li&gt;Confirm that no IAM users representing individuals are present&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For multi-account AWS environments implementing AWS Organizations without an external identity provider...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Determine all accounts that should not have local users present&lt;/li&gt;&lt;li&gt;Log into the AWS Management Console&lt;/li&gt;&lt;li&gt;Switch role into each identified account&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click Users&lt;/li&gt;&lt;li&gt;Confirm that no IAM users representing individuals are present&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T12:09:53.336">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.8" name="Reduce routing tables entries for VPC peering" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
  Being highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
  Remove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Via CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For each &amp;lt;route_table_id&amp;gt; containing routes non compliant with your routing policy (which grants more than desired ""least access""), delete the non compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;non_compliant_destination_CIDR&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;compliant_destination_CIDR&amp;gt; --vpc-peering-connection-id &amp;lt;peering_connection_id&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configurations with Specific Routes" url="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review routing tables of peered VPCs for whether they route
                            all subnets of each VPC and whether that is necessary to accomplish the intended purposes
                            for peering the VPCs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Via CLI:&lt;/b&gt;&lt;br /&gt;List all
                            the route tables from a VPC and check if &amp;quot;GatewayId&amp;quot; is pointing to a
                            &amp;lt;peering_connection_id&amp;gt; (e.g. pcx-1a2b3c4d) and if &amp;quot;DestinationCidrBlock&amp;quot;
                            is as specific as desired.&lt;br /&gt;
                            &lt;blockquote&gt;
                            aws ec2 describe-route-tables --filter &amp;quot;Name=vpc-id,Values=&amp;lt;vpc_id&amp;gt;&amp;quot;
                            --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,
                            AssociatedSubnets:Associations[*].SubnetId}&amp;quot;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Gov-1.2" name="Register a Security contact for your AWS account" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS will occasionally send security advisories and alerts to the account holder. By default this will go to the email address that the account is registered under. However if a security contact is specified these alerts will be sent here instead. Therefore this provides the means of ensuring these advisories are routed to the security team, especially if a distribution email address is used.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt; 
  &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Scroll down to &amp;quot;Alternate Contacts&amp;quot; section.&lt;/li&gt; 
  &lt;li&gt;Click on Edit.&lt;/li&gt; 
  &lt;li&gt;In the &amp;quot;Security&amp;quot; section complete the requested contact information.&lt;/li&gt; 
  &lt;li&gt;Click update when complete.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt;
                            &lt;li&gt;Click account name on the top right of the management console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Scroll down to &amp;quot;Alternate Contacts&amp;quot; section.&lt;/li&gt;
                            &lt;li&gt;Confirm whether a contact has been set for &amp;quot;Security&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM5" name="Remove expired SSL/TLS certificates stored in AWS IAM" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. You can use ACM or IAM to store and deploy server certificates. Use IAM as a certificate manager only when you must support HTTPS connections in a region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Removing expired SSL/TLS certificates eliminates the risk that an invalid certificate will be deployed accidentally to a resource such as AWS Elastic Load Balancer (ELB), which can damage the credibility of the application/website behind the ELB. As a best practice, it is recommended to delete expired certificates.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Removing expired certificates via AWS Management Console is not currently supported. To delete SSL/TLS certificates stored in IAM via the AWS API use the Command Line Interface (CLI).&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;To delete Expired Certificate run following command by replacing &amp;lt;CERTIFICATE_NAME&amp;gt; with the name of the certificate to delete:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam delete-server-certificate --server-certificate-name &amp;lt;CERTIFICATE_NAME&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;When the preceding command is successful, it does not return any output.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.19" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Getting the certificates expiration information via AWS Management Console is not currently supported. To request information about the SSL/TLS certificates stored in IAM via the AWS API use the Command Line Interface (CLI).&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Run list-server-certificates command to list all the IAM-stored server certificates:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-server-certificates&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should return an array that contains all the SSL/TLS certificates currently stored in IAM and their metadata (name, ID, expiration date, etc):&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;{ "ServerCertificateMetadataList": [ { "ServerCertificateId": "EHDGFRW7EJFYTE88D", "ServerCertificateName": "MyServerCertificate", "Expiration": "2018-07-10T23:59:59Z", "Path": "/", "Arn": "arn:aws:iam::012345678910:server-certificate/MySSLCertificate", "UploadDate": "2018-06-10T11:56:08Z" } ] }&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Verify the ServerCertificateName and Expiration parameter value (expiration date) for each SSL/TLS certificate returned by the list-server-certificates command and determine if there are any expired server certificates currently stored in AWS IAM. If so, use the AWS API to remove them. If this command returns:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;{ { "ServerCertificateMetadataList": [] }&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This means that there are no expired certificates, It DOES NOT mean that no certificates exist.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-04T11:49:18.744">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.2" name="Separate VPC into zones by function" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. It is recommended that resources be placed into VPC's according to use case (ie dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such resources accordingly ensures that a resource of a higher security level is not exposed by the security settings of a lower labeled VPC.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Identify the resources that exist within an incorrect VPC.&lt;/li&gt; 
  &lt;li&gt;Migrate or move them to the correct VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
   &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="API LOGGING AND AUDITING" name="API Logging and Auditing" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUDITABLE-CHANGES-AWS" name="Attackers make undetected and unaudited changes to system configurations" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                If audit trails are not properly protected, an attacker could gain access to the system,
                                modify the status of the resources or exfiltrate sensitive data without being noticed.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Logging-3.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.3" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.5" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.2" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.4" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.2" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.3" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.4" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.5" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.5" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="LOST-ACCESS-ROOT-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Gov-1.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="LOST-SECURITY-ALERTS">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Gov-1.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Gov-1.1" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Gov-1.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.5" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="AWS-IAM5" mitigation="10"/>
                    <countermeasure ref="AWS-IAM6" mitigation="10"/>
                    <countermeasure ref="AWS-IAM7" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="AWS-IAM2" mitigation="10"/>
                    <countermeasure ref="AWS-IAM3" mitigation="10"/>
                    <countermeasure ref="AWS-IAM4" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.9">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.9" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="LOST-SECURITY-ALERTS">
                  <countermeasures>
                    <countermeasure ref="AWS-IAM1" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-IAM1" mitigation="10"/>
                <countermeasure ref="AWS-IAM2" mitigation="10"/>
                <countermeasure ref="AWS-IAM3" mitigation="10"/>
                <countermeasure ref="AWS-IAM4" mitigation="10"/>
                <countermeasure ref="AWS-IAM5" mitigation="10"/>
                <countermeasure ref="AWS-IAM6" mitigation="10"/>
                <countermeasure ref="AWS-IAM7" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.9" mitigation="10"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EXPIRATION-DATE">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.11" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-1.21">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-1.21" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="12"/>
                    <countermeasure ref="Hydras-AWS-IAM-1.20" mitigation="8"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="8"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.8" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.1-2.2" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.3-2.4" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.5-2.6" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.7" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.8" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.10" mitigation="8"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="12"/>
                <countermeasure ref="Hydras-AWS-IAM-1.20" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-1.21" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.10" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.11" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.8" mitigation="8"/>
                <countermeasure ref="aws-tier-2.1-2.2" mitigation="8"/>
                <countermeasure ref="aws-tier-2.3-2.4" mitigation="8"/>
                <countermeasure ref="aws-tier-2.5-2.6" mitigation="8"/>
                <countermeasure ref="aws-tier-2.7" mitigation="8"/>
                <countermeasure ref="aws-tier-2.8" mitigation="8"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AWS RESOURCE LOGGING" name="AWS Resource Logging" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUDITABLE-CHANGES-RESOURCES-AWS" name="Attackers make undetected and unaudited changes in the resources" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                If audit trails in the resources are not enabled or not protected, attackers could gain
                                access to the system and modify or delete data from the resources and the changes are
                                not detected.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Logging-3.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.6" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="16"/>
                    <countermeasure ref="aws-tier-4.6" mitigation="16"/>
                    <countermeasure ref="aws-tier-4.7" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.9">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.6" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Logging-3.8" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="16"/>
                <countermeasure ref="aws-tier-4.6" mitigation="16"/>
                <countermeasure ref="aws-tier-4.7" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="CLOUDWATCH METRIC ALERTS" name="Cloudwatch Metric Alerts" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED_ACCESS_SYSTEMS_AWS" name="Attackers access to the systems without being detected" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers gain access to the systems and they are not detected and the changes of the
                                attackers could not be detected and audited.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Monitoring-4.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.2" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.3" mitigation="11"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.4" mitigation="11"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="11"/>
                    <countermeasure ref="aws-tier-4.8" mitigation="11"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.5">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.5" mitigation="11"/>
                  </countermeasures>
                </weakness>
                <weakness ref="cloudwatch-misconfig">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.4-5.5" mitigation="11"/>
                    <countermeasure ref="aws-tier-5.6-5.7" mitigation="11"/>
                    <countermeasure ref="aws-tier-5.8-5.9" mitigation="11"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Monitoring-4.2" mitigation="12"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.3" mitigation="11"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.4" mitigation="11"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.5" mitigation="11"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="11"/>
                <countermeasure ref="aws-tier-4.8" mitigation="11"/>
                <countermeasure ref="aws-tier-5.4-5.5" mitigation="11"/>
                <countermeasure ref="aws-tier-5.6-5.7" mitigation="11"/>
                <countermeasure ref="aws-tier-5.8-5.9" mitigation="11"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers gain undetected access to the security configurations and changes made by the attackers are undetected and unaudited.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Monitoring-4.10">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.10" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.6" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.8" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Monitoring-4.10" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.6" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.8" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-NETWORK-AWS" name="Sensitive data is compromised through undetected network access" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers gain undetected access to the network systems and the changes of the attackers
                                could not be audited or detected.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Monitoring-4.12">
                  <countermeasures>
                    <countermeasure ref="AWS-Monitoring-1" mitigation="16"/>
                    <countermeasure ref="AWS-Monitoring-2" mitigation="16"/>
                    <countermeasure ref="AWS-Monitoring-3" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.11" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.12" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.13" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-Monitoring-1" mitigation="16"/>
                <countermeasure ref="AWS-Monitoring-2" mitigation="16"/>
                <countermeasure ref="AWS-Monitoring-3" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.11" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.12" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.13" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="VIRTUAL PRIVATE CLOUD (VPC) NETWORK" name="Virtual Private Cloud (VPC) Network" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="AWS-Network-1" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-EC2-6.1" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                    <countermeasure ref="aws-tier-5.12" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-Network-1" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-EC2-6.1" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                <countermeasure ref="aws-tier-5.12" mitigation="16"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="55fa980c-c00e-4056-862d-57300676cb91" diagramComponentId="a229cf1d-1932-4008-8129-0f3fadbcaf0a" ref="e15202ae-5f02-40da-9421-ea54a583b7e6" name="RDS - Relational Database Service" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="rds">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="database-publically-accesible" name="Database is publically accesible" state="0" impact="100" issueId="" issueLink="">
          <desc>Everyone can access the RDS database and obtain the data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-07-28T01:29:25.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-04-06T06:35:45.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-notification-incident" name="No notification when an incident occurs" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no notifications when a security incident occurs. Therefore, we do not know when an
                        attacker gains access to our systems and/or security systems
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-access-control-onrds" name="Not access control on RDS databases" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no access control mechanisms on the RDS database resources and any user can gain access
                        to them and exfiltrate the data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="NOT_BACKUP_POLICIES" name="Not backup retention policies" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no data backup retention policies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-07-28T01:29:26.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-11T03:47:18.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-05-14T07:17:58.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-RDS-02" name="Assign to IAM roles the permissions for RDS instances" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The following AWS managed policies, which you can attach to users in your account, are
                        specific to Amazon RDS:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSReadOnlyAccess:&lt;/b&gt; Grants read-only access to all Amazon RDS
                        resources for the root AWS account.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;&lt;b&gt;AmazonRDSFullAccess:&lt;/b&gt; Grants full access to all Amazon RDS resources
                        for the root AWS account.&lt;/li&gt;
                        &lt;/ul&gt;You can also create custom IAM policies that allow users to access the required
                        Amazon RDS API actions and resources. You can attach these custom policies to the IAM users or
                        groups that require those permissions.
                        &lt;br /&gt;
                        &lt;br /&gt;The permissions above shall be assigned to roles or groups:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The roles or groups only do calls to the API to get information, the
                        AmazonRDSReadOnlyAccess permission shall be assigned.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The roles or groups who are responsible of managing the RDS instances shall be
                        assigned the AmazonRDSFullAccess permission.&lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Review the IAM roles and groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that all roles or groups have got the AmazonRDSReadOnlyAccess permission.&lt;/li&gt;
                            &lt;li&gt;Check that only the appropriate personnel have got AmazonRDSFullAccess permissions
                            to manage the RDS instances.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.34" name="Configure RDS database to leverage the Data Tier Security Group" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt; 
  Customers can deploy RDS databases within a VPC through the configuration of: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.&lt;/li&gt; 
  &lt;li&gt;Network access through configuration of Security Groups for RDS&lt;/li&gt; 
  &lt;li&gt;Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address&lt;/li&gt; 
  &lt;li&gt;Network access to the managed Data-Tier must be tightly controlled using Security Groups for RDS and non local accessibility of the DB instance.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each non-compliant DB instance, and configure it to use the Data Tier Security Group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --vpc-security-group-ids &amp;lt;data_tier_security_group&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="6.34" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are configured to use the Data Tier
                            Security Group:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{VpcSecurityGroups:VpcSecurityGroups,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.30" name="Do not allow the  RDS database to be publically accessible" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt;Customers can deploy RDS databases within a VPC through the configuration of: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Subnet Group for RDS, this group will be used for deployment of single or Multi-AZ RDS instances.&lt;/li&gt; 
  &lt;li&gt;Network access through configuration of Security Groups for RDS&lt;/li&gt; 
  &lt;li&gt;Access from outside the VPC hosting the DB instance by enabling/disabling a Public IP address&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each publicly accessible DB instance, and make it private:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --no-publicly-accessible 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="6.30" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are publicly available:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{PubliclyAccessible:PubliclyAccessible,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.6" name="Enable Auto Minor Version Upgrade on RDS" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair.&lt;/p&gt; 
&lt;p&gt;There are 6 database engines available for customers to run their database workloads on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
 &lt;li&gt;MySQL&lt;/li&gt; 
 &lt;li&gt;MariaDB&lt;/li&gt; 
 &lt;li&gt;Oracle&lt;/li&gt; 
 &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
 &lt;li&gt;PostgreSQL&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If the database engine used by your application supports it, ensure that the RDS Instances have Auto Minor Version Upgrade Enabled.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/p&gt; 
&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modify each DB instance with auto-minor-version-upgrade set to False, and enable auto-minor-version-upgrade:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --auto-minor-version-upgrade&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances have Auto Minor Version Upgrade enabled:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{AutoMinorVersionUpgrade:AutoMinorVersionUpgrade,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.4" name="Enable encryption at rest for Databases running on RDS" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon RDS instances and snapshots can be encrypted at rest by enabling the encryption option on the Amazon RDS DB instance. Data that is encrypted at rest includes the underlying storage for a DB instance, its automated backups, read replicas, and snapshots. Encryption at rest should be enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Perform a snapshot of the DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds create-db-snapshot --db-snapshot-identifier db_snapshot --db-instance-identifier your_db_instance 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Confirm created snapshot is available (once snapshot process has completed):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-snapshots --query 'DBSnapshots[*].{DBSnapshotIdentifier:DBSnapshotIdentifier, DBInstanceIdentifier:DBInstanceIdentifier, Snapshotstatus:Status}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all KMS Customer Managed Keys:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws kms list-aliases 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Copy to source RDS snapshot (from previous step) to a destination snapshot which will be encrypted:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt;
   aws rds copy-db-snapshot --source-db-snapshot-identifier db_snapshot&amp;nbsp; --target-db-snapshot-identifier encrypted_db_snapshot --kms-key-id data_tier_kms_key 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Restore a snapshot to the target DB instance(from previous step) with the same values as original db instance with additional encrypted storage values:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds restore-db-instance-from-db-snapshot --db-instance-identifier your_db_instance --db-snapshot-identifier encrypted_db_snapshot 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: copy db snapshot" url="https://docs.aws.amazon.com/cli/latest/reference/rds/copy-db-snapshot.html"/>
            <reference name="Amazon docs: copy snapshot" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html"/>
            <reference name="Amazon docs: create db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-instance.html"/>
            <reference name="Amazon docs: create db snapshots" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-db-snapshot.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe db snapshots" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-snapshots.html"/>
            <reference name="Amazon docs: encryption" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.3.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all current RDS instances and review the encryption status of the DB
                            instance:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws rds describe-db-instances --query 'DBInstances[*].{DBName:DBName,
                            EncryptionEnabled:StorageEncrypted, CMK:KmsKeyId}'
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.4" name="Enable event subscriptions for DataBase security on RDS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS Relational Database Services offers customers a managed database engine solution
                        for hosting customer created databases which can allow for a reduction in operational burden on
                        customers.&lt;/p&gt;
                        &lt;p&gt;RDS event subscriptions provide notification of selected event changes at a DB security
                        group level.&lt;/p&gt;
                        &lt;p&gt;Event subscriptions are designed to provide incident notification of events which may
                        affect the network availability of the RDS instance.&lt;/p&gt;
                        &lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;/p&gt;
                        &lt;p&gt;Using the Amazon unified CLI:&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a new event subscription for DB Security Group events:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;aws rds create-event-subscription --subscription-name rds_event_subscription
                        --sns-topic-arn
                        sns_topic_arn
                        --source-type db-security-group --event-categories rds_events
                        --source-ids events_source_ids --enabled&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified CLI:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all present event subscriptions and review the value of &amp;quot;db-security-group&amp;quot;
                            associated with &amp;quot;SourceType&amp;quot; element:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-event-subscriptions --query
                            'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
                            EventCategoriesList:EventCategoriesList}'
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &amp;quot;EventCategoriesList&amp;quot; will list all event categories which will be
                            reported on
                            &lt;/div&gt;
                            &lt;div&gt;
                            &amp;quot;SourceIdsList&amp;quot; will list all RDS DB instances included (null=all
                            instances)
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.3" name="Enable Event subscriptions for Instance level events on RDS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  AWS Relational Database Services offers customers a managed database engine solution for hosting customer created databases which can allow for a reduction in operational burden on customers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  RDS event subscriptions provide notification of selected event changes at DataBase engine level such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Deletion&lt;/li&gt; 
  &lt;li&gt;Failure&lt;/li&gt; 
  &lt;li&gt;Failover&lt;/li&gt; 
  &lt;li&gt;Low Storage&lt;/li&gt; 
  &lt;li&gt;Maintenance&lt;/li&gt; 
 &lt;/ul&gt; 
  Event subscriptions are designed to provide incident notification of events which may affect the availability of a RDS database instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a new event subscription for DB instance level events:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds create-event-subscription --subscription-name &amp;lt;rds_event_subscription&amp;gt; --sns-topic-arn sns_topic_arn --source-type &amp;lt;db-instance&amp;gt; --event-categories &amp;lt;rds_events&amp;gt; --source-ids &amp;lt;events_source_ids&amp;gt; --enabled 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create event subscription" url="https://docs.aws.amazon.com/cli/latest/reference/rds/create-event-subscription.html"/>
            <reference name="Amazon docs: describe event subcriptions" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-event-subscriptions.html"/>
            <reference name="Amazon docs: user event messages" url="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html#USER_Events.Messages"/>
          </references>
          <standards>
            <standard ref="4.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified CLI:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all present event subscriptions and review the value of &amp;quot;db-instance&amp;quot;
                            associated with &amp;quot;SourceType&amp;quot; element:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-event-subscriptions --query
                            'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,
                            EventCategoriesList:EventCategoriesList}'
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &amp;quot;EventCategoriesList&amp;quot; will list all event categories which will be
                            reported on
                            &lt;/div&gt;
                            &lt;div&gt;
                            &amp;quot;SourceIdsList&amp;quot; will list all RDS DB instances included (null=all
                            instances)
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.5" name="Enable Multi-AZ on RDS" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Provides AWS managed high availability of the Database Tier across 2 availability zones within a region through asynchronous replication at the data layer. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each no-multi-az DB instance, and make it Multi-AZ enabled:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --multi-az 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances are Multi-AZ enabled:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{MultiAZ:MultiAZ,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.8" name="Set Backup retention policy on RDS" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Amazon Relational Database Service (RDS) is a managed relational database service which handles routine database tasks such as provisioning, patching, backup, recovery, failure detection, and repair. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  There are 6 database engines available for customer to run their database workloads on: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Aurora (MySQL Compatible)&lt;/li&gt; 
  &lt;li&gt;MySQL&lt;/li&gt; 
  &lt;li&gt;MariaDB&lt;/li&gt; 
  &lt;li&gt;Oracle&lt;/li&gt; 
  &lt;li&gt;Microsoft SQL Server&lt;/li&gt; 
  &lt;li&gt;PostgreSQL&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Provides a managed backup function of the RDS Database, it is possible to define the backup window and retention period of the backup. Each customer should have a retention policy set for the type of data being stored. It is recommended to set this to at least 7. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Possible values are from 0 to 35 days. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify each DB instance with a Backup Retention Period of 0, and set a desired Backup Retention Period in days (recommended value = 7):&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws rds modify-db-instance --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --backup-retention-period &amp;lt;backup_retention_period&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: modify db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/modify-db-instance.html"/>
          </references>
          <standards>
            <standard ref="3.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check if your application DB instances have a Backup Retention Period set (0 =
                            there is no backup retention in place, 7 = there are 7 daily backups retained):&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws rds describe-db-instances --filters Name=tag:data_tier_tag,Values=data_tier_tag_value
                            --query &amp;quot;DBInstances[*].{BackupRetentionPeriod:BackupRetentionPeriod,
                            DBInstanceIdentifier:DBInstanceIdentifier}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-RDS-01" name="Use SSL to Encrypt the connection to a DB Instance" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Use SSL from your application to encrypt a connection to a DB instance running MySQL, MariaDB,
                        Amazon Aurora, SQL Server, Oracle, or PostgreSQL. Each DB engine has its own process for
                        implementing SSL. To learn how to implement SSL for your particular DB instance, please see link
                        provided in &amp;quot;References&amp;quot; section.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the SSL protocol is used to encrypt the data in transit.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-RDS-02" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-RDS-02" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.5" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="database-publically-accesible">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.30" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="no-access-control-onrds">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.34" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.5" mitigation="34"/>
                <countermeasure ref="aws-tier-6.30" mitigation="33"/>
                <countermeasure ref="aws-tier-6.34" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers gain undetected access to the security configurations and changes made by the attackers are undetected and unaudited.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="no-notification-incident">
                  <countermeasures>
                    <countermeasure ref="aws-tier-4.3" mitigation="50"/>
                    <countermeasure ref="aws-tier-4.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-4.3" mitigation="50"/>
                <countermeasure ref="aws-tier-4.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="NOT_BACKUP_POLICIES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.8" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-RDS-01" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-RDS-01" mitigation="50"/>
                <countermeasure ref="aws-tier-1.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="7a3eac7b-ef97-4f6b-9e1f-1bea8d6d4770" diagramComponentId="18803ba8-20bb-4d6f-8076-5bfa47f6bf4a" ref="70182474-b645-4d70-b549-49de806df894" name="Web Client" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="web-client">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-798, CWE-603" name="Client side code stores secret keys, sensitive business logic or other proprietary information" state="0" impact="100" issueId="" issueLink="">
          <desc>When client side code is fully controlled by the user, a malicious user may be able to read the code or reverse engineer it if it is compiled in any form. If the client side code includes secret keys, sensitive business logic (like client authentication) or proprietary information, all of this is directly exposed to the user, allowing them to get the sensitive information or study the business logic with the aim of bypassing it.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Some examples of this vulnerability are:&amp;nbsp; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Performing an authentication on the client side without server side validation.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Making privileged calls from the client based solely on client side conditions (i.e. a cash check on the client side to place an order on an e-commerce platform).&lt;/li&gt; 
   &lt;li&gt;&amp;nbsp;Hard-coding keys and secrets on the client side to make client-to-client calls without a proxy.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:46.000">
              <output/>
            </source>
            <references>
              <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="https://cwe.mitre.org/data/definitions/602.html"/>
              <reference name="CWE-603: Use of client-side Authentication" url="https://cwe.mitre.org/data/definitions/603.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-05-29T09:15:58.413">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-05-30T14:52:04.610">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-477" name="Use of Obsolete Function" state="0" impact="75" issueId="" issueLink="">
          <desc>The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.
&lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T09:48:50.678">
              <output/>
            </source>
            <references>
              <reference name="CWE-477: Use of Obsolete Function" url="https://cwe.mitre.org/data/definitions/477.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-05-29T09:16:01.113">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jwilliams@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and server, terminating within a secure environment on the server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-low-baseline" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.133">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="INS-CLIENT" name="Ensure the application does not use unsupported, insecure, or deprecated client-side technologies" issueId="" issueLink="" platform="" cost="0" risk="60" state="Recommended" owner="jwilliams@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure the application does not use unsupported, insecure, or deprecated client-side technologies such as: NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
 &lt;li&gt;Test the presence of any client side applet such as Flash, ActiveX and Silverlight.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T10:10:41.554">
              <output/>
            </source>
            <references>
              <reference name="Testing Information Gathering" url="https://www.owasp.org/index.php/Testing_Information_Gathering"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CS-CLIENT-SECRET" name="Implement sensitive logic and data validation on the server-side" issueId="" issueLink="" platform="" cost="1" risk="73" state="Recommended" owner="jwilliams@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data and functionalities on the client-side must be considered tainted and subject to manipulation by a malicious actor, regardless of the controls in place (e.g. encryption or obfuscation of client-side code or content). &lt;/p&gt; This includes application logic decisions, such as access controls, and data considered sensitive or secret, such as encryption keys. While controls may be duplicated on the client-side to improve the user experience, it is important to have these enforced on the server-side.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Business logic, in particular access controls, must be implemented on the server-side.&lt;/li&gt; 
  &lt;li&gt;Secret data should be stored on the server-side, and only what is explicitly required should be duplicated on the client-side.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;All data provided from the client-side (even from binary clients) should be considered tainted, and security decisions should not be made solely on this data. For example, an insecure implementation could include a compiled application (e.g. Flash!) performing authentication on the client-side against a stored password. The decompilation of the binary (in this case flv file) or the interception and modification of controls between the client and server could expose the password or allow unauthorized access to the authenticated application content. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-low-baseline" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify where critical decisions are made on the application. Key areas include:&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;authentication&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;input validation&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;access to resources&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;state bypasses&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Ensure those decisions are made or validated on the server side, particularly where client-side controls are implemented.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that sensitive data passed to the client side is appropriate, and ensure no inappropriate data is stored or hard-coded into client-side components, for example&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Personally Identifiable Information.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Financial data, in particular cardholder data (as defined by the &lt;span class="caps"&gt;PCI&lt;/span&gt; Council).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Application secrets - such as symmetric encryption keys or passwords.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:46.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-CLIENT-SECRET" name="Review code, configuration, and online repositories for secrets and sensitive information systemically" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jwilliams@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secret or sensitive information should not be exposed in source-code or client-side software.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Code and online repositories must not contain secrets or sensitive information.&lt;/li&gt;&lt;li&gt;Configuration files on the client- and server-side must not contain hard-coded credentials or other sensitive data.&lt;/li&gt;&lt;li&gt;Online repositories, services, and other associated restricted content must have appropriate access controls in place.&lt;/li&gt;&lt;li&gt;Where sensitive information must be stored on the server side, it should be in memory for transient data, or encrypted if persistent. &amp;nbsp;Depending on the use case, this encryption may be asymmetric or public key, or symmetric using a shared secret. Note however that reversible encryption on the client-side and in-memory storage are still susceptible to client-side attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Use automated tools to regularly search for keywords or regular expression patterns within the code, configuration and other files exposed on the client and server-side, and any remote repositories.&lt;/li&gt;&lt;li&gt;The scanning process must be triggered before the code is published (in particular for public/open source code) as once published it is likely to be archived (and any disclosed secrets would be exposed and/or have to be changed)&lt;/li&gt;&lt;li&gt;Review criteria and requirements for any temporary or persistent storage of sensitive or secret data on the client-side, and the protections in place.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T17:54:26.128">
              <output/>
            </source>
            <references>
              <reference name="Microsoft Exchange 2016 Sensitive Information Patterns" url="https://technet.microsoft.com/en-us/library/jj150541(v=exchg.160).aspx"/>
              <reference name="Prevents you from committing secrets and credentials into git repositories" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Seekret" url="https://github.com/apuigsech/seekret"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="jwilliams@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:53:45.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jwilliams@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), should be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
&lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity that issues security tokens or electronic credentials to subscribers. A CSP forms part of an authentication system, most typically identified as a separate entity in a Federated authentication system. A CSP may be an independent third party, or may issue credentials for its own use. Credential Service Provider is typically also the Identity Provider (IDP). An example of a CSP would be an online site whose primary purpose may be, for example, internet banking - but whose users may be subsequently authenticated to other sites, applications or services without further action on their part.&lt;/p&gt;
&lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
&lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying the claimant's possession and control of one or two authenticators, using an authentication protocol.&lt;/p&gt;
&lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically to process a transaction or grant access to information or a system.&lt;/p&gt;
&lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and identity proofing.&lt;/p&gt;
&lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more authentication protocols.&lt;/p&gt;
&lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-30T08:44:22.165">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-295-CLIENT" name="Validate the certificate presented by the server" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jwilliams@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Certificates presented by the server must be valid, provable, and cryptographically secure in order to derive the benefits of TLS encrypted communications.&amp;nbsp; Invalid certificates expose the application and its users to spoofing attacks such as Man In The Middle (MITM) where data may be intercepted or redirected to a malicious site, and undermine confidence in the site.&lt;/p&gt;&lt;p&gt;Validate the certificate presented by the server is signed by a trusted Certificate Authority.&lt;/p&gt;&lt;p&gt;Ensure the certificate chain of trust is legitimate and secure.&lt;/p&gt;&lt;p&gt;Verify cryptographically secure ciphers are in use throughout the chain, in particular strong hashing algorithms for certificate signatures.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-11 Trusted Path" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/71-08_02_SC-11"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
          </references>
          <standards>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify the client is conducting appropriate checks and receives a positive response regarding the validity and quality of the site certificate.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the server certificate, and those in the trust chain.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:13.775">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-327" name="Validate the TLS implementation in use" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jwilliams@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There are a number of established open- and closed- source TLS implementations in use, which have undergone extensive review and testing by the developers, as well as third-parties in the development, security, and cryptography space. Typically, these widely used implementations have a lower risk of exploitation compared with privately developed - or less known - implementations (although vulnerabilities such as Heartbleed highlight this is not universally true) due to this additional scrutiny scrutiny.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify the TLS and other cryptographic libraries, implementations, and technologies in use.&lt;/li&gt;&lt;li&gt;Verify the veracity of the implementations, and review third party validations together with security advisories or best-practices relating to them.&lt;/li&gt;&lt;li&gt;Some well-known TLS libraries are NSS from Mozilla, and OpenSSL.&lt;/li&gt;&lt;li&gt;Where an unknown or unproven implementation is in use, consider use of an established option.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm the TLS layer in use is a secure, stable, release of a publicly published implementation that has been subject to expert analysis and review.&lt;ul&gt;&lt;li&gt;If not, assurance of the security of the implementation should be sought, or the risk quantified.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that a client connecting to the server will only be able to negotiate cryptographically strong, secure ciphers.&lt;/li&gt;&lt;li&gt;Confirm that a client can not downgrade to a weaker cipher after initial negotiation.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the TLS/SSL ciphers, protocols, and security mechanisms.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T10:05:11.074">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="CSD-CLIENT-SECRET" name="Attackers gain unauthorised access to data or services by accessing a client side secret" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="CS-Default" editable="true">
              <desc>Secrets stored in any client side components, such as a mobile application, thick
                                client application or in JavaScript used by a browser, can be accessed by
                                users/attackers who have access to this client.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Attackers could then gain access to the data or services that are protected by this
                                secret, if no other credentials are required.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-798, CWE-603">
                  <countermeasures>
                    <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="DEP-CLIENT-TECH" name="Attackers gain unauthorised access to the application by the use of deprecated client-side technologies" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  As programming languages evolve, functions occasionally become obsolete due to:
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;Advances in the language.&lt;/li&gt;
 &lt;li&gt;Improved understanding of how operations should be performed effectively and securely.&lt;/li&gt;
 &lt;li&gt;Changes in the conventions that govern certain operations. &lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-477">
                  <countermeasures>
                    <countermeasure ref="INS-CLIENT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="INS-CLIENT" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed to the other component as if it were never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="CWE-327" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                <countermeasure ref="CWE-327" mitigation="25"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ec9feff8-7988-4fe1-8172-70474a092c50" diagramComponentId="6c3f0143-6bac-4a84-8eee-65e286cad50d" ref="0fa9a18c-d40a-4122-a2bd-4f71817ea7ab" name="Lambda Function" desc="" library="aws-lambda" parentComponentRef="" componentDefinitionRef="aws-lambda-function">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-VPC-IP-ADDRESS-DEPLETION-WEAKNESS" name="AWS VPC IP address depletion" state="0" impact="100" issueId="" issueLink="">
          <desc>Organizations that deploy AWS Lambda functions in VPC (Virtual Private Cloud) environments should also pay attention to the potential exhaustion of IP addresses in the VPC subnet.  
 An attacker might cause a denial of service scenario by forcing more and more function instances to execute, and deplete the VPC subnet from available IP addresses.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W10" name="All Lambda functions have the same permissions" state="0" impact="100" issueId="" issueLink="">
          <desc>Setting of permissions is done at the function level. Because there could be many functions, the job of configuring permissions on each one is all too often ignored or forgotten, leading to security weak spots.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-592" name="Authentication Bypass Issues" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not properly perform authentication, allowing it to be bypassed through various methods.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:17.353">
              <output/>
            </source>
            <references>
              <reference name="CWE-592: Authentication Bypass Issues" url="https://cwe.mitre.org/data/definitions/592.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W12" name="Containers aren't monitored" state="0" impact="100" issueId="" issueLink="">
          <desc>Monitoring is needed to understand the relationships between all of the objects across a virtual environment's topology, recognize the difference between inconsequential anomalies and actual performance problems. This will show you the root cause and recommended actions for remediation. This way, you can understand what needs your attention, and how to narrow a problem to the relevant components.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W4" name="Data in transit is sent using a weak encryption algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>When the SSL/TLS service is present this is good but does introduce complexities that must be overcome:&amp;nbsp; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;SSL/TLS protocols, ciphers, keys and renegotiation must be properly configured.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Certificate validity must be ensured.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W3" name="Data in transit was sent via an unencrypted protocol" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data must be protected when it is transmitted through the network. Currently the security best practice is to send any data over an encrypted channel. As a rule of thumb if data must be protected when it is stored, this data must also be protected during transmission.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Some examples of sensitive data include:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Information used in authentication (e.g. Credentials, PINs, Session identifiers, Tokens, Cookies...)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Information protected by laws, regulations or specific organizational policy (e.g. Credit Cards, Customers data)&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W20" name="DynamoDB APIs are vulnerable to XSS" state="0" impact="100" issueId="" issueLink="">
          <desc>DynamoDB is a NoSQL database and as such is schemaless. NoSQL databases provide looser consistency restrictions than traditional SQL databases. By requiring fewer relational constraints and consistency checks, NoSQL databases often offer performance and scaling benefits. Yet these databases are still potentially vulnerable to injection attacks, even if they aren't using the traditional SQL syntax.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W8" name="Environment variables are not stored securely" state="0" impact="100" issueId="" issueLink="">
          <desc>Environment variables were stored in plain text configuration files and stored in the code repository</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W15" name="Functions consume too much memory" state="0" impact="100" issueId="" issueLink="">
          <desc>Default limits and poor configuration can lead to successful DDoS attacks.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W16" name="Functions don't have a rate limit or aren't throttled" state="0" impact="100" issueId="" issueLink="">
          <desc>An attacker can try to freeze the system with huge amounts of requests. 
 If your concurrency limits are set and high, an attacker can still execute a lot of requests and it will cost you a lot of money. It's important to set some limits on services or functions.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W14" name="Functions have poor concurrency limits" state="0" impact="100" issueId="" issueLink="">
          <desc>If your concurrency limits are too small, scaling will not be as flexible as you would like. If your concurrency limits are too high, DoS could be a problem.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W17" name="Functions take too long to execute" state="0" impact="100" issueId="" issueLink="">
          <desc>The function is taken too long to execute. This could be because the function is doing too much or recursive patterns are used.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W13" name="Functions use vulnerable dependencies" state="0" impact="100" issueId="" issueLink="">
          <desc>Dependency management is a widespread problem in development. Developers may be unaware that third-party libraries or frameworks can contain vulnerabilities and those vulnerabilities are being constantly detected.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T13:08:23.410">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-841" name="Improper Enforcement of Behavioral Workflow" state="0" impact="100" issueId="" issueLink="">
          <desc>The software supports a session in which more than one behavior
                        must be performed by an actor, but it does not properly ensure that the actor
                        performs the behaviors in the required sequence.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T10:02:51.060">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W22" name="Messages exposed to end users reveal information about serverless functions and the logic used" state="0" impact="100" issueId="" issueLink="">
          <desc>Messages to end users must only contain general information and not leak data relating to software implementation or the underlying technology.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W19" name="No validation for asynchronous events" state="0" impact="100" issueId="" issueLink="">
          <desc>Lambda can handle several different event types that can trigger a serverless function. These event types don't necessarily need to be HTTP requests (e.g. S3, SNS, SES, CloudWatch Events, etc.). This increases the potential attack surface and introduces complexities to secure the serverless functions.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W1" name="Sensitive stored information was not encrypted at rest" state="0" impact="100" issueId="" issueLink="">
          <desc>Because sensitive information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is used and decode the information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W2" name="The Data Store is directly exposed to the internet" state="0" impact="100" issueId="" issueLink="">
          <desc>Data Stores are accessible by the public internet with no - or weak - authentication.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W11" name="The container has processes, pieces of code or temporary files lingering around" state="0" impact="100" issueId="" issueLink="">
          <desc>Container lifetime is important, but also the correct execution and cleanup of your functions. If the container has lingering temporary files or - for example - static data in memory, an attacker could steal this information and leverage it for building a more destructive attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W9" name="The function takes untrusted input" state="0" impact="100" issueId="" issueLink="">
          <desc>Developers should avoid writing code that passes user-controlled input to dangerous functions. This is one of the basics of secure programming. Whenever a function has the capability to execute a dangerous action, it should either not receive user input, or the user-controlled data should be sanitized in order to prevent a malicious user from breaking the intended functionality.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W18" name="The retry mechanism of asynchronous sources are not configured correctly" state="0" impact="100" issueId="" issueLink="">
          <desc>Asynchronous events (e.g. S3, SNS, SES, CloudWatch Events, etc.) uses queues before invoking, so retry behavior must be taken in account.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W6" name="Unused functions are more risk from a security standpoint as they are often not maintained" state="0" impact="100" issueId="" issueLink="">
          <desc>Unused functions are mostly unmaintained. Therefore code may not be regularly reviewed. And because the code isn't under your attention, this can impose a security risk, especially if the functionality of your application changes over time.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W5" name="Unused functions have vulnerable dependencies because they were never updated" state="0" impact="100" issueId="" issueLink="">
          <desc>Unused functions remain mostly unpatched. So if dependencies have vulnerabilities, this might not catch your attention and could create a security weak point.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W21" name="Verbose error messages are left in the code and are not removed before moving to production" state="0" impact="100" issueId="" issueLink="">
          <desc>Error messages or debugging information must be removed before moving to the production/release branch. This type of information gives an attacker additional insight on the internal working of the application/functions and on the technology used.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W7" name="Your AWS credentials were stored in a code repositories such as GitHub" state="0" impact="100" issueId="" issueLink="">
          <desc>Monitoring is needed to understand the relationships between all of the objects across a virtual environment's topology and recognize the difference between inconsequential anomalies and actual performance problems. 
 This will identify root causes and recommended actions for remediation. This way, you can understand what needs your attention, and how to narrow down a problem to the relevant components.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards>
            <standard ref="1.22" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.8" name="Apply RBAC with pre-defined policies added into groups or roles" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Instead of defining permissions for individual IAM users, it's usually more convenient to create groups that relate to job functions (administrators, developers, accounting, etc.), define the relevant permissions for each group, and then assign IAM users to those groups. All the users in an IAM group inherit the permissions assigned to the group. That way, you can make changes for everyone in a group in just one place. As people move around in your company, you can simply change what IAM group their IAM user belongs to. This method is know as Role Based Access Control (RBAC). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;Remove privilege granted directly to a user: 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Click on Users.&lt;/li&gt; 
  &lt;li&gt;For each user complete the following:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Select the user.&lt;/li&gt; 
   &lt;li&gt;Click on the Permissions tab.&lt;/li&gt; 
   &lt;li&gt;Expand &amp;quot;Managed Policies&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Click &amp;quot;Detach Policy&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Expand &amp;quot;Inline Policies&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Click &amp;quot;Remove Policy&amp;quot;.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ol&gt;Create a Group and add a user: 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Select Groups and click Create New Group.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Group Name box, type the name of the group and click Next Step.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the list of policies, select the check box for each policy that you want to apply to all members of the group. Click Next Step.&lt;/li&gt; 
  &lt;li&gt;Click Create Group.&lt;/li&gt; 
  &lt;li&gt;Click the new Group and select the &amp;quot;Users&amp;quot; tab.&lt;/li&gt; 
  &lt;li&gt;Click &amp;quot;Add Users to Group&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Select the users and click &amp;quot;Add Users&amp;quot;.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.15" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain a list of IAM users by: aws iam list-users --query 'Users[*].UserName'
                            --output text&lt;/li&gt;
                            &lt;li&gt;Run the following to determine if they have policies directly attached:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws iam list-attached-user-policies --user-name user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws iam list-user-policies --user-name user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C20" name="Change the default memory usage to the amount of memory the function really needs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Specify the amount of memory you want to allocate for your Lambda function. CloudWatch logs can contain memory usage on each function execution. Set the default memory usage to the amount of memory that the function really needs. By default, it set to of 1024 MB.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Update the memory size of your functions using the following AWS CLI command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda update-function-configuration --function-name myfunction --memory-size 256&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;In the example, we change the amount memory for the function to 256 MB.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Limits" url="https://docs.aws.amazon.com/lambda/latest/dg/limits.html"/>
            <reference name="Best practices for AWS Lambda timeouts" url="https://epsagon.com/development/best-practices-for-aws-lambda-timeouts/"/>
            <reference name="Function configuration" url="https://docs.aws.amazon.com/lambda/latest/dg/resource-model.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the AWS Lambda console at https://console.aws.amazon.com/lambda/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Choose a function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Settings are on the first page shown.&lt;/li&gt; 
 &lt;li&gt;Check that each function has got the really necessary amount of memory.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C26" name="Configurate the retry settings of asynchronous sources" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Any Lambda function invoked asynchronously is retried twice before the event is discarded. If the retries fail and you're unsure why, use Dead Letter Queues (DLQ) to direct unprocessed events to an Amazon SQS queue or an Amazon SNS topic to analyze the failure.&lt;/p&gt; 
&lt;p&gt;AWS Lambda directs events that cannot be processed to the specified Amazon SNS topic or Amazon SQS queue. Functions that don't specify a DLQ will discard events after they have exhausted their retries. For more information about retry policies, see AWS Lambda Retry Behavior.&lt;/p&gt; 
&lt;p&gt;You configure a DLQ by specifying the Amazon Resource Name TargetArn value on the Lambda function's DeadLetterConfig parameter.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Update the timeout of your functions using the following AWS CLI command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda update-function-configuration --function-name myfunction --dead-letter-config (structure)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see Dead Letter Queues in the references.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; Shorthand Syntax:&lt;/p&gt; 
 &lt;p&gt; TargetArn=string&lt;/p&gt; 
 &lt;p&gt; JSON Syntax:&lt;/p&gt; 
 &lt;p&gt;{ "TargetArn": "string"&lt;/p&gt; 
 &lt;p&gt; }&lt;/p&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Retry Behavior" url="https://docs.aws.amazon.com/lambda/latest/dg/retries-on-errors.html"/>
            <reference name="AWS Lambda update function configuration" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/update-function-configuration.html"/>
            <reference name="Dead Letter Queue" url="https://docs.aws.amazon.com/lambda/latest/dg/dlq.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use AWS CLI and use the following command to view the timeout limit per function:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws lambda get-function --function-name function-name&amp;nbsp;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check all function and verify that they have got set a well the timeout limit.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C12" name="Configure IAM Role statements on a per-function basis" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You should spend time crafting suitable, minimal roles for each of your functions. This leverages the principle of least privilege. If you are using the API Gateway, you can also set Lambda authorizers. A Lambda function should do one specific task, so ensure the following model is followed: One function, one use case, one permission.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;b&gt; Remediation: &lt;br /&gt;&lt;/b&gt; UsingAWSConsole: &lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Login to theAWSManagement Console.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Navigate to the Lambda dashboard at https://console.aws.amazon.com/lambda/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the navigation panel, underAWSLambda section, choose Functions.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Choose the Lambda function that you want to examine then click on the function name to access its configuration page.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Select the Configuration tab then click the Execution role to expand the panel with theIAMrole that defines the permissions for the selected function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Copy the name of theIAMexecution role currently available in the Existing role drop-down list.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Now navigate to theIAMdashboard at https://console.aws.amazon.com/iam/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the left navigation panel, choose Roles.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Paste the name of the execution role copied at step no. 6 in the Search box and press Enter.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Click on the AmazonIAMexecution role returned as the result.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;On theIAMrole configuration page, select the Permissions tab from the bottom panel.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Click on the attachedIAMpolicy name available within Policy name column to access the policy document (JSONformat).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Include inside the {}JSONpanel, the policy document defined for the selectedIAMexecution role.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Add the Action and Resource elements&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;and their current values, if the element values are set to "*"&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;and the Effect is set to "Allow",the selected Amazon Lambda function has admin privileges (we have to restrict the admin privileges in the Amazon Lambda function)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Repeat step no. 12 and 13 to add otherIAMpolicies attached to the selected execution role.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Repeat steps no. 4 - 16 to add theIAMexecution role permissions for other Amazon Lambda functions created within the current region.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Change theAWSregion from the navigation bar and repeat the process for the other regions.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;UsingAWSConsole:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Login to theAWSManagement Console.&lt;/li&gt; 
 &lt;li&gt;Navigate to the Lambda dashboard at https://console.aws.amazon.com/lambda/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the navigation panel, underAWSLambda section, choose Functions.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Choose the Lambda function that you want to examine then click on the function name to access its configuration page.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Select the Configuration tab then click the Execution role to expand the panel with theIAMrole that defines the permissions for the selected function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Copy the name of theIAMexecution role currently available in the Existing role drop-down list.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Now navigate to theIAMdashboard at https://console.aws.amazon.com/iam/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the left navigation panel, choose Roles.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Paste the name of the execution role copied at step no. 6 in the Search box and press Enter.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Click on the AmazonIAMexecution role returned as the result.&lt;/li&gt; 
 &lt;li&gt;On theIAMrole configuration page, select the Permissions tab from the bottom panel.&lt;/li&gt; 
 &lt;li&gt;Click on the attachedIAMpolicy name available within Policy name column to access the policy document (JSONformat).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Inside the {}JSONpanel, verify the policy document defined for the selectedIAMexecution role. Identify Action and Resource elements and their current values. If the element values are set to "*" and the Effect is set to "Allow",the selected Amazon Lambda function has admin privileges&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&amp;nbsp;Repeat step no. 12 and 13 to verify otherIAMpolicies attached to the selected execution role.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Repeat steps no. 4 - 15 to verify theIAMexecution role permissions for other Amazon Lambda functions created within the current region.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Change theAWSregion from the navigation bar and repeat the process for the other regions.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.17" name="Configure TLS1.1+ for CloudFront to Origin connection" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  CloudFront can connect to your origin using only HTTP, only HTTPS, or to connect by matching the protocol used by the viewer. Our recommendation is to use HTTPS only. In 
  this case you can choose which SSL\TLS protocols CloudFront is allowed to use when 
  establishing an HTTPS connection to your origin. Ensure that you are using only TLS1.1+ as 
  the SSL\TLS protocol. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For configuring Origin SSL protocols first save locally the current distribution config:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Edit and replace "OriginSslProtocols" element in /tmp/cf-distribution.json with the below section:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "OriginSslProtocols": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    &amp;nbsp;"Items": [ 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "TLSv1.1", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "TLSv1.2" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    ], 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Quantity": 2 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    }, 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; -- distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon Cloudfront New Origin Security Features" url="https://aws.amazon.com/about-aws/whats-new/2016/01/amazon-cloudfront-adds-new-origin-security-features/"/>
            <reference name="Get distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-distribution.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="1.17" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the "OriginSslProtocols" used by application Cloudfront distributions (only TLSv1.1 and TLSv1.2 should be present):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, OriginSslProtocols:Origins.Items[*].CustomOriginConfig.OriginSslProtocols.Items[*]}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T17:03:38.416">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC" name="Detect and notify the usage of automated tools or unusual behavior" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Don't allow users to manipulate a system or guess its behavior based on input or output timing and detect the usage of automated tools or unusual behavior, such as actions not performed in reasonable "human time" or other abnormal time patterns.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;When the usage of automated tools is detected, the application should respond by denying access and notifying the security group.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use several automated tools to perform normal user actions.&lt;/li&gt;
                            &lt;li&gt;Check that the applications detects these actions, denies the users access and
                            notifies the security group.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T10:11:35.026">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C11" name="Enable and set up Request Validation in API Gateway" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To perform the API Gateway basic validation, we have to enable and set up the Request Validation in the API Gateway.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; To enable basic validation, you specify validation rules in a request validator, add the validator to the API's map of request validators, and assign the validator to individual API methods.&lt;/p&gt; 
&lt;p&gt;To set up a basic validation, we have some possibilities to configure it:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;by Importing OpenAPI Definition&lt;/li&gt; 
 &lt;li&gt;using the API Gateway REST API&lt;/li&gt; 
 &lt;li&gt;using the API Gateway Console&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Using the API Gateway Console:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The API Gateway console lets you set up the basic request validation on a method using one of the three validators:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Validate body: This is the body-only validator.&lt;/li&gt; 
  &lt;li&gt;Validate query string parameters and headers: This is the parameters-only validator.&lt;/li&gt; 
  &lt;li&gt;Validate body, query string parameters, and headers: This validator is for both body and parameters validation.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;When you choose one of the above validators to enable it on an API method, the API Gateway console will add the validator to the API's RequestValidators map, if the validator has not already been added to the validators map of the API. To enable a request validator on a method:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the API Gateway console, if not already logged in.&lt;/li&gt; 
  &lt;li&gt;Create a new or choose an existing API.&lt;/li&gt; 
  &lt;li&gt;Create a new or choose an existing resource of the API.&lt;/li&gt; 
  &lt;li&gt;Create a new or choose an existing method the resource.&lt;/li&gt; 
  &lt;li&gt;Choose Method Request.&lt;/li&gt; 
  &lt;li&gt;Choose the pencil icon of Request Validator under Settings.&lt;/li&gt; 
  &lt;li&gt;Choose Validate body, Validate query string parameters and headers or Validate body, query string parameters, and headers from the Request Validator drop-down list and then choose the check mark icon to save your choice.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;For more information see the references.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Enable Request Validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html"/>
            <reference name="Set up basic request validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-validation-set-up.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Verify in the code if input parameters for functions are validated&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest with KMS" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. &lt;/p&gt; 
&lt;p&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. &lt;/p&gt; 
&lt;p&gt;To ensure that sensitive data is encrypted at rest you can use AWS KMS-managed keys (SSE-KMS). This provides several advantages: &lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across all regions.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail log files. You can assign permissions for the key to the users in your organization according to your requirements.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now need to meet two conditions: 1) you must have S3 read permission on the bucket, and 2) you must be granted decrypt permission by the CMK policy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;It is recommended to encrypt all sensitive data with SSE-KMS to avoid undue disclosure of information and provide an extra layer of security.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation: &lt;/b&gt;&lt;br /&gt; The following example shows how to upload data using AWS KMS Encryption: &lt;br /&gt; aws s3api put-object --bucket --server-side-encryption aws:kms --ssekms-key-id --key &lt;/p&gt; 
</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Storing Lambda function encrypted secrets using environment variables and KMS" url="https://docs.aws.amazon.com/lambda/latest/dg/tutorial-env_console.html"/>
            <reference name="Storing and Retrieving a Secret (AWS Tutorial)" url="https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-07-16T07:44:07.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C16" name="Ensure it only exists one user to access to the API gateway" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The API gateway sits between the Lambda functions and the user. You must create an API gateway user that only has the ability to communicate with Lambda functions. It can only communicate between your internal perimeter. If the user is manipulated to send from a source other than theAPIgateway, access should be denied. You can also set Lambda authorizers in the API Gateway. &lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation: &lt;/b&gt;&lt;br /&gt; Configure the Lambda authorizers on API methods: &lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the API Gateway console.&lt;/li&gt; 
 &lt;li&gt;Create an API method and choose Authorizers under that API.&lt;/li&gt; 
 &lt;li&gt;Give the permissions to access to the Lambda Functions only to one user.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Set Up an IAM to Invoke Lambda Functions" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/integrating-api-with-aws-services-lambda.html#api-as-lambda-proxy-setup-iam-role-policies"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify that Lambda authorizers are configured on API methods:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the API Gateway console.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Select each existing API and choose Authorizers under that API.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Check that it exist only one API gateway user with the permissions to access to the Lambda Functions.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-SUBNET-AVAILABILITY-ZONE" name="Ensure that each Lambda Function has got at least one VPC subnet in each Availability Zone" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;By specifying subnets in each of the Availability Zones, your Lambda function can run in another Availability Zone if one goes down or runs out of IP addresses.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Review each function and verify that each function has got at least one associated subnet Id in different Availability Zone with the following command:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;aws lambda get-function --function-name&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If there is any function without associated Subnet Id per Availability Zone, we can update the Lambda function and assign a subnet from a specific Availability Zone with the following command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda update-function-configuration --function-name --vpc-config &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more information, see VPC Settings .&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; Shorthand Syntax:&lt;/p&gt; 
 &lt;p&gt;SubnetIds=string,string,SecurityGroupIds=string,string&lt;/p&gt; 
 &lt;p&gt; JSON Syntax:&lt;/p&gt; 
 &lt;p&gt;{ "SubnetIds": ["string", ...], "SecurityGroupIds": ["string", ...]&lt;/p&gt; 
 &lt;p&gt; }&lt;/p&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda get function" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/get-function.html#output"/>
            <reference name="AWS Lambda update function configuration" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/update-function-configuration.html"/>
            <reference name="Configuring a Lambda Function to Access Resources in an Amazon VPC" url="https://docs.aws.amazon.com/lambda/latest/dg/vpc.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that all Lambda functions have got at least one associate VPN subnet per Availability Zone with the following command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-function --function-name &lt;/p&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C8" name="Ensure that sensitive data is not commited to the repository" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Create the mechanisms to ensure that sensitive data, such personal data or credentials is not uploaded to a repository. There are different ways to implement it. One of them is with the git pre-commit hooks, this way is described in the references.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Preventing AWS credential leaks in Git with pre-commit" url="https://www.unixdaemon.net/cloud/preventing-aws-creds-in-git-with-pre-commit/"/>
            <reference name="Prevents you from committing secrets and credentials into git repositories" url="https://github.com/awslabs/git-secrets"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Check that there is not any sensitive data in the code from a repository.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C29" name="Ensure that sensitive data is not saved into logs files" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Review periodically all logs to ensure that sensitive data is not presented in the logs files.&lt;/p&gt;

	&lt;p&gt;AWS introduces a new security service Macie recognizing sensitive data such as personally identifiable information (PII) or intellectual property, and provides you with dashboards and alerts that give visibility into how this data is being accessed or moved.&lt;/p&gt;

	&lt;p&gt;You can also use the Amazon Macie service to classify all data and find if there is sensitive data in the logs files.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CloudWatch user guide" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html"/>
            <reference name="AWS Macie" url="https://aws.amazon.com/macie/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Verify if the log files don't contain sensitive data.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ACCESS-CONTROL-CENTRALIZED-AWS-LAMBDA" name="Ensure that the access control through API is centralized" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The access control, authentication and authorization procedures through API shall be centralized. To implement it into Lambda functions, we have got the two options:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lambda authorizers are Lambda functions that control access to REST API methods using bearer token authentication as well as information described by headers, paths, query strings, stage variables, or context variables request parameters.&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;TOKEN type Lambda authorizers grant a caller permissions to invoke a given request using an authorization token passed in a header. The token could be, for example, an OAuth token.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;REQUEST type Lambda authorizers grant a caller permissions to invoke a given request using request parameters, including headers, query strings, stage variables, or context parameters.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Amazon Cognito user pools let you create customizable authentication and authorization solutions for your REST APIs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt; Create an API Gateway Lambda Authorizer Lambda Function:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Before creating an API Gateway Lambda authorizer, you must first create the AWS Lambda function that implements the logic to authorize and, if necessary, to authenticate the caller. You can do so in the Lambda console, using the code template available from the API Gateway Lambda Authorizer blueprint.&lt;/li&gt; 
 &lt;li&gt;To grant IAM principals in the account that owns the API permission to call authorizer:create or create-authorizer to control the Lambda function used in your Lambda authorizer, you can create the following IAM policy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt;
    { 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;quot;Statement&amp;quot;: [ 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; { 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;Action&amp;quot;: [ 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;apigateway:POST&amp;quot; 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;Resource&amp;quot;: [ 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;arn:aws:apigateway:region::/restapis/restapi_id/authorizers&amp;quot; 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //Create Authorizer operation is allowed only with the following Lambda function 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;Condition&amp;quot;: { 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;StringEquals&amp;quot;: { 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;apigateway:AuthorizerUri&amp;quot;: &amp;quot;arn:aws:lambda:region:account-id:function:lambda-function-name&amp;quot; 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; ] 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    } 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Create a Lambda Function for a Lambda Authorizer of the TOKEN type&lt;br /&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;In the code editor of the Lambda console, enter the following Node.js code as an example of the API Gateway Lambda authorizer of the TOKEN type.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;p&gt;// A simple TOKEN authorizer example to demonstrate how to use an authorization token&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// to allow or deny a request. In this example, the caller named 'user' is allowed to invoke&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// a request if the client-supplied token value is 'allow'. The caller is not allowed to invoke&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// the request if the token value is 'deny'. If the token value is 'Unauthorized', the function&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// returns the 'Unauthorized' error with an HTTP status code of 401. For any other token value,&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// the authorizer returns an 'Invalid token' error.&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&lt;br /&gt;&lt;/p&gt; 
   &lt;p&gt;exports.handler =&amp;nbsp; function(event, context, callback) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var token = event.authorizationToken;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; switch (token.toLowerCase()) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case 'allow':&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(null, generatePolicy('user', 'Allow', event.methodArn));&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case 'deny':&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(null, generatePolicy('user', 'Deny', event.methodArn));&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case 'unauthorized':&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(&amp;quot;Unauthorized&amp;quot;);&amp;nbsp; &amp;nbsp;// Return a 401 Unauthorized response&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default:&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(&amp;quot;Error: Invalid token&amp;quot;);&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt; 
   &lt;p&gt;};&lt;/p&gt; 
   &lt;p&gt;&lt;br /&gt;&lt;/p&gt; 
   &lt;p&gt;// Help function to generate an IAM policy&lt;/p&gt; 
   &lt;p&gt;var generatePolicy = function(principalId, effect, resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var authResponse = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; authResponse.principalId = principalId;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; if (effect &amp;amp;&amp;amp; resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var policyDocument = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Version = '2012-10-17';&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Statement = [];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var statementOne = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Action = 'execute-api:Invoke';&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Effect = effect;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Resource = resource;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Statement[0] = statementOne;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; authResponse.policyDocument = policyDocument;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Optional output with custom properties of the String, Number or Boolean type.&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; authResponse.context = {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;stringKey&amp;quot;: &amp;quot;stringval&amp;quot;,&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;numberKey&amp;quot;: 123,&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;booleanKey&amp;quot;: true&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; };&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; return authResponse;&lt;/p&gt; 
   &lt;p&gt;}&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;p&gt;Create a Lambda Function of a Lambda Authorizer of the REQUEST type&lt;br /&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;In the code editor of the Lambda console, enter the following Node.js code for a simplified Lambda function as an example of the API Gateway Lambda authorizers of the REQUEST type.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;p&gt;exports.handler = function(event, context, callback) {&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; console.log('Received event:', JSON.stringify(event, null, 2));&lt;/p&gt; 
   &lt;p&gt;&lt;br /&gt;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // A simple REQUEST authorizer example to demonstrate how to use request&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // parameters to allow or deny a request. In this example, a request is&amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // authorized if the client-supplied HeaderAuth1 header, QueryString1 query parameter,&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // stage variable of StageVar1 and the accountId in the request context all match&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // specified values of 'headerValue1', 'queryValue1', 'stageValue1', and&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // '123456789012', respectively.&lt;/p&gt; 
   &lt;p&gt;&lt;br /&gt;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Retrieve request parameters from the Lambda function input:&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var headers = event.headers;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var queryStringParameters = event.queryStringParameters;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var pathParameters = event.pathParameters;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var stageVariables = event.stageVariables;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var requestContext = event.requestContext;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Parse the input for the parameter values&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var tmp = event.methodArn.split(':');&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var apiGatewayArnTmp = tmp[5].split('/');&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var awsAccountId = tmp[4];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var region = tmp[3];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var restApiId = apiGatewayArnTmp[0];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var stage = apiGatewayArnTmp[1];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var method = apiGatewayArnTmp[2];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var resource = '/'; // root resource&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; if (apiGatewayArnTmp[3]) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; resource += apiGatewayArnTmp[3];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Perform authorization to return the Allow policy for correct parameters and&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // the 'Unauthorized' error, otherwise.&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var authResponse = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var condition = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; condition.IpAddress = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; if (headers.HeaderAuth1 === &amp;quot;headerValue1&amp;quot;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; queryStringParameters.QueryString1 === &amp;quot;queryValue1&amp;quot;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; stageVariables.StageVar1 === &amp;quot;stageValue1&amp;quot;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; requestContext.accountId === &amp;quot;123456789012&amp;quot;) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(null, generateAllow('me', event.methodArn));&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&amp;nbsp; else {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(&amp;quot;Unauthorized&amp;quot;);&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt; 
   &lt;p&gt;}&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// Help function to generate an IAM policy&lt;/p&gt; 
   &lt;p&gt;var generatePolicy = function(principalId, effect, resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Required output:&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var authResponse = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; authResponse.principalId = principalId;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; if (effect &amp;amp;&amp;amp; resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var policyDocument = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Version = '2012-10-17'; // default version&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Statement = [];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var statementOne = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Action = 'execute-api:Invoke'; // default action&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Effect = effect;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Resource = resource;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Statement[0] = statementOne;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; authResponse.policyDocument = policyDocument;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Optional output with custom properties of the String, Number or Boolean type.&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; authResponse.context = {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;stringKey&amp;quot;: &amp;quot;stringval&amp;quot;,&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;numberKey&amp;quot;: 123,&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;booleanKey&amp;quot;: true&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; };&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; return authResponse;&lt;/p&gt; 
   &lt;p&gt;}&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;var generateAllow = function(principalId, resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; return generatePolicy(principalId, 'Allow', resource);&lt;/p&gt; 
   &lt;p&gt;}&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;var generateDeny = function(principalId, resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; return generatePolicy(principalId, 'Deny', resource);&lt;/p&gt; 
   &lt;p&gt;}&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;div&gt; 
  &lt;p&gt;Amazon Cognito&lt;/p&gt; 
  &lt;p&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;To create and configure an Amazon Cognito user pool for your API, you perform the following tasks:&lt;/li&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Use the Amazon Cognito console, CLI/SDK, or API to create a user pool-or use one that's owned by another AWS account.&lt;/li&gt; 
    &lt;li&gt;Use the API Gateway console, CLI/SDK, or API to create an API Gateway authorizer with the chosen user pool.&lt;/li&gt; 
    &lt;li&gt;Use the API Gateway console, CLI/SDK, or API to enable the authorizer on selected API methods.&lt;/li&gt; 
   &lt;/ol&gt; 
   &lt;li&gt;To call any API methods with a user pool enabled, your API clients perform the following tasks:&lt;/li&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Use the Amazon Cognito CLI/SDK or API to sign a user in to the chosen user pool, and obtain an identity token or access token.&lt;/li&gt; 
    &lt;li&gt;Use a client-specific framework to call the deployed API Gateway API and supply the appropriate token in the Authorization header.&lt;/li&gt; 
   &lt;/ol&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Control Access to a REST API Using Amazon Cognito User Pools as Authorizer" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html"/>
            <reference name="Controlling and managing access to a REST API in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Check that access control mechanisms for the API are centralized.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C14" name="Ensure that there is no user in production with the permission to delete permission on any service" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure that there is no user in production that can delete services, functions and perhaps even data. This will ensure that nobody deletes items by accident. If delete actions are required in production, ensure that you have proper guidelines in place to prevent accidental deletion.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; To view a function's resource-based policy, use the get-policy command.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-policy --function-name my-function --output text&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For versions and aliases, append the version number or alias to the function name.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-policy --function-name my-function:PROD&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To remove permissions from your function, use remove-permission.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda remove-permission --function-name example --statement-id sns&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Use the get-layer-version-policy command to view the permissions on a layer, and remove-layer-version-permission to remove statements from the policy.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-layer-version-policy --layer-name my-layer --version-number 3 --output text&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;aws lambda remove-layer-version-permission --layer-name my-layer --version-number 3 --statement-id engineering-org&lt;/p&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use the following command to view the remove permission over a certain function:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-layer-version-policy --layer-name my-layer --version-number 3 --output text&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Verify that the command above doesn't show the permissions defined with "Action": ["lambda:DeleteFunction"]&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-IP-ADDRESSES-VPC" name="Ensure that your VPC Lambda subnet has enough IP addresses to scale" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The subnets you specify should have sufficient available IP addresses to match the number of ENIs. If your VPC does not have sufficient ENIs or subnet IPs, your Lambda function will not scale as requests increase, and you will see an increase in invocation errors with EC2 error types like EC2ThrottledException. For asynchronous invocation, if you see an increase in errors without corresponding CloudWatch Logs, invoke the Lambda function synchronously in the console to get the error responses. &lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Review each function and verify that each function has got at least one associated subnet Id with the following command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-function --function-name &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If there is any function without associated Subnet Id, we can update the function and assign a subnet with the following command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda update-function-configuration --function-name --vpc-config &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more information, see VPC Settings .&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; Shorthand Syntax:&lt;/p&gt; 
 &lt;p&gt;SubnetIds=string,string,SecurityGroupIds=string,string&lt;/p&gt; 
 &lt;p&gt; JSON Syntax:&lt;/p&gt; 
 &lt;p&gt;{ "SubnetIds": ["string", ...], "SecurityGroupIds": ["string", ...]&lt;/p&gt; 
 &lt;p&gt; }&lt;/p&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda get function" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/get-function.html#output"/>
            <reference name="AWS Lambda update function configuration" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/update-function-configuration.html"/>
            <reference name="Configuring a Lambda Function to Access Resources in an Amazon VPC" url="https://docs.aws.amazon.com/lambda/latest/dg/vpc.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that all functions have got at least one associate VPN subnet with the following command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-function --function-name &lt;/p&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LOGS-INTEGRITY" name="Ensure the integrity of the logging system" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable AWS Log integrity for the application generated logs, such as storing logs on write-once media, forwarding a copy of the logs to a centralized SIEM or generating message digests for each log file.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;AWS Management Console:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;To enable log file integrity validation with the CloudTrail console, choose Yes for the Enable log file validation option when you create or update a trail. By default, this feature is enabled for new trails.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;AWS CLI:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;To enable log file integrity validation with the AWS CLI, use the --enable-log-file-validation option with the create-trail or update-trail commands.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;To disable log file integrity validation, use the --no-enable-log-file-validation option.&lt;/li&gt; 
  &lt;li&gt;For example:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;aws cloudtrail update-trail --name your-trail-name --enable-log-file-validation&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CloudTrail API:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;To enable log file integrity validation with the CloudTrail API, set the EnableLogFileValidation request parameter to true when calling CreateTrail or UpdateTrail.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI describe trails" url="https://docs.aws.amazon.com/cli/latest/reference/cloudtrail/describe-trails.html"/>
            <reference name="Enabling Log File Integrity Validation for CloudTrail" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation-enabling.html"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-04 Audit Storage Capacity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/173-08_02_AU-04"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SA-18" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-low-baseline" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the AWS Logs Integrity is enabled if the output of the following command in the AWS CLI has got the variable "LogFileValidationEnabled" set to true.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws cloudtrail describe-trails&lt;/p&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C5" name="Ensure you store your encryption keys in a Key Management System" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS Key Management Service (KMS) is a managed service that makes it easy for you to create and control the encryption keys used to encrypt your data, and uses FIPS 140-2 validated hardware security modules to protect the security of your keys. AWS Key Management Service is integrated with most other AWS services to help you protect the data you store with these services. AWS Key Management Service is also integrated with AWS CloudTrail to provide you with logs of all key usage to help meet your regulatory and compliance needs.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Verify that you are using the Key Management Service. You can see a list of your customer managed keys in the AWS Management Console.&lt;br /&gt; To view your CMKs (console): &lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the AWS Management Console and open the AWS Identity and Access Management (IAM) console at https://console.aws.amazon.com/iam/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the left navigation pane, choose Encryption keys.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For Region, choose the appropriate AWS Region. Do not use the region selector in the navigation bar (top right corner). The console shows all the CMKs in your AWS account in the chosen region, including customer-managed and AWS managed CMKs. The page displays the alias, key ID, status, and creation date for each CMK.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;If you need to create a CMK:&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the AWS Management Console and open the AWS Key Management Service (AWS KMS) console at https://console.aws.amazon.com/kms.&lt;/li&gt; 
 &lt;li&gt;To change the AWS Region, use the Region selector in the upper-right corner of the page.&lt;/li&gt; 
 &lt;li&gt;In the navigation pane, choose Customer managed keys.&lt;/li&gt; 
 &lt;li&gt;Choose Create key.&lt;/li&gt; 
 &lt;li&gt;Type an alias for the CMK. The alias name cannot begin with aws/. The aws/ prefix is reserved by Amazon Web Services to represent AWS managed CMKs in your account.&lt;/li&gt; 
 &lt;li&gt;An alias is a display name that you can use to identify the CMK. We recommend that you choose an alias that indicates the type of data you plan to protect or the application you plan to use with the CMK.&lt;/li&gt; 
 &lt;li&gt;Aliases are required when you create a CMK in the AWS Management Console. They are optional when you use the CreateKey operation.&lt;/li&gt; 
 &lt;li&gt;(Optional) Type a description for the CMK.&lt;/li&gt; 
 &lt;li&gt;We recommend that you choose a description that explains the type of data you plan to protect or the application you plan to use with the CMK.&lt;/li&gt; 
 &lt;li&gt;Choose Next.&lt;/li&gt; 
 &lt;li&gt;(Optional) Type a tag key and an optional tag value. To add more than one tag to the CMK, choose Add tag.&lt;/li&gt; 
 &lt;li&gt;When you add tags to your AWS resources, AWS generates a cost allocation report with usage and costs aggregated by tags. For information about tagging CMKs, see Tagging Keys.&lt;/li&gt; 
 &lt;li&gt;Choose Next.&lt;/li&gt; 
 &lt;li&gt;Select the IAM users and roles that can administer the CMK.&lt;/li&gt; 
 &lt;li&gt;(Optional) To prevent the selected IAM users and roles from deleting this CMK, in the Key deletion section at the bottom of the page, clear the Allow key administrators to delete this key check box.&lt;/li&gt; 
 &lt;li&gt;Choose Next.&lt;/li&gt; 
 &lt;li&gt;Select the IAM users and roles that can use the CMK for cryptographic operations.&lt;/li&gt; 
 &lt;li&gt;(Optional) You can allow other AWS accounts to use this CMK for cryptographic operations. To do so, in the Other AWS accounts section at the bottom of the page, choose Add another AWS account and enter the AWS account identification number of an external account. To add multiple external accounts, repeat this step.&lt;/li&gt; 
 &lt;li&gt;Choose Next.&lt;/li&gt; 
 &lt;li&gt;Review the key policy document that was created from your choices. You can edit it, too.&lt;/li&gt; 
 &lt;li&gt;Choose Finish to create the CMK.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Key management service documentation" url="https://docs.aws.amazon.com/kms/latest/developerguide/getting-started.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check that you are using the Key Management Service. To view a list of your customer managed keys in the AWS Management Console.&lt;/li&gt; 
 &lt;li&gt;To view your CMKs (console):&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console and open the AWS Identity and Access Management (IAM) console at https://console.aws.amazon.com/iam/.&lt;/li&gt; 
  &lt;li&gt;In the left navigation pane, choose Encryption keys.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;For Region, choose the appropriate AWS Region. Do not use the region selector in the navigation bar (top right corner). The console shows all the CMKs in your AWS account in the chosen region, including customer-managed and AWS managed CMKs. The page displays the alias, key ID, status, and creation date for each CMK.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-LOG-SPECIFICS" name="Increase log reports with serverless-specific information" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Organizations adopting serverless architectures, are encouraged to augment log reports with serverless-specific information such as:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Logging of API access keys related to successful/failed logins (authentication)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Attempts to invoke serverless functions with inadequate permissions (authorizations)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Successful/failed deployment of new serverless functions or configurations (change)&lt;/li&gt; 
 &lt;li&gt;Changes to function permissions or execution roles (change)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Changes to files or access permissions on relevant cloud storage services (change)&lt;/li&gt; 
 &lt;li&gt;Changes in function trigger definitions (change)&lt;/li&gt; 
 &lt;li&gt;Anomalous interaction or irregular flow between serverless functions (change)&lt;/li&gt; 
 &lt;li&gt;Changes to 3rd party dependencies (modules, libraries or APIs)&lt;/li&gt; 
 &lt;li&gt;Outbound connections initiated by serverless functions (network)&lt;/li&gt; 
 &lt;li&gt;Execution of serverless functions or access to data from an external 3rd party account not related to the main account to which the serverless application belongs (resource access)&lt;/li&gt; 
 &lt;li&gt;Serverless function execution timeouts (failure reports)&lt;/li&gt; 
 &lt;li&gt;Concurrent serverless function execution limits reached (failure reports)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Organizations are also encouraged to adopt serverless application logic/code runtime tracing and debugging facilities in order to gain better understanding of the overall system and data flow. For example: AWS X-Ray&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt; To log more actions with the CloudTrail, we only have to create a trail as following:&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a trail. By default, when you create a trail in a region in the CloudTrail console, the trail applies to all regions.&lt;/li&gt; 
 &lt;li&gt;Create an Amazon S3 bucket or specify an existing bucket where you want the log files delivered. By default, log files from all regions in your account are delivered to the bucket that you specify.&lt;/li&gt; 
 &lt;li&gt;Configure your trail to log read-only, write-only, or all management events, and all or a subset of data events. By default, trails log all management events and no data events.&lt;/li&gt; 
 &lt;li&gt;Create an Amazon SNS topic to receive notifications when log files are delivered. Delivery notifications from all regions are sent to the topic that you specify.&lt;/li&gt; 
 &lt;li&gt;Configure CloudWatch Logs to receive your logs from CloudTrail so that you can monitor for specific log events.&lt;/li&gt; 
 &lt;li&gt;Change the encryption method for your log files from server-side encryption with Amazon S3-managed encryption keys (SSE-S3) to server-side encryption with AWS KMS-managed keys (SSE-KMS).&lt;/li&gt; 
 &lt;li&gt;Turn on integrity validation for log files. This enables the delivery of digest files that you can use to validate the integrity of log files after CloudTrail has delivered them.&lt;/li&gt; 
 &lt;li&gt;Add tags (custom key-value pairs) to your trail.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI describe trails" url="https://docs.aws.amazon.com/cli/latest/reference/cloudtrail/describe-trails.html"/>
            <reference name="AWS Lambda Metrics and Dimensions - CloudWatch" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html"/>
            <reference name="AWS-X-Ray" url="https://aws.amazon.com/xray/"/>
            <reference name="Creating a Trail For Your AWS Account" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-and-update-a-trail.html"/>
            <reference name="Logging AWS Lambda API Calls by Using AWS CloudTrail" url="https://docs.aws.amazon.com/lambda/latest/dg/logging-using-cloudtrail.html"/>
            <reference name="Logging AWS Serverless Application Repository API Calls with AWS CloudTrail" url="https://docs.aws.amazon.com/serverlessrepo/latest/devguide/logging-using-cloudtrail.html"/>
            <reference name="Troubleshooting &amp; Monitoring Lambda-based Apps with CloudWatch" url="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that the new logs are included in CloudTrail, we can get all trails with the following command: &lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws cloudtrail describe-trails&lt;/p&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C17" name="Limit the lifetime of your containers" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure that your containers and functions lifecycles are handled correctly and no lingering processes exist.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Use CloudWatch metrics to view the number of tasks in your services that are in the RUNNING state and set a CloudWatch alarm for this metric to alert you if the number of running tasks in your service falls below a specified value.&lt;/p&gt; 
&lt;p&gt; To view the number of running tasks in a service&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&lt;/li&gt; 
 &lt;li&gt;On the navigation pane, choose Metrics.&lt;/li&gt; 
 &lt;li&gt;On the All metrics tab, choose ECS.&lt;/li&gt; 
 &lt;li&gt;Choose ClusterName, ServiceName and then choose any metric (either CPUUtilization or MemoryUtilization) that corresponds to the service to view running tasks in.&lt;/li&gt; 
 &lt;li&gt;On the Graphed metrics tab, change Period to 1 Minute and Statistic to Sample Count.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To create a CloudWatch alarm on a metric&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&lt;/li&gt; 
 &lt;li&gt;On the left navigation, choose Alarms, Create Alarm.&lt;/li&gt; 
 &lt;li&gt;In the CloudWatch Metrics by Category section, choose ECS Metrics &amp;gt; ClusterName.&lt;/li&gt; 
 &lt;li&gt;On the Modify Alarm page, choose the MemoryReservation metric for the default cluster and choose Next.&lt;/li&gt; 
 &lt;li&gt;In the Alarm Threshold section, enter a name and description for your alarm.&lt;/li&gt; 
 &lt;li&gt;Set the threshold and time period requirement to MemoryReservation greater than 75% for 1 period.&lt;/li&gt; 
 &lt;li&gt;Configure a notification to send when the alarm is triggered. You can also choose to delete the notification if you don't want to configure one now.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="CloudWatch metrics" url="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-metrics.html#available_cloudwatch_metrics"/>
            <reference name="Tutorial: Scaling container instances with CloudWatch alarms" url="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch_alarm_autoscaling.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check CloudWatch data on containers and services that are in the RUNNING state.&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&lt;/li&gt; 
 &lt;li&gt;On the navigation pane, choose Metrics.&lt;/li&gt; 
 &lt;li&gt;On the All metrics tab, choose ECS.&lt;/li&gt; 
 &lt;li&gt;Choose ClusterName, ServiceName and then choose any metric (either CPUUtilization or MemoryUtilization) that corresponds to the service to view running tasks in.&lt;/li&gt; 
 &lt;li&gt;On the Graphed metrics tab, change Period to 1 Minute and Statistic to Sample Count.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-RESTRICT-NUMBER-ACCOUNT-TO-LOGS" name="Limit the number of accounts with privileges allowing modification and/or deletion of audit logs files" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Limit the number of accounts with privileges to modify and/or delete audit logs files.&lt;/p&gt; 
&lt;p&gt;The following AWS managed policies, which you can attach to users in your account, are specific to CloudWatch Logs:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CloudWatchLogsFullAccess - Grants full access to CloudWatch Logs.&lt;/li&gt; 
 &lt;li&gt;CloudWatchLogsReadOnlyAccess - Grants read-only access to CloudWatch Logs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;By default, all user shall only have got the managed policy "CloudWatchLogsReadOnlyAccess", and only few users shall have got the managed policy "CloudWatchLogsFullAccess".&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to the AWS CLI.&lt;/li&gt; 
 &lt;li&gt;List all users, with the following command:&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws iam list-users&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run the following command per user to ensure that only the desired users have got the managed policy "CloudWatchLogsFullAccess" and the other users the managed policy "CloudWatchLogsReadOnlyAccess", to do it run the following command per username:&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws iam list-attached-user-policies --user-name [userName]&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If there is at least user with the managed policy "CloudWatchLogsFullAccess" and it shall not be allowed, we have to change the managed policy for these users.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Run the following command per each user to remove the managed policy:&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws iam delete-user-policy --user-name [userName] --policy-name CloudWatchLogsFullAccess&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run the following command per each user to add a new managed policy:&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess --user-name [userName]&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI assign policy to user" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-user-policy.html"/>
            <reference name="AWS CLI list policies per user" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-attached-user-policies.html"/>
            <reference name="AWS CLI list users" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-users.html"/>
            <reference name="AWS CLI remove policy per user" url="https://docs.aws.amazon.com/cli/latest/reference/iam/delete-user-policy.html"/>
            <reference name="AWS Managed (Predefined) Policies for CloudWatch Logs" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-identity-based-access-control-cwl.html#managed-policies-cwl"/>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to the AWS CLI.&lt;/li&gt; 
 &lt;li&gt;List all users, with the following command: aws iam list-users&lt;/li&gt; 
 &lt;li&gt;Run the following command per user and check that only the desired users have got the managed policy "CloudWatchLogsFullAccess" and the other users the managed policy "CloudWatchLogsReadOnlyAccess", to do it run the following command per username: aws iam list-attached-user-policies --user-name [userName]&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C18" name="Monitor the containers for processes hanging" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use CloudWatch to monitor the containers and the processes&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Before your container instances can send log data to CloudWatch Logs, you must create an IAM policy to allow your container instances to use the CloudWatch Logs APIs, and then you must attach that policy to ecsInstanceRole.&lt;/p&gt; 
&lt;p&gt;To create the ECS-CloudWatchLogs IAM policy&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the IAM console at https://console.aws.amazon.com/iam/.&lt;/li&gt; 
 &lt;li&gt;In the navigation pane, choose Policies.&lt;/li&gt; 
 &lt;li&gt;Choose Create policy, JSON.&lt;/li&gt; 
 &lt;li&gt;Enter the following policy:{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": [ "logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents", "logs:DescribeLogStreams" ], "Resource": [ "arn:aws:logs:&lt;strong&gt;:*:&lt;/strong&gt;" ] } ]}&lt;/li&gt; 
 &lt;li&gt;Choose Review policy.&lt;/li&gt; 
 &lt;li&gt;On the Review policy page, enter ECS-CloudWatchLogs for the Name and choose Create policy.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To attach the ECS-CloudWatchLogs policy to ecsInstanceRole&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the IAM console at https://console.aws.amazon.com/iam/.&lt;/li&gt; 
 &lt;li&gt;In the navigation pane, choose Roles.&lt;/li&gt; 
 &lt;li&gt;Choose ecsInstanceRole. If the role does not exist, follow the procedures in Amazon ECS Container Instance IAM Role to create the role.&lt;/li&gt; 
 &lt;li&gt;Choose Permissions, Attach policy.&lt;/li&gt; 
 &lt;li&gt;To narrow the available policies to attach, for Filter, type ECS-CloudWatchLogs.&lt;/li&gt; 
 &lt;li&gt;Check the box to the left of the ECS-CloudWatchLogs policy and choose Attach policy.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To install the CloudWatch Logs agent:&lt;br /&gt; Run the following command to install the CloudWatch Logs agent.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; sudo yum install -y awslogs&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To configure the CloudWatch Logs agent:&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Back up the existing CloudWatch Logs agent configuration file: sudo mv /etc/awslogs/awslogs.conf /etc/awslogs/awslogs.conf.bak&lt;/li&gt; 
 &lt;li&gt;Create a blank configuration file: sudo touch /etc/awslogs/awslogs.conf&lt;/li&gt; 
 &lt;li&gt;Open the /etc/awslogs/awslogs.conf file with a text editor, and copy the example file above into it.&lt;/li&gt; 
 &lt;li&gt;Install the jq JSON query utility: sudo yum install -y jq&lt;/li&gt; 
 &lt;li&gt;Query the Amazon ECS introspection API to find the cluster name and set it to an environment variable: cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')&lt;/li&gt; 
 &lt;li&gt;Replace the {cluster} placeholders in the file with the value of the environment variable you set in the previous step: sudo sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf&lt;/li&gt; 
 &lt;li&gt;Query the Amazon ECS introspection API operation to find the container instance ID and set it to an environment variable: container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )&lt;/li&gt; 
 &lt;li&gt;Replace the {container_instance_id} placeholders in the file with the value of the environment variable you set in the previous step: sudo sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To configure the CloudWatch Logs agent Region:&lt;br /&gt; By default, the CloudWatch Logs agent sends data to the us-east-1 region. To send your data to a different region, such as the Region in which your cluster is located, you can set the Region in the /etc/awslogs/awscli.conf file.&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the /etc/awslogs/awscli.conf file with a text editor.&lt;/li&gt; 
 &lt;li&gt;In the [default] section, replace us-east-1 with the Region from which to view log data.&lt;/li&gt; 
 &lt;li&gt;Save the file and exit your text editor.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To start the CloudWatch Logs agent&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Start the CloudWatch Logs agent with the following command.&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Linux: sudo service awslogs start&lt;/li&gt; 
  &lt;li&gt;Amazon Linux 2: sudo systemctl start awslogsd&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Ensure that the CloudWatch Logs agent starts at every system boot with the following command.&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Linux: sudo chkconfig awslogs on&lt;/li&gt; 
  &lt;li&gt;Amazon Linux 2: sudo systemctl enable awslogsd.service&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon ECS CloudWatch Metrics" url="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-metrics.html"/>
            <reference name="Using CloudWatch Logs with Container Instances" url="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_cloudwatch_logs.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that each container throws their logs and follow the next steps to do it.&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&lt;/li&gt; 
 &lt;li&gt;In the left navigation pane, choose Logs.&lt;/li&gt; 
 &lt;li&gt;You should see the log groups you configured in Configuring and Starting the CloudWatch Logs Agent.&lt;/li&gt; 
 &lt;li&gt;Choose a log group to view.&lt;/li&gt; 
 &lt;li&gt;Choose a log stream to view. The streams are identified by the cluster name and container instance ID that sent the logs.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C2" name="Not expose your data stores directly to internet" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;When using S3 buckets ensure you disable public read access, unless you are using the bucket for storing images or a static website. Ensure data stores are properly protected with firewall settings and gateways. Create specific internal users to access the data store and ensure that only those users can access the data store.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt; To set ACL access permissions for an S3 bucket: &lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the AWS Management Console and open the Amazon S3 console at https://console.aws.amazon.com/s3/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the Bucket name list, choose the name of the bucket that you want to set permissions for.&lt;/li&gt; 
 &lt;li&gt;Choose Permissions .&lt;/li&gt; 
 &lt;li&gt;You can manage bucket access permissions for the following: Owner access, Access for other AWS accounts, Public access or S3 log delivery group.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How Do I Set ACL Bucket Permissions?" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-bucket-permissions.html"/>
            <reference name="Identifying Public Buckets Using Bucket Permissions Check" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/bucket-permissions-check.html"/>
            <reference name="S3 Access Control List (ACL) Overview" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the access permissions for an S3 bucket: &lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the AWS Management Console and open the Amazon S3 console at https://console.aws.amazon.com/s3/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the Bucket name list, choose the name of the bucket that you want to set permissions for.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Choose Permissions.&lt;/li&gt; 
 &lt;li&gt;Check that the permissions are defined well.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-937" name="Regularly check for known vulnerabilities in the dependencies of your project" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Vulnerabilities in common popular and shared libraries are published and recorded in a number of
                        online databases and services, including the MITRE CVE and CWE databases.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Perform regular checks for published vulnerabilities in third party components and the
                        IDE.&lt;/li&gt;
                        &lt;li&gt;Test and apply appropriate recommended patches and mitigations.&lt;/li&gt;
                        &lt;li&gt;Use subscription threat intelligence and alerting services to ensure timely
                        notification of possible threats&lt;/li&gt;
                        &lt;li&gt;Use automated vulnerability scanning tools to identify and test for security threats
                        to the project.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;ul&gt;
                        &lt;/ul&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Common Vulnerabilities and Exposures (CVE) Database" url="https://cve.mitre.org/"/>
            <reference name="Common Weakness Enumeration (CWE) Database" url="https://cwe.mitre.org"/>
            <reference name="OSA SA-08 Security Engineering Principles" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/58-08_02_SA-08"/>
            <reference name="OWASP Dependency-Check" url="https://www.owasp.org/index.php/OWASP_Dependency_Check"/>
            <reference name="OWASP Juice Shop: Vulnerable Components" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/vulnerable-components.html"/>
          </references>
          <standards>
            <standard ref="1.14.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A06:2021-Vulnerable and Outdated Components" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A9:2017-Using Components with Known Vulnerabilities" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.SC-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SA-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SA-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Ensure a process is in place to regularly check for vulnerabilities in software
                            components and libraries. Sources should include:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Vendor notifications&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Threat intelligence feeds&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Vulnerability scanning.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Verify that processes exist to respond to vulnerabilities to research, test, and
                            deploy appropriate patches.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            The following tools can help in automating dependencies checks:
                            &lt;ul&gt;
                            &lt;li&gt;&lt;a href="https://www.owasp.org/index.php/OWASP_Dependency_Check"&gt;OWASP
                            Dependency Check&lt;/a&gt;&amp;nbsp;for Java and .NET.&lt;/li&gt;
                            &lt;li&gt;&lt;a href="http://retirejs.github.io/retire.js/"&gt;Retire.js&lt;/a&gt;&amp;nbsp;with
                            support to scan several different of the most popular JS libraries and frameworks.&lt;/li&gt;
                            &lt;li&gt;&lt;a href="https://nodesecurity.io/opensource"&gt;nodesecurity.io&lt;/a&gt;&amp;nbsp;which
                            focuses on node packages and libraries' security.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-10-11T10:33:59.664">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC-006" name="Restrict actions of users that follow unusual patterns" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict actions that users can do outside of the approved/required business process flow.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This is important because without this safeguard in place attackers may be able to bypass or circumvent work-flows and checks allowing them to prematurely enter or skip required sections of the application potentially allowing actions/transactions to be completed without successfully completing the entire business process, leaving the system with incomplete back-end tracking information.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing for the circumvention of work flows" url="https://www.owasp.org/index.php/Testing_for_the_Circumvention_of_Work_Flows_(OTG-BUSLOGIC-006)"/>
          </references>
          <standards>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application only processes business logic flows in sequential step order and in realistic human time.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T10:04:15.073">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C7" name="Review and remove unused functions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Review the current Lambda Functions and remove those unused functions from the system.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; To list all functions:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to the AWS CLI, and write the following command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws list-functions&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review all functions search those unused functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To remove a certain function:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to the AWS CLI, and write the following command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt; aws delete-function -function-name &lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI Delete function" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/delete-function.html"/>
            <reference name="AWS CLI List functions" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/list-functions.html"/>
            <reference name="Automating the discovery of unused AWS Lambda functions" url="https://aws.amazon.com/blogs/mt/automating-the-discovery-of-unused-aws-lambda-functions/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Write the following command in the AWS CLI and check that all listed functions are not unused functions:&amp;nbsp;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;aws list-functions&lt;/p&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C22" name="Set a concurrency limits for your functions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Lambda provides a concurrent execution limit control at both the account level and the function level. By default, AWS Lambda limits the total concurrent executions across all functions within a given region to 1000. The function level concurrent execution limit is by default enforced against the sum of the concurrent executions of all functions.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; To set a concurrency limit for your Lambda function using the AWS CLI, do the following:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use the PutFunctionConcurrency operation and pass in the function name and concurrency limit you want allocated to this function:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt; aws lambda put-function-concurrency --function-name function-name --reserved-concurrent-executions limit value&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Managing Concurrency" url="https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html"/>
            <reference name="Set Concurrency Limits on Individual AWS Lambda Functions" url="https://aws.amazon.com/about-aws/whats-new/2017/11/set-concurrency-limits-on-individual-aws-lambda-functions/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use AWS CLI and use the following command to view the concurrency limit per function:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws lambda get-function --function-name function-name&amp;nbsp;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check all function and verify that they have got set a well the concurrency limit.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.3" name="Set HTTPS for sensitive information" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To ensure that data is only accessible via HTTPS (as opposed to both HTTP and HTTPS) it is possible to add a condition to the S3 bucket policy. It is recommended to enable this for any bucket containing sensitive data to ensure that data is encrypted in transit. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;The following is an example of how to create an S3 bucket policy that enforces HTTPS/SSL only 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Go to the S3 Service on the AWS Console&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select a bucket under "All buckets"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Click the properties tab&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Under the permissions select "Add a bucket policy"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Add the following policy to ensure all objects are accessed via https only&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; {&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; "Statement":[&lt;/i&gt; 
   &lt;i&gt;{&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; "Action": "s3:*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Effect":"Allow",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Principal": "*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Resource":"arn:aws:s3:::bucketname/*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Condition":{&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;div&gt; 
       &lt;i&gt;"Bool":&lt;/i&gt; 
      &lt;/div&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;{&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;"aws:SecureTransport": true&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;}&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;i&gt;}&lt;/i&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; }&lt;/i&gt; 
     &lt;i&gt;]&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt;} &lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click ""Save"&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that HTTPS is forced on a bucket policy:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Go to the S3 Service on the AWS Console.&lt;/li&gt;
                            &lt;li&gt;Select the S3 bucket under &amp;quot;All buckets&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the &amp;quot;properties&amp;quot; tab.&lt;/li&gt;
                            &lt;li&gt;Click &amp;quot;edit bucket policy&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:SecureTransport&amp;quot;: &amp;quot;true&amp;quot;}}&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the same statement as &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C25" name="Set time-outs on invocations of functions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To prevent your Lambda function from running indefinitely, you specify a timeout. You shall set this value based on your expected execution time. The default for functions created in the console is 3 seconds. To ensure that you write clean code also verify that the termination criteria are met every time to prevent endless or long invocations.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Update the timeout of your functions using the following AWS CLI command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws lambda update-function-configuration --function-name myfunction --timeout 3&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In the example, we change the timeout limit to 3 seconds&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Limits" url="https://docs.aws.amazon.com/lambda/latest/dg/limits.html"/>
            <reference name="Best practices for AWS Lambda timeouts" url="https://epsagon.com/development/best-practices-for-aws-lambda-timeouts/"/>
            <reference name="Function configuration" url="https://docs.aws.amazon.com/lambda/latest/dg/resource-model.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use AWS CLI and use the following command to view the timeout limit per function:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws lambda get-function --function-name function-name&amp;nbsp;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check all function and verify that they have got set a well the timeout limit.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C9" name="Store your environment variables in a secure place" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Plain text environment variables should not be pushed to code repositories. You can use KMS to encrypt environment variables.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Step 1: Create the Lambda Function (If you've already created the Lambda function, skip this step)&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the AWS Management Console and open the AWS Lambda console at https://console.aws.amazon.com/lambda/.&lt;/li&gt; 
 &lt;li&gt;Choose Create a Lambda function.&lt;/li&gt; 
 &lt;li&gt;In Select blueprint, choose the Author from scratch button.&lt;/li&gt; 
 &lt;li&gt;In Basic information, do the following:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;In Name, specify your Lambda function name.&lt;/li&gt; 
  &lt;li&gt;In Role, choose Choose an existing role.&lt;/li&gt; 
  &lt;li&gt;In Existing role, choose lambda_basic_execution.&lt;/li&gt; 
  &lt;li&gt;Note: If the policy of the execution role does not have the decrypt permission, you will need add it.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Choose Create function.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Step 2: Configure the Lambda Function&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Under Configuration, specify the Runtime of your choice.&lt;/li&gt; 
 &lt;li&gt;Under the Lambda function code section you can take advantage of the Edit code inline option to replace the Lambda function handler code with your custom code.&lt;/li&gt; 
 &lt;li&gt;Note the Triggers tab. Under the Triggers page, you can optionally choose a service that automatically triggers your Lambda function by choosing the Add trigger button and then choosing the gray box with ellipses (...) to display a list of available services. For this example, do not configure a trigger and choose Configuration.&lt;/li&gt; 
 &lt;li&gt;Note the Monitoring tab. This page will provide immediate CloudWatch metrics for your Lambda function invocations, as well as links to other helpful guides, including Using AWS X-Ray.&lt;/li&gt; 
 &lt;li&gt;Expand the Environment variables section.&lt;/li&gt; 
 &lt;li&gt;Enter your key-value pair. Expand the Encryption configuration section. Note that Lambda provides a default service key under KMS key to encrypt at rest which encrypts your information after it has been uploaded. If the information you provided is sensitive, you can additionally check the Enable helpers for encryption in transit checkbox and supply a custom key. This masks the value you entered and results in a call to AWS KMS to encrypt the value and return it as Ciphertext. If you haven't created a KMS key for your account, you will be provided a link to the AWS IAM console to create one. The account must have have encrypt and decrypt permissions for that key. Note that the Encrypt button toggles to Decrypt after you choose it. This affords you the option to update the information. Once you have done that, choose the Encrypt button.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Environment Variables" url="https://docs.aws.amazon.com/lambda/latest/dg/env_variables.html#env_encrypt"/>
            <reference name="Storing Lambda function encrypted secrets using environment variables and KMS" url="https://docs.aws.amazon.com/lambda/latest/dg/tutorial-env_console.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Under Configuration, specify the Runtime of your choice.&lt;br /&gt;
2. Expand the Environment variables section.&lt;br /&gt;
3. Check that the Environment variables are configured well in this section.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C23" name="Use a profiler tool to improve the application" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;When using a profiler tool, the execution of your functions are monitored. It will reveal which functions are called, number of invocations, execution times, memory usage and CPU use.&lt;/p&gt;

	&lt;p&gt;You can use it to find and identify bottlenecks and address them. Therefore, you shall use a profiler tool to improve the time of use, memory usage and CPU usage of the function.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Limits" url="https://docs.aws.amazon.com/lambda/latest/dg/limits.html"/>
            <reference name="Best practices for AWS Lambda timeouts" url="https://epsagon.com/development/best-practices-for-aws-lambda-timeouts/"/>
            <reference name="Function configuration" url="https://docs.aws.amazon.com/lambda/latest/dg/resource-model.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Check that a profiler tool is used to improve the Lambda function.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C24" name="Use the API gateway Plans to throttle incoming API calls or rate limit the requests" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Throttling or rate limiting will limit the rate of transactions passing through the API Gateway. When limits are exceeded the API gateway will respond with a HTTP response error code. There are several possibilities to set throttling but the use of an API key and usage plan is a best practice.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;In the Amazon API Gateway main navigation pane, choose Usage Plans, and then choose Create.&lt;/li&gt; 
 &lt;li&gt;Under Create Usage Plan, do the following:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;For Name, type a name for your plan (for example, Plan_A).&lt;/li&gt; 
  &lt;li&gt;For Description, type a description for your plan.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select Enable throttling, and set Rate (for example, 100) and Burst (for example, 200).&lt;/li&gt; 
  &lt;li&gt;Choose Enable quota, and set its limit (for example, 5000) for a selected time interval (for example, Month).&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;li&gt;To add a stage to the plan, do the following in the Associated API Stages pane:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Choose Add API Stage.&lt;/li&gt; 
  &lt;li&gt;Choose an API (for example, PetStore) from the API drop-down list.&lt;/li&gt; 
  &lt;li&gt;Choose a stage (for example, Stage_1) from the Stage drop-down list.&lt;/li&gt; 
  &lt;li&gt;Choose the checkmark icon to save.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;li&gt;To configure method throttling, do the following:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Choose Configure Method Throttling.&lt;/li&gt; 
  &lt;li&gt;Choose Add Resource/Method.&lt;/li&gt; 
  &lt;li&gt;Choose the resource from the Resource drop-down menu.&lt;/li&gt; 
  &lt;li&gt;Choose the method from the Method drop-down menu.&lt;/li&gt; 
  &lt;li&gt;Set Rate (requests per second) (for example, 100) and Burst (for example, 200).&lt;/li&gt; 
  &lt;li&gt;Choose the checkmark icon to save.&lt;/li&gt; 
  &lt;li&gt;Choose Close.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;li&gt;To add a key to the plan, do the following in the API Keys tab:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;To use an existing key, choose Add API Key to Usage Plan.&lt;/li&gt; 
  &lt;li&gt;For Name, type a name for the key you want to add (for example, MyFirstKey).&lt;/li&gt; 
  &lt;li&gt;Choose the checkmark icon to save.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;As needed, repeat the preceding steps to add other existing API keys to this usage plan.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS API gateway Limits" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/limits.html"/>
            <reference name="Create and Use Usage Plans with API Keys" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html"/>
            <reference name="Create, Configure, and Test Usage Plans Using the API Gateway CLI and REST API" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-usage-plans-with-rest-api.html"/>
            <reference name="Create, Configure, and Test Usage Plans with the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-usage-plans-with-console.html"/>
            <reference name="Throttle API Requests for Better Throughput" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check that all API Gateway Plans are configured well.&lt;/li&gt; 
 &lt;li&gt;Go to the API Gateway main navigation pane, choose Usage Plans.&lt;/li&gt; 
 &lt;li&gt;Choose a usage plan from the list of usage plans.&lt;/li&gt; 
 &lt;li&gt;From within the specified plan, choose API Keys.&lt;/li&gt; 
 &lt;li&gt;Choose an API key, and then choose Usage to view Subscriber's Traffic from the plan you're monitoring, and verify that all works well&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL-GENERIC" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="jwilliams@iriusrisk.com" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received shall be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies, or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms, these can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;/p&gt; 
&lt;p&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one end of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/p&gt; 
&lt;p&gt;As such, all data received must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria.&lt;/p&gt; 
&lt;p&gt; Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."&lt;br /&gt; Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&lt;/p&gt; 
&lt;p&gt; While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&lt;/p&gt; 
&lt;p&gt; Validate all data received from the client, including values such as HTTP headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Enable Request Validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Input Validation Cheat Sheet" url="https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"/>
            <reference name="OWASP Testing for Input Validation" url="https://www.owasp.org/index.php/Testing_for_Input_Validation"/>
          </references>
          <standards>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-low-baseline" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify all data input points for the application, for example:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt; 
 &lt;li&gt;API calls&lt;/li&gt; 
 &lt;li&gt;HTTP Headers&lt;/li&gt; 
 &lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt; 
 &lt;li&gt;Serialized Java objects&lt;/li&gt; 
 &lt;li&gt;Any data structure received&lt;/li&gt; 
 &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt; 
 &lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt; 
 &lt;li&gt;For each of the inputs, ensure that the data is validated against the whitelists (for example with a regular expression) before being processed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To test data validation:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt; 
 &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt; 
 &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;A number of tools can be used to aid in testing: &lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Directly with your browser and with the Developer Tools&lt;/li&gt; 
 &lt;li&gt;Use a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data)&lt;/li&gt; 
 &lt;li&gt;Use a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-25T16:40:59.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="aws-lambda">
          <threats>
            <threat ref="AWS-LAMBDA-T13" name="Attackers gain access to a Lambda function through a Cross-site scripting attack on the DynamoDB API" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;Through a Cross-site scripting attack an attacker retrieves credentials. The parameters weren't validated, resulting in an injection of code to retrieve sensitive data such as as credentials.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W20">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL-GENERIC" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL-GENERIC" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LAMBDA-T4" name="Attackers gain access to the AWS account through leaked credentials" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;By storing your account information or environment variables in a "public" resource or storing them as plain text, attackers can find that information. Attackers will scan GitHub repositories or scrape/crawl files on your resources to find this kind of information.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W7">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C8" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W8">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C9" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C8" mitigation="50"/>
                <countermeasure ref="AWS-LAMBDA-C9" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-592">
                  <countermeasures>
                    <countermeasure ref="ACCESS-CONTROL-CENTRALIZED-AWS-LAMBDA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ACCESS-CONTROL-CENTRALIZED-AWS-LAMBDA" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="aws-lambda">
          <threats>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W10">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C12" mitigation="25"/>
                    <countermeasure ref="AWS-LAMBDA-C16" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.8" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C12" mitigation="25"/>
                <countermeasure ref="AWS-LAMBDA-C16" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-IAM-2.8" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-233" name="Privilege Escalation" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W10">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C12" mitigation="33"/>
                    <countermeasure ref="AWS-LAMBDA-C14" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C12" mitigation="33"/>
                <countermeasure ref="AWS-LAMBDA-C14" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="34"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="aws-lambda">
          <threats>
            <threat ref="AWS-LAMBDA-T12" name="Attackers force to increase the Amazon billing through overloading the resources" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;One of the principles of Lambda functions is that you pay for the amount of time your code is running. This pushes the developer to write efficient code. Efficient code should also be limited in execution time. An attacker could try to force services to overload resources and push the boundaries.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W16">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C22" mitigation="20"/>
                    <countermeasure ref="AWS-LAMBDA-C24" mitigation="20"/>
                    <countermeasure ref="AWS-LAMBDA-C25" mitigation="20"/>
                    <countermeasure ref="AWS-LAMBDA-C26" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W19">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C11" mitigation="20"/>
                    <countermeasure ref="AWS-LAMBDA-C26" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C11" mitigation="20"/>
                <countermeasure ref="AWS-LAMBDA-C22" mitigation="20"/>
                <countermeasure ref="AWS-LAMBDA-C24" mitigation="20"/>
                <countermeasure ref="AWS-LAMBDA-C25" mitigation="20"/>
                <countermeasure ref="AWS-LAMBDA-C26" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-172" name="Attackers subvert the intended workflow of the application in order to perform unauthorised operations" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;If an application enforces an order in workflows, then attackers could attempt to bypass this order so that they can perform operations for which they are not authorized. The technique can also be used to gain access to unauthorized data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-841">
                  <countermeasures>
                    <countermeasure ref="OTG-BUSLOGIC" mitigation="50"/>
                    <countermeasure ref="OTG-BUSLOGIC-006" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="OTG-BUSLOGIC" mitigation="50"/>
                <countermeasure ref="OTG-BUSLOGIC-006" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W14">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C22" mitigation="13"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W15">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C20" mitigation="13"/>
                    <countermeasure ref="AWS-LAMBDA-C23" mitigation="13"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W16">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C22" mitigation="13"/>
                    <countermeasure ref="AWS-LAMBDA-C24" mitigation="13"/>
                    <countermeasure ref="AWS-LAMBDA-C25" mitigation="12"/>
                    <countermeasure ref="AWS-LAMBDA-C26" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W17">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C25" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W18">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C26" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-VPC-IP-ADDRESS-DEPLETION-WEAKNESS">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-IP-ADDRESSES-VPC" mitigation="12"/>
                    <countermeasure ref="AWS-LAMBDA-SUBNET-AVAILABILITY-ZONE" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C20" mitigation="13"/>
                <countermeasure ref="AWS-LAMBDA-C22" mitigation="13"/>
                <countermeasure ref="AWS-LAMBDA-C23" mitigation="13"/>
                <countermeasure ref="AWS-LAMBDA-C24" mitigation="13"/>
                <countermeasure ref="AWS-LAMBDA-C25" mitigation="12"/>
                <countermeasure ref="AWS-LAMBDA-C26" mitigation="12"/>
                <countermeasure ref="AWS-LAMBDA-IP-ADDRESSES-VPC" mitigation="12"/>
                <countermeasure ref="AWS-LAMBDA-SUBNET-AVAILABILITY-ZONE" mitigation="12"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LAMBDA-T15" name="Lambda function is compromised through a code injection attack" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;When input validation is non-existent or not strong, malicious code can be injected through the input parameters. This may compromise the complete application and data stores.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W9">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C11" mitigation="50"/>
                    <countermeasure ref="DATA-VAL-GENERIC" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C11" mitigation="50"/>
                <countermeasure ref="DATA-VAL-GENERIC" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LAMBDA-T5" name="Lambda function is exploited by a non-HTTP event through code injection" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;A Lambda function can be triggered by a non-HTTP event (e.g. S3, SNS, SES, CloudWatch Events, etc.). When input validation is non-existing or not strong, malicious code can be injected through the input parameters. This may lead to complete compromise of the application and data stores.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W9">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C11" mitigation="50"/>
                    <countermeasure ref="DATA-VAL-GENERIC" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C11" mitigation="50"/>
                <countermeasure ref="DATA-VAL-GENERIC" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LAMBDA-T9" name="Lambda functions are accessible through an unclean container" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;Cloud providers run your functions in a container. Because you want your function to execute as fast and efficient as possible, the containers are kept warm. This means that a container will be persistent for a while after a function is executed. This could leave room for a successful attack on the container.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W11">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C17" mitigation="25"/>
                    <countermeasure ref="AWS-LAMBDA-C20" mitigation="25"/>
                    <countermeasure ref="AWS-LAMBDA-C23" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W12">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C18" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C17" mitigation="25"/>
                <countermeasure ref="AWS-LAMBDA-C18" mitigation="25"/>
                <countermeasure ref="AWS-LAMBDA-C20" mitigation="25"/>
                <countermeasure ref="AWS-LAMBDA-C23" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-94" name="Man in the Middle Attack" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W4">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C5" mitigation="33"/>
                    <countermeasure ref="aws-tier-1.17" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C5" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="34"/>
                <countermeasure ref="aws-tier-1.17" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="MONITORING AND LOGGING" name="Monitoring and Logging" desc="" library="aws-lambda">
          <threats>
            <threat ref="CAPEC-93" name="An attacker injects, manipulates or forges malicious log entries in the log file, allowing her to mislead a log audit, cover traces of attack, or perform other malicious actions" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-LOG-SPECIFICS" mitigation="33"/>
                    <countermeasure ref="AWS-LOGS-INTEGRITY" mitigation="34"/>
                    <countermeasure ref="AWS-RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-LOG-SPECIFICS" mitigation="33"/>
                <countermeasure ref="AWS-LOGS-INTEGRITY" mitigation="34"/>
                <countermeasure ref="AWS-RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="33"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="PATCHING" name="Patching" desc="" library="aws-lambda">
          <threats>
            <threat ref="AWS-LAMBDA-T3" name="Attackers exploit an unused function to enter the system" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;A &amp;quot;problem&amp;quot; with serverless architecture is that you don't pay for functions that aren't used. This means that your unused functions will not appear on your bill. If the unused functions become forgotten, they can become a threat. Those functions will not be updated or patched.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W5">
                  <countermeasures>
                    <countermeasure ref="CWE-937" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W6">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C7" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C7" mitigation="50"/>
                <countermeasure ref="CWE-937" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
            <threat ref="AWS-LAMBDA-T10" name="Lambda functions are compromised through exploiting vulnerable dependencies" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;Functions often use third-party libraries or frameworks. These dependencies can be vulnerable and new vulnerabilities are regularly disclosed. As soon as a vulnerability is registered in the CVE database, attackers will try to exploit the vulnerability within hours using automated exploits.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W13">
                  <countermeasures>
                    <countermeasure ref="CWE-937" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-937" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="SENSITIVE INFORMATION IN DATA STORES" name="Sensitive information in data stores" desc="" library="aws-lambda">
          <threats>
            <threat ref="AWS-LAMBDA-T1" name="Sensitive information is leaked from data stores" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;Sensitive information is exfiltrated from a data store because there is no encryption applied or the server was misconfigured&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W2">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C2" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="SENSITIVE INFORMATION IN LOGS" name="Sensitive information in logs" desc="" library="aws-lambda">
          <threats>
            <threat ref="AWS-LAMBDA-T14" name="Sensitive data is leaked through non-sanitized debugging/logging statements" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;Whilst logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships, ensuring sensitive user data and system information are not exposed to potential attackers.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W21">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C29" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W22">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C29" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C29" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="c6aa339a-f2e2-49b5-8527-c912a336ff4c" diagramComponentId="e7f49df6-f0fd-4d25-8755-8733bf1fdf75" ref="c8ac594f-3e3e-4127-b194-83a55d17d4b4" name="Lightsail" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="CD-LIGHTSAIL">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-02-24T07:25:10.295">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-02-24T07:25:10.290">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-AWS-LIGHTSAIL1" name="Control access to AWS Lightsail" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to AWS Lightsail&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; By default, IAM users and roles don't have permission to create or modify Lightsail resources. They also can't perform tasks using the , AWS CLI, or AWS API. An IAM administrator must create IAM policies that grant users and roles permission to perform specific API operations on the specified resources they need. The administrator must then attach those policies to the IAM users or groups that require those permissions.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Example - Allowing Creation and Deletion of Lightsail Resources Based on Tags&lt;/p&gt; 
&lt;p&gt;You can use conditions in your identity-based policy to control access to Lightsail resources based on tags. This example shows how you might create a policy that restricts users from creating new Lightsail resources unless a key tag of allow and a value of true is defined with the create request. This policy also restricts users from deleting resources unless they have the allow/true key-value tag.&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": [ "lightsail:Create*", "lightsail:TagResource", "lightsail:UntagResource" ], "Resource": "*", "Condition": { "StringEquals": { "aws:RequestTag/allow": "true" } } }, { "Effect": "Allow", "Action": [ "lightsail:Delete*", "lightsail:TagResource", "lightsail:UntagResource" ], "Resource": "*", "Condition": { "StringEquals": { "aws:ResourceTag/allow": "true" } } } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;The following example restricts users from changing the tag for resources that have a key-value tag that is not allow/false.&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Effect": "Deny", "Action": [ "lightsail:TagResource" ], "Resource": "*", "Condition": { "StringNotEquals": { "aws:ResourceTag/allow": "false" } } } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;You can attach these policies to the IAM users in your account.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon Lightsail Identity-Based Policy Examples" url="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/security_iam_id-based-policy-examples"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-02-24T07:25:09.775">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-02-24T07:25:09.783">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="C-AWS-LIGHTSAIL1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-LIGHTSAIL1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jwilliams@iriusrisk.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-5.1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="mitre-attack-groups-field" value=""/>
                <customField ref="stride" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>
